
StructureQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e30  08005e30  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e38  08005e38  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e3c  08005e3c  00015e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004204  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004264  20004264  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012757  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cdb  00000000  00000000  0003282a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001030  00000000  00000000  00035508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c9d  00000000  00000000  00036538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c07  00000000  00000000  000371d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014023  00000000  00000000  00059ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2f19  00000000  00000000  0006ddff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047f8  00000000  00000000  00140d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00145510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bd0 	.word	0x08005bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005bd0 	.word	0x08005bd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	2000011c 	.word	0x2000011c

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fbff 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f867 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f8f9 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f8cd 	bl	8000760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SimpleQueue = xQueueCreate(2, sizeof (my_struct));
 80005c6:	2200      	movs	r2, #0
 80005c8:	210c      	movs	r1, #12
 80005ca:	2002      	movs	r0, #2
 80005cc:	f002 ffc8 	bl	8003560 <xQueueGenericCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a21      	ldr	r2, [pc, #132]	; (8000658 <main+0xa8>)
 80005d4:	6013      	str	r3, [r2, #0]
   if (SimpleQueue == 0)  // Queue not created
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0xa8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10d      	bne.n	80005fa <main+0x4a>
   {
 	  char *str = "Unable to create Integer Queue\n\n";
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <main+0xac>)
 80005e0:	603b      	str	r3, [r7, #0]
 	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005e2:	6838      	ldr	r0, [r7, #0]
 80005e4:	f7ff fdf4 	bl	80001d0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	6839      	ldr	r1, [r7, #0]
 80005f2:	481b      	ldr	r0, [pc, #108]	; (8000660 <main+0xb0>)
 80005f4:	f001 fed1 	bl	800239a <HAL_UART_Transmit>
 80005f8:	e00c      	b.n	8000614 <main+0x64>
   }
   else
   {
 	  char *str = "Integer Queue Created successfully\n\n";
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <main+0xb4>)
 80005fc:	607b      	str	r3, [r7, #4]
 	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff fde6 	bl	80001d0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <main+0xb0>)
 8000610:	f001 fec3 	bl	800239a <HAL_UART_Transmit>
   }

   xTaskCreate(Sender1_Task, "Sender1", 128, NULL, 2, &Sender1_Task_Handler);
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <main+0xb8>)
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	2302      	movs	r3, #2
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2300      	movs	r3, #0
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	4912      	ldr	r1, [pc, #72]	; (800066c <main+0xbc>)
 8000622:	4813      	ldr	r0, [pc, #76]	; (8000670 <main+0xc0>)
 8000624:	f003 fb41 	bl	8003caa <xTaskCreate>
   xTaskCreate(Sender2_Task, "Sender2", 128, NULL, 2, &Sender2_Task_Handler);
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0xc4>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	4910      	ldr	r1, [pc, #64]	; (8000678 <main+0xc8>)
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <main+0xcc>)
 8000638:	f003 fb37 	bl	8003caa <xTaskCreate>
   xTaskCreate(Receiver_Task, "receiver", 128, NULL, 1, &Receiver_Task_Handler);
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0xd0>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	490e      	ldr	r1, [pc, #56]	; (8000684 <main+0xd4>)
 800064a:	480f      	ldr	r0, [pc, #60]	; (8000688 <main+0xd8>)
 800064c:	f003 fb2d 	bl	8003caa <xTaskCreate>

   vTaskStartScheduler();
 8000650:	f003 fcac 	bl	8003fac <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0xa4>
 8000656:	bf00      	nop
 8000658:	20000360 	.word	0x20000360
 800065c:	08005be8 	.word	0x08005be8
 8000660:	2000031c 	.word	0x2000031c
 8000664:	08005c0c 	.word	0x08005c0c
 8000668:	20000364 	.word	0x20000364
 800066c:	08005c34 	.word	0x08005c34
 8000670:	08000859 	.word	0x08000859
 8000674:	20000368 	.word	0x20000368
 8000678:	08005c3c 	.word	0x08005c3c
 800067c:	0800090d 	.word	0x0800090d
 8000680:	2000036c 	.word	0x2000036c
 8000684:	08005c44 	.word	0x08005c44
 8000688:	080009c1 	.word	0x080009c1

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fdbe 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	; 0xa8
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 febd 	bl	8001490 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f9ba 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f91e 	bl	8001980 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f9a3 	bl	8000a94 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f001 fdb2 	bl	8002300 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f977 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000031c 	.word	0x2000031c
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_GPIO_Init+0x9c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <MX_GPIO_Init+0x9c>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_GPIO_Init+0x9c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0xa0>)
 8000826:	f000 fe19 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800082a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0xa0>)
 8000844:	f000 fc6e 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020c00 	.word	0x40020c00

08000858 <Sender1_Task>:

/* USER CODE BEGIN 4 */
void Sender1_Task (void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;

	while(1)
	{
		char *str = "Entered sender1 task\n about to send to the queue\n";
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <Sender1_Task+0x9c>)
 8000862:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), portMAX_DELAY);
 8000864:	6978      	ldr	r0, [r7, #20]
 8000866:	f7ff fcb3 	bl	80001d0 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	6979      	ldr	r1, [r7, #20]
 8000874:	4820      	ldr	r0, [pc, #128]	; (80008f8 <Sender1_Task+0xa0>)
 8000876:	f001 fd90 	bl	800239a <HAL_UART_Transmit>

		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 800087a:	200c      	movs	r0, #12
 800087c:	f004 fac4 	bl	8004e08 <pvPortMalloc>
 8000880:	4603      	mov	r3, r0
 8000882:	60fb      	str	r3, [r7, #12]

		ptrtostruct->counter = 1+indx1;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <Sender1_Task+0xa4>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3201      	adds	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value = 1000 + indx1*1000;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <Sender1_Task+0xa4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b29b      	uxth	r3, r3
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	4619      	mov	r1, r3
 800089a:	0149      	lsls	r1, r1, #5
 800089c:	1ac9      	subs	r1, r1, r3
 800089e:	0089      	lsls	r1, r1, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	8113      	strh	r3, [r2, #8]
		ptrtostruct->str = "HELLO FROM SENDER 1";
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <Sender1_Task+0xa8>)
 80008ac:	601a      	str	r2, [r3, #0]

		if(xQueueSend(SimpleQueue, &ptrtostruct, portMAX_DELAY) == pdPASS)
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <Sender1_Task+0xac>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f107 010c 	add.w	r1, r7, #12
 80008b6:	2300      	movs	r3, #0
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	f002 feaa 	bl	8003614 <xQueueGenericSend>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d10c      	bne.n	80008e0 <Sender1_Task+0x88>
		{
			char *str2 = "Successfull send the queue\n Leaving the task 1\n";
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <Sender1_Task+0xb0>)
 80008c8:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), portMAX_DELAY);
 80008ca:	6938      	ldr	r0, [r7, #16]
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	6939      	ldr	r1, [r7, #16]
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <Sender1_Task+0xa0>)
 80008dc:	f001 fd5d 	bl	800239a <HAL_UART_Transmit>
		}

		indx1++;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <Sender1_Task+0xa4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <Sender1_Task+0xa4>)
 80008e8:	6013      	str	r3, [r2, #0]
		vTaskDelay(pdMS_TO_TICKS(2000));
 80008ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ee:	f003 fb29 	bl	8003f44 <vTaskDelay>
	{
 80008f2:	e7b5      	b.n	8000860 <Sender1_Task+0x8>
 80008f4:	08005c50 	.word	0x08005c50
 80008f8:	2000031c 	.word	0x2000031c
 80008fc:	20000370 	.word	0x20000370
 8000900:	08005c84 	.word	0x08005c84
 8000904:	20000360 	.word	0x20000360
 8000908:	08005c98 	.word	0x08005c98

0800090c <Sender2_Task>:
	}
}

void Sender2_Task (void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;

	while(1)
	{
		char *str = "Entered sender2 task\n about to send to the queue\n";
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <Sender2_Task+0x9c>)
 8000916:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), portMAX_DELAY);
 8000918:	6978      	ldr	r0, [r7, #20]
 800091a:	f7ff fc59 	bl	80001d0 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	6979      	ldr	r1, [r7, #20]
 8000928:	4820      	ldr	r0, [pc, #128]	; (80009ac <Sender2_Task+0xa0>)
 800092a:	f001 fd36 	bl	800239a <HAL_UART_Transmit>

		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 800092e:	200c      	movs	r0, #12
 8000930:	f004 fa6a 	bl	8004e08 <pvPortMalloc>
 8000934:	4603      	mov	r3, r0
 8000936:	60fb      	str	r3, [r7, #12]

		ptrtostruct->counter = 1+indx2;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <Sender2_Task+0xa4>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3201      	adds	r2, #1
 8000940:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value = 1000 + indx2*1000;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <Sender2_Task+0xa4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	b29b      	uxth	r3, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4619      	mov	r1, r3
 800094e:	0149      	lsls	r1, r1, #5
 8000950:	1ac9      	subs	r1, r1, r3
 8000952:	0089      	lsls	r1, r1, #2
 8000954:	440b      	add	r3, r1
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	b29b      	uxth	r3, r3
 800095a:	8113      	strh	r3, [r2, #8]
		ptrtostruct->str = "HELLO FROM SENDER 2";
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <Sender2_Task+0xa8>)
 8000960:	601a      	str	r2, [r3, #0]

		if(xQueueSend(SimpleQueue, &ptrtostruct, portMAX_DELAY) == pdPASS)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <Sender2_Task+0xac>)
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	f107 010c 	add.w	r1, r7, #12
 800096a:	2300      	movs	r3, #0
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	f002 fe50 	bl	8003614 <xQueueGenericSend>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d10c      	bne.n	8000994 <Sender2_Task+0x88>
		{
			char *str2 = "Successfull send the queue\n Leaving the task 2\n";
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <Sender2_Task+0xb0>)
 800097c:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), portMAX_DELAY);
 800097e:	6938      	ldr	r0, [r7, #16]
 8000980:	f7ff fc26 	bl	80001d0 <strlen>
 8000984:	4603      	mov	r3, r0
 8000986:	b29a      	uxth	r2, r3
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
 800098c:	6939      	ldr	r1, [r7, #16]
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <Sender2_Task+0xa0>)
 8000990:	f001 fd03 	bl	800239a <HAL_UART_Transmit>
		}

		indx2++;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <Sender2_Task+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <Sender2_Task+0xa4>)
 800099c:	6013      	str	r3, [r2, #0]
		vTaskDelay(pdMS_TO_TICKS(2000));
 800099e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009a2:	f003 facf 	bl	8003f44 <vTaskDelay>
	{
 80009a6:	e7b5      	b.n	8000914 <Sender2_Task+0x8>
 80009a8:	08005cc8 	.word	0x08005cc8
 80009ac:	2000031c 	.word	0x2000031c
 80009b0:	20000374 	.word	0x20000374
 80009b4:	08005cfc 	.word	0x08005cfc
 80009b8:	20000360 	.word	0x20000360
 80009bc:	08005d10 	.word	0x08005d10

080009c0 <Receiver_Task>:
	}
}

void Receiver_Task (void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	6078      	str	r0, [r7, #4]
	my_struct *Rptrtostruct;
	char *ptr;
	while(1)
	{
		char *str = "Entered RECEIVER task\n about to receiver FROM the queue\n";
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <Receiver_Task+0x9c>)
 80009ca:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), portMAX_DELAY);
 80009cc:	6978      	ldr	r0, [r7, #20]
 80009ce:	f7ff fbff 	bl	80001d0 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	6979      	ldr	r1, [r7, #20]
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <Receiver_Task+0xa0>)
 80009de:	f001 fcdc 	bl	800239a <HAL_UART_Transmit>

		if(xQueueReceive(SimpleQueue, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <Receiver_Task+0xa4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f107 010c 	add.w	r1, r7, #12
 80009ea:	f04f 32ff 	mov.w	r2, #4294967295
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 ff0e 	bl	8003810 <xQueueReceive>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d11f      	bne.n	8000a3a <Receiver_Task+0x7a>
		{
			ptr = pvPortMalloc(100 * sizeof (char));
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f004 fa04 	bl	8004e08 <pvPortMalloc>
 8000a00:	6138      	str	r0, [r7, #16]
			sprintf(ptr, "Receive from the queue:\n counter = %d\n LARGE VALUE = %u\n STRING = %s\n", Rptrtostruct->counter, Rptrtostruct->large_value, Rptrtostruct->str);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	891b      	ldrh	r3, [r3, #8]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	460b      	mov	r3, r1
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <Receiver_Task+0xa8>)
 8000a16:	6938      	ldr	r0, [r7, #16]
 8000a18:	f004 fbe0 	bl	80051dc <siprintf>

			HAL_UART_Transmit(&huart2, (uint8_t *)ptr, strlen(ptr), portMAX_DELAY);
 8000a1c:	6938      	ldr	r0, [r7, #16]
 8000a1e:	f7ff fbd7 	bl	80001d0 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	6939      	ldr	r1, [r7, #16]
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <Receiver_Task+0xa0>)
 8000a2e:	f001 fcb4 	bl	800239a <HAL_UART_Transmit>

			vPortFree(ptr);
 8000a32:	6938      	ldr	r0, [r7, #16]
 8000a34:	f004 fab4 	bl	8004fa0 <vPortFree>
 8000a38:	e006      	b.n	8000a48 <Receiver_Task+0x88>
		}else {
			HAL_UART_Transmit(&huart2, (uint8_t *)"Reception failed.....", 30, portMAX_DELAY);
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	221e      	movs	r2, #30
 8000a40:	490a      	ldr	r1, [pc, #40]	; (8000a6c <Receiver_Task+0xac>)
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <Receiver_Task+0xa0>)
 8000a44:	f001 fca9 	bl	800239a <HAL_UART_Transmit>
		}

		vPortFree(Rptrtostruct);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 faa8 	bl	8004fa0 <vPortFree>
		vTaskDelay(pdMS_TO_TICKS(3000));
 8000a50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a54:	f003 fa76 	bl	8003f44 <vTaskDelay>
	{
 8000a58:	e7b6      	b.n	80009c8 <Receiver_Task+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	08005d40 	.word	0x08005d40
 8000a60:	2000031c 	.word	0x2000031c
 8000a64:	20000360 	.word	0x20000360
 8000a68:	08005d7c 	.word	0x08005d7c
 8000a6c:	08005dc4 	.word	0x08005dc4

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f000 f9bb 	bl	8000dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010000 	.word	0x40010000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <HAL_MspInit+0x54>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x54>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_MspInit+0x54>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x54>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f000 fa61 	bl	8000fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_UART_MspInit+0x94>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d133      	bne.n	8000b82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_UART_MspInit+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b52:	230c      	movs	r3, #12
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b62:	2307      	movs	r3, #7
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_MspInit+0x9c>)
 8000b6e:	f000 fad9 	bl	8001124 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	2026      	movs	r0, #38	; 0x26
 8000b78:	f000 fa18 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b7c:	2026      	movs	r0, #38	; 0x26
 8000b7e:	f000 fa31 	bl	8000fe4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <HAL_InitTick+0xd4>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <HAL_InitTick+0xd4>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <HAL_InitTick+0xd4>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc4:	f107 020c 	add.w	r2, r7, #12
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f8b6 	bl	8001d40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bd4:	f001 f8a0 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_InitTick+0xd8>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9b      	lsrs	r3, r3, #18
 8000be8:	3b01      	subs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_InitTick+0xdc>)
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <HAL_InitTick+0xe0>)
 8000bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_InitTick+0xdc>)
 8000bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_InitTick+0xdc>)
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_InitTick+0xdc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_InitTick+0xdc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_InitTick+0xdc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <HAL_InitTick+0xdc>)
 8000c14:	f001 f8c6 	bl	8001da4 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d11b      	bne.n	8000c5e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c26:	4813      	ldr	r0, [pc, #76]	; (8000c74 <HAL_InitTick+0xdc>)
 8000c28:	f001 f916 	bl	8001e58 <HAL_TIM_Base_Start_IT>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d111      	bne.n	8000c5e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c3a:	2019      	movs	r0, #25
 8000c3c:	f000 f9d2 	bl	8000fe4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d808      	bhi.n	8000c58 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f000 f9ae 	bl	8000fac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0xe4>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e002      	b.n	8000c5e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3730      	adds	r7, #48	; 0x30
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	20000378 	.word	0x20000378
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cb2:	f001 f941 	bl	8001f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000378 	.word	0x20000378

08000cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <USART2_IRQHandler+0x10>)
 8000cc6:	f001 fbfb 	bl	80024c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000031c 	.word	0x2000031c

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f004 fae8 	bl	80052d8 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	200003c0 	.word	0x200003c0
 8000d3c:	20004268 	.word	0x20004268

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ffd7 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f004 faa7 	bl	80052e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fc0b 	bl	80005b0 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000da8:	08005e40 	.word	0x08005e40
  ldr r2, =_sbss
 8000dac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000db0:	20004264 	.word	0x20004264

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f8d8 	bl	8000f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f7ff fed6 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe58 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200003c4 	.word	0x200003c4

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200003c4 	.word	0x200003c4

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff4c 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbe:	f7ff ff61 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8000fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	f7ff ffb1 	bl	8000f30 <NVIC_EncodePriority>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff80 	bl	8000edc <__NVIC_SetPriority>
}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff54 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800100e:	f7ff ff09 	bl	8000e24 <HAL_GetTick>
 8001012:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d008      	beq.n	8001032 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e052      	b.n	80010d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0216 	bic.w	r2, r2, #22
 8001040:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	695a      	ldr	r2, [r3, #20]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001050:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d103      	bne.n	8001062 <HAL_DMA_Abort+0x62>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0208 	bic.w	r2, r2, #8
 8001070:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0201 	bic.w	r2, r2, #1
 8001080:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001082:	e013      	b.n	80010ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001084:	f7ff fece 	bl	8000e24 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b05      	cmp	r3, #5
 8001090:	d90c      	bls.n	80010ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2220      	movs	r2, #32
 8001096:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e015      	b.n	80010d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1e4      	bne.n	8001084 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	223f      	movs	r2, #63	; 0x3f
 80010c0:	409a      	lsls	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d004      	beq.n	80010fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00c      	b.n	8001118 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e16b      	b.n	8001418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 815a 	bne.w	8001412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80b4 	beq.w	8001412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b60      	ldr	r3, [pc, #384]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a5f      	ldr	r2, [pc, #380]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a5b      	ldr	r2, [pc, #364]	; (8001434 <HAL_GPIO_Init+0x310>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	; (8001438 <HAL_GPIO_Init+0x314>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	; (800143c <HAL_GPIO_Init+0x318>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_GPIO_Init+0x31c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x324>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x328>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x32c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x330>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x20a>
 800132a:	2307      	movs	r3, #7
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x228>
 800132e:	2308      	movs	r3, #8
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x228>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x228>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x228>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_GPIO_Init+0x310>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_GPIO_Init+0x334>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_GPIO_Init+0x334>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_GPIO_Init+0x334>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_GPIO_Init+0x334>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae90 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e267      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d075      	beq.n	800159a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d00c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ba:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d112      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c6:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d05b      	beq.n	8001598 <HAL_RCC_OscConfig+0x108>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d157      	bne.n	8001598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e242      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x74>
 80014f6:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a75      	ldr	r2, [pc, #468]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e01d      	b.n	8001540 <HAL_RCC_OscConfig+0xb0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x98>
 800150e:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6f      	ldr	r2, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6c      	ldr	r2, [pc, #432]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0xb0>
 8001528:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a68      	ldr	r2, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a65      	ldr	r2, [pc, #404]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fc6c 	bl	8000e24 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fc68 	bl	8000e24 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e207      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0xc0>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fc58 	bl	8000e24 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fc54 	bl	8000e24 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1f3      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0xe8>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d063      	beq.n	800166e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x152>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1c7      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4937      	ldr	r1, [pc, #220]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	e03a      	b.n	800166e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_RCC_OscConfig+0x244>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fc0d 	bl	8000e24 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fc09 	bl	8000e24 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1a8      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4925      	ldr	r1, [pc, #148]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x244>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fbec 	bl	8000e24 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff fbe8 	bl	8000e24 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e187      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d036      	beq.n	80016e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_RCC_OscConfig+0x248>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fbcc 	bl	8000e24 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fbc8 	bl	8000e24 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e167      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x240>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x200>
 80016ae:	e01b      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_OscConfig+0x248>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbb5 	bl	8000e24 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	e00e      	b.n	80016dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fbb1 	bl	8000e24 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d907      	bls.n	80016dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e150      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	42470000 	.word	0x42470000
 80016d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1ea      	bne.n	80016be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8097 	beq.w	8001824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b81      	ldr	r3, [pc, #516]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a7c      	ldr	r2, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b77      	ldr	r3, [pc, #476]	; (8001904 <HAL_RCC_OscConfig+0x474>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b74      	ldr	r3, [pc, #464]	; (8001904 <HAL_RCC_OscConfig+0x474>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a73      	ldr	r2, [pc, #460]	; (8001904 <HAL_RCC_OscConfig+0x474>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff fb71 	bl	8000e24 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff fb6d 	bl	8000e24 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e10c      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_RCC_OscConfig+0x474>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x2ea>
 800176c:	4b64      	ldr	r3, [pc, #400]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a63      	ldr	r2, [pc, #396]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
 8001778:	e01c      	b.n	80017b4 <HAL_RCC_OscConfig+0x324>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x30c>
 8001782:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a5e      	ldr	r2, [pc, #376]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
 800178e:	4b5c      	ldr	r3, [pc, #368]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	4a5b      	ldr	r2, [pc, #364]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6713      	str	r3, [r2, #112]	; 0x70
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0x324>
 800179c:	4b58      	ldr	r3, [pc, #352]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a57      	ldr	r2, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a54      	ldr	r2, [pc, #336]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80017ae:	f023 0304 	bic.w	r3, r3, #4
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d015      	beq.n	80017e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fb32 	bl	8000e24 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb2e 	bl	8000e24 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0cb      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ee      	beq.n	80017c4 <HAL_RCC_OscConfig+0x334>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fb1c 	bl	8000e24 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fb18 	bl	8000e24 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0b5      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ee      	bne.n	80017f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	4a38      	ldr	r2, [pc, #224]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 800181e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80a1 	beq.w	8001970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b08      	cmp	r3, #8
 8001838:	d05c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d141      	bne.n	80018c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_OscConfig+0x478>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff faec 	bl	8000e24 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff fae8 	bl	8000e24 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e087      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	3b01      	subs	r3, #1
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	491b      	ldr	r1, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x478>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fac1 	bl	8000e24 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fabd 	bl	8000e24 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e05c      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x416>
 80018c4:	e054      	b.n	8001970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_OscConfig+0x478>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff faaa 	bl	8000e24 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff faa6 	bl	8000e24 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e045      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x470>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x444>
 80018f2:	e03d      	b.n	8001970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e038      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000
 8001908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_RCC_OscConfig+0x4ec>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d028      	beq.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d121      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d11a      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001944:	4293      	cmp	r3, r2
 8001946:	d111      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	3b01      	subs	r3, #1
 8001956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d107      	bne.n	800196c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0cc      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d90c      	bls.n	80019bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b8      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	494d      	ldr	r1, [pc, #308]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d044      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d119      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e067      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4934      	ldr	r1, [pc, #208]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff f9d8 	bl	8000e24 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff f9d4 	bl	8000e24 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e04f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 020c 	and.w	r2, r3, #12
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1eb      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d20c      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e032      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4916      	ldr	r1, [pc, #88]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b06:	f000 f821 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	490a      	ldr	r1, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	5ccb      	ldrb	r3, [r1, r3]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f836 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08005de4 	.word	0x08005de4
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b50:	b090      	sub	sp, #64	; 0x40
 8001b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d00d      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x40>
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	f200 80a1 	bhi.w	8001cb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x34>
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b7e:	e09b      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b84:	e09b      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b8a:	e098      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b96:	4b4d      	ldr	r3, [pc, #308]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d028      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	2200      	movs	r2, #0
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	627a      	str	r2, [r7, #36]	; 0x24
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb8:	fb03 f201 	mul.w	r2, r3, r1
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	fb00 f303 	mul.w	r3, r0, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a43      	ldr	r2, [pc, #268]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bcc:	460a      	mov	r2, r1
 8001bce:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd2:	4413      	add	r3, r2
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	61fa      	str	r2, [r7, #28]
 8001bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001be6:	f7fe fb4b 	bl	8000280 <__aeabi_uldivmod>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4613      	mov	r3, r2
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf2:	e053      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	617a      	str	r2, [r7, #20]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c06:	f04f 0b00 	mov.w	fp, #0
 8001c0a:	4652      	mov	r2, sl
 8001c0c:	465b      	mov	r3, fp
 8001c0e:	f04f 0000 	mov.w	r0, #0
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	0159      	lsls	r1, r3, #5
 8001c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1c:	0150      	lsls	r0, r2, #5
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	ebb2 080a 	subs.w	r8, r2, sl
 8001c26:	eb63 090b 	sbc.w	r9, r3, fp
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c3e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c42:	eb63 0509 	sbc.w	r5, r3, r9
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	00eb      	lsls	r3, r5, #3
 8001c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c54:	00e2      	lsls	r2, r4, #3
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	eb14 030a 	adds.w	r3, r4, sl
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	eb45 030b 	adc.w	r3, r5, fp
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c72:	4629      	mov	r1, r5
 8001c74:	028b      	lsls	r3, r1, #10
 8001c76:	4621      	mov	r1, r4
 8001c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	028a      	lsls	r2, r1, #10
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	2200      	movs	r2, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	60fa      	str	r2, [r7, #12]
 8001c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c90:	f7fe faf6 	bl	8000280 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	0c1b      	lsrs	r3, r3, #16
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3740      	adds	r7, #64	; 0x40
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	017d7840 	.word	0x017d7840

08001cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a9b      	lsrs	r3, r3, #10
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08005df4 	.word	0x08005df4

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffdc 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0b5b      	lsrs	r3, r3, #13
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08005df4 	.word	0x08005df4

08001d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_RCC_GetClockConfig+0x60>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0207 	and.w	r2, r3, #7
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e041      	b.n	8001e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f839 	bl	8001e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3304      	adds	r3, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f000 f9d8 	bl	8002198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d001      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e04e      	b.n	8001f0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d022      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9a:	d01d      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d018      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00e      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x80>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d010      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efa:	e007      	b.n	8001f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40001800 	.word	0x40001800

08001f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0202 	mvn.w	r2, #2
 8001f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8ee 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8e0 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f8f1 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0204 	mvn.w	r2, #4
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8c4 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8b6 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8c7 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f89a 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f88c 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f89d 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b10      	cmp	r3, #16
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0210 	mvn.w	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2208      	movs	r2, #8
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f870 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f862 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f873 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0201 	mvn.w	r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fcda 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f902 	bl	80022ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f838 	bl	8002184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8cc 	bl	80022d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a40      	ldr	r2, [pc, #256]	; (80022ac <TIM_Base_SetConfig+0x114>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b6:	d00f      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3d      	ldr	r2, [pc, #244]	; (80022b0 <TIM_Base_SetConfig+0x118>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a3c      	ldr	r2, [pc, #240]	; (80022b4 <TIM_Base_SetConfig+0x11c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <TIM_Base_SetConfig+0x120>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <TIM_Base_SetConfig+0x124>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <TIM_Base_SetConfig+0x114>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d02b      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d027      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <TIM_Base_SetConfig+0x118>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d023      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <TIM_Base_SetConfig+0x11c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <TIM_Base_SetConfig+0x120>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01b      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a29      	ldr	r2, [pc, #164]	; (80022bc <TIM_Base_SetConfig+0x124>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d017      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <TIM_Base_SetConfig+0x128>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <TIM_Base_SetConfig+0x12c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a26      	ldr	r2, [pc, #152]	; (80022c8 <TIM_Base_SetConfig+0x130>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a25      	ldr	r2, [pc, #148]	; (80022cc <TIM_Base_SetConfig+0x134>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <TIM_Base_SetConfig+0x138>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <TIM_Base_SetConfig+0x13c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <TIM_Base_SetConfig+0x114>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <TIM_Base_SetConfig+0xf8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <TIM_Base_SetConfig+0x124>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d103      	bne.n	8002298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	615a      	str	r2, [r3, #20]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40000c00 	.word	0x40000c00
 80022bc:	40010400 	.word	0x40010400
 80022c0:	40014000 	.word	0x40014000
 80022c4:	40014400 	.word	0x40014400
 80022c8:	40014800 	.word	0x40014800
 80022cc:	40001800 	.word	0x40001800
 80022d0:	40001c00 	.word	0x40001c00
 80022d4:	40002000 	.word	0x40002000

080022d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e03f      	b.n	8002392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fbe6 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fd7b 	bl	8002e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b08a      	sub	sp, #40	; 0x28
 800239e:	af02      	add	r7, sp, #8
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d17c      	bne.n	80024b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_UART_Transmit+0x2c>
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e075      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Transmit+0x3e>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e06e      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2221      	movs	r2, #33	; 0x21
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ee:	f7fe fd19 	bl	8000e24 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002408:	d108      	bne.n	800241c <HAL_UART_Transmit+0x82>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e003      	b.n	8002424 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800242c:	e02a      	b.n	8002484 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2200      	movs	r2, #0
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 faf9 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e036      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800245c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	3302      	adds	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e007      	b.n	8002476 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	3301      	adds	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1cf      	bne.n	800242e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2200      	movs	r2, #0
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fac9 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e006      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e000      	b.n	80024b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
  }
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0ba      	sub	sp, #232	; 0xe8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_UART_IRQHandler+0x66>
 8002512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fbd3 	bl	8002cca <UART_Receive_IT>
      return;
 8002524:	e256      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80de 	beq.w	80026ec <HAL_UART_IRQHandler+0x22c>
 8002530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800253c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002540:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80d1 	beq.w	80026ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_UART_IRQHandler+0xae>
 8002556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_UART_IRQHandler+0xd2>
 800257a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_UART_IRQHandler+0xf6>
 800259e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d011      	beq.n	80025e6 <HAL_UART_IRQHandler+0x126>
 80025c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0208 	orr.w	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 81ed 	beq.w	80029ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_UART_IRQHandler+0x14e>
 80025fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fb5e 	bl	8002cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_UART_IRQHandler+0x17a>
 8002632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04f      	beq.n	80026da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa66 	bl	8002b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d141      	bne.n	80026d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3314      	adds	r3, #20
 8002676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800267a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800267e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1d9      	bne.n	800264e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d013      	beq.n	80026ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	4a7d      	ldr	r2, [pc, #500]	; (800289c <HAL_UART_IRQHandler+0x3dc>)
 80026a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fd16 	bl	80010e0 <HAL_DMA_Abort_IT>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026c4:	4610      	mov	r0, r2
 80026c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c8:	e00e      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f99a 	bl	8002a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	e00a      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f996 	bl	8002a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e006      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f992 	bl	8002a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026e6:	e170      	b.n	80029ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	bf00      	nop
    return;
 80026ea:	e16e      	b.n	80029ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	f040 814a 	bne.w	800298a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8143 	beq.w	800298a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 813c 	beq.w	800298a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	f040 80b4 	bne.w	80028a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8140 	beq.w	80029ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002756:	429a      	cmp	r2, r3
 8002758:	f080 8139 	bcs.w	80029ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002762:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276e:	f000 8088 	beq.w	8002882 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800278c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800279e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1d9      	bne.n	8002772 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e1      	bne.n	80027be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3314      	adds	r3, #20
 8002800:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800280a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3314      	adds	r3, #20
 800281a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800281e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002820:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800282c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e3      	bne.n	80027fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284a:	e853 3f00 	ldrex	r3, [r3]
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	f023 0310 	bic.w	r3, r3, #16
 8002856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002864:	65ba      	str	r2, [r7, #88]	; 0x58
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800286a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800286c:	e841 2300 	strex	r3, r2, [r1]
 8002870:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e3      	bne.n	8002840 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fbbf 	bl	8001000 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800288a:	b29b      	uxth	r3, r3
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b29b      	uxth	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8c0 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002898:	e099      	b.n	80029ce <HAL_UART_IRQHandler+0x50e>
 800289a:	bf00      	nop
 800289c:	08002bd3 	.word	0x08002bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 808b 	beq.w	80029d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8086 	beq.w	80029d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	e853 3f00 	ldrex	r3, [r3]
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028ea:	647a      	str	r2, [r7, #68]	; 0x44
 80028ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e3      	bne.n	80028c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	623b      	str	r3, [r7, #32]
   return(result);
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3314      	adds	r3, #20
 800291e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002922:	633a      	str	r2, [r7, #48]	; 0x30
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e3      	bne.n	80028fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	60fb      	str	r3, [r7, #12]
   return(result);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0310 	bic.w	r3, r3, #16
 800295a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002968:	61fa      	str	r2, [r7, #28]
 800296a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	69b9      	ldr	r1, [r7, #24]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	617b      	str	r3, [r7, #20]
   return(result);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e3      	bne.n	8002944 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800297c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f848 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002988:	e023      	b.n	80029d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800298a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_UART_IRQHandler+0x4ea>
 8002996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f929 	bl	8002bfa <UART_Transmit_IT>
    return;
 80029a8:	e014      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00e      	beq.n	80029d4 <HAL_UART_IRQHandler+0x514>
 80029b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f969 	bl	8002c9a <UART_EndTransmit_IT>
    return;
 80029c8:	e004      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
    return;
 80029ca:	bf00      	nop
 80029cc:	e002      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
      return;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
      return;
 80029d2:	bf00      	nop
  }
}
 80029d4:	37e8      	adds	r7, #232	; 0xe8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop

080029dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b090      	sub	sp, #64	; 0x40
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a40:	e050      	b.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d04c      	beq.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a50:	f7fe f9e8 	bl	8000e24 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d241      	bcs.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	e853 3f00 	ldrex	r3, [r3]
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a80:	637a      	str	r2, [r7, #52]	; 0x34
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a88:	e841 2300 	strex	r3, r2, [r1]
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e5      	bne.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3314      	adds	r3, #20
 8002a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab4:	623a      	str	r2, [r7, #32]
 8002ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	69f9      	ldr	r1, [r7, #28]
 8002aba:	6a3a      	ldr	r2, [r7, #32]
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e5      	bne.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e00f      	b.n	8002b04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4013      	ands	r3, r2
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d09f      	beq.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3740      	adds	r7, #64	; 0x40
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b095      	sub	sp, #84	; 0x54
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b34:	643a      	str	r2, [r7, #64]	; 0x40
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b3c:	e841 2300 	strex	r3, r2, [r1]
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e5      	bne.n	8002b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3314      	adds	r3, #20
 8002b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3314      	adds	r3, #20
 8002b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e5      	bne.n	8002b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d119      	bne.n	8002bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f023 0310 	bic.w	r3, r3, #16
 8002b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba4:	61ba      	str	r2, [r7, #24]
 8002ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	6979      	ldr	r1, [r7, #20]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bc6:	bf00      	nop
 8002bc8:	3754      	adds	r7, #84	; 0x54
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff09 	bl	8002a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b21      	cmp	r3, #33	; 0x21
 8002c0c:	d13e      	bne.n	8002c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	d114      	bne.n	8002c42 <UART_Transmit_IT+0x48>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d110      	bne.n	8002c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	1c9a      	adds	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	621a      	str	r2, [r3, #32]
 8002c40:	e008      	b.n	8002c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6211      	str	r1, [r2, #32]
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4619      	mov	r1, r3
 8002c62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10f      	bne.n	8002c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fe8e 	bl	80029dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08c      	sub	sp, #48	; 0x30
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b22      	cmp	r3, #34	; 0x22
 8002cdc:	f040 80ab 	bne.w	8002e36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce8:	d117      	bne.n	8002d1a <UART_Receive_IT+0x50>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d113      	bne.n	8002d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	1c9a      	adds	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
 8002d18:	e026      	b.n	8002d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2c:	d007      	beq.n	8002d3e <UART_Receive_IT+0x74>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <UART_Receive_IT+0x82>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e008      	b.n	8002d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4619      	mov	r1, r3
 8002d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15a      	bne.n	8002e32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0220 	bic.w	r2, r2, #32
 8002d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d135      	bne.n	8002e28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f023 0310 	bic.w	r3, r3, #16
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	330c      	adds	r3, #12
 8002de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de2:	623a      	str	r2, [r7, #32]
 8002de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	69f9      	ldr	r1, [r7, #28]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e5      	bne.n	8002dc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d10a      	bne.n	8002e1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fdf9 	bl	8002a18 <HAL_UARTEx_RxEventCallback>
 8002e26:	e002      	b.n	8002e2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff fde1 	bl	80029f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e002      	b.n	8002e38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3730      	adds	r7, #48	; 0x30
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b0c0      	sub	sp, #256	; 0x100
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	ea40 0301 	orr.w	r3, r0, r1
 8002e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e98:	f021 010c 	bic.w	r1, r1, #12
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	6999      	ldr	r1, [r3, #24]
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	ea40 0301 	orr.w	r3, r0, r1
 8002ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b8f      	ldr	r3, [pc, #572]	; (800310c <UART_SetConfig+0x2cc>)
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <UART_SetConfig+0xa0>
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <UART_SetConfig+0x2d0>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d104      	bne.n	8002eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee0:	f7fe ff1a 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ee8:	e003      	b.n	8002ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eea:	f7fe ff01 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8002eee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	f040 810c 	bne.w	8003118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f12:	4622      	mov	r2, r4
 8002f14:	462b      	mov	r3, r5
 8002f16:	1891      	adds	r1, r2, r2
 8002f18:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f1a:	415b      	adcs	r3, r3
 8002f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f22:	4621      	mov	r1, r4
 8002f24:	eb12 0801 	adds.w	r8, r2, r1
 8002f28:	4629      	mov	r1, r5
 8002f2a:	eb43 0901 	adc.w	r9, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb18 0303 	adds.w	r3, r8, r3
 8002f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb49 0303 	adc.w	r3, r9, r3
 8002f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f6e:	460b      	mov	r3, r1
 8002f70:	18db      	adds	r3, r3, r3
 8002f72:	653b      	str	r3, [r7, #80]	; 0x50
 8002f74:	4613      	mov	r3, r2
 8002f76:	eb42 0303 	adc.w	r3, r2, r3
 8002f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f84:	f7fd f97c 	bl	8000280 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4b61      	ldr	r3, [pc, #388]	; (8003114 <UART_SetConfig+0x2d4>)
 8002f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	011c      	lsls	r4, r3, #4
 8002f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	1891      	adds	r1, r2, r2
 8002fae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fb0:	415b      	adcs	r3, r3
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fb8:	4641      	mov	r1, r8
 8002fba:	eb12 0a01 	adds.w	sl, r2, r1
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd8:	4692      	mov	sl, r2
 8002fda:	469b      	mov	fp, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	eb1a 0303 	adds.w	r3, sl, r3
 8002fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003004:	460b      	mov	r3, r1
 8003006:	18db      	adds	r3, r3, r3
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
 800300a:	4613      	mov	r3, r2
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800301a:	f7fd f931 	bl	8000280 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4611      	mov	r1, r2
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <UART_SetConfig+0x2d4>)
 8003026:	fba3 2301 	umull	r2, r3, r3, r1
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2264      	movs	r2, #100	; 0x64
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	1acb      	subs	r3, r1, r3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <UART_SetConfig+0x2d4>)
 800303c:	fba3 2302 	umull	r2, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003048:	441c      	add	r4, r3
 800304a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304e:	2200      	movs	r2, #0
 8003050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	1891      	adds	r1, r2, r2
 8003062:	63b9      	str	r1, [r7, #56]	; 0x38
 8003064:	415b      	adcs	r3, r3
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800306c:	4641      	mov	r1, r8
 800306e:	1851      	adds	r1, r2, r1
 8003070:	6339      	str	r1, [r7, #48]	; 0x30
 8003072:	4649      	mov	r1, r9
 8003074:	414b      	adcs	r3, r1
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003084:	4659      	mov	r1, fp
 8003086:	00cb      	lsls	r3, r1, #3
 8003088:	4651      	mov	r1, sl
 800308a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308e:	4651      	mov	r1, sl
 8003090:	00ca      	lsls	r2, r1, #3
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	4603      	mov	r3, r0
 8003098:	4642      	mov	r2, r8
 800309a:	189b      	adds	r3, r3, r2
 800309c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030a0:	464b      	mov	r3, r9
 80030a2:	460a      	mov	r2, r1
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030c0:	460b      	mov	r3, r1
 80030c2:	18db      	adds	r3, r3, r3
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c6:	4613      	mov	r3, r2
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030d6:	f7fd f8d3 	bl	8000280 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 1302 	umull	r1, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2164      	movs	r1, #100	; 0x64
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <UART_SetConfig+0x2d4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 0207 	and.w	r2, r3, #7
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4422      	add	r2, r4
 8003106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003108:	e106      	b.n	8003318 <UART_SetConfig+0x4d8>
 800310a:	bf00      	nop
 800310c:	40011000 	.word	0x40011000
 8003110:	40011400 	.word	0x40011400
 8003114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311c:	2200      	movs	r2, #0
 800311e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800312a:	4642      	mov	r2, r8
 800312c:	464b      	mov	r3, r9
 800312e:	1891      	adds	r1, r2, r2
 8003130:	6239      	str	r1, [r7, #32]
 8003132:	415b      	adcs	r3, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800313a:	4641      	mov	r1, r8
 800313c:	1854      	adds	r4, r2, r1
 800313e:	4649      	mov	r1, r9
 8003140:	eb43 0501 	adc.w	r5, r3, r1
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	00eb      	lsls	r3, r5, #3
 800314e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003152:	00e2      	lsls	r2, r4, #3
 8003154:	4614      	mov	r4, r2
 8003156:	461d      	mov	r5, r3
 8003158:	4643      	mov	r3, r8
 800315a:	18e3      	adds	r3, r4, r3
 800315c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003160:	464b      	mov	r3, r9
 8003162:	eb45 0303 	adc.w	r3, r5, r3
 8003166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003186:	4629      	mov	r1, r5
 8003188:	008b      	lsls	r3, r1, #2
 800318a:	4621      	mov	r1, r4
 800318c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003190:	4621      	mov	r1, r4
 8003192:	008a      	lsls	r2, r1, #2
 8003194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003198:	f7fd f872 	bl	8000280 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4b60      	ldr	r3, [pc, #384]	; (8003324 <UART_SetConfig+0x4e4>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	011c      	lsls	r4, r3, #4
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	1891      	adds	r1, r2, r2
 80031c2:	61b9      	str	r1, [r7, #24]
 80031c4:	415b      	adcs	r3, r3
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031cc:	4641      	mov	r1, r8
 80031ce:	1851      	adds	r1, r2, r1
 80031d0:	6139      	str	r1, [r7, #16]
 80031d2:	4649      	mov	r1, r9
 80031d4:	414b      	adcs	r3, r1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e4:	4659      	mov	r1, fp
 80031e6:	00cb      	lsls	r3, r1, #3
 80031e8:	4651      	mov	r1, sl
 80031ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ee:	4651      	mov	r1, sl
 80031f0:	00ca      	lsls	r2, r1, #3
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	4642      	mov	r2, r8
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003200:	464b      	mov	r3, r9
 8003202:	460a      	mov	r2, r1
 8003204:	eb42 0303 	adc.w	r3, r2, r3
 8003208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	67bb      	str	r3, [r7, #120]	; 0x78
 8003216:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003224:	4649      	mov	r1, r9
 8003226:	008b      	lsls	r3, r1, #2
 8003228:	4641      	mov	r1, r8
 800322a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322e:	4641      	mov	r1, r8
 8003230:	008a      	lsls	r2, r1, #2
 8003232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003236:	f7fd f823 	bl	8000280 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4611      	mov	r1, r2
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <UART_SetConfig+0x4e4>)
 8003242:	fba3 2301 	umull	r2, r3, r3, r1
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2264      	movs	r2, #100	; 0x64
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	1acb      	subs	r3, r1, r3
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	3332      	adds	r3, #50	; 0x32
 8003254:	4a33      	ldr	r2, [pc, #204]	; (8003324 <UART_SetConfig+0x4e4>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	441c      	add	r4, r3
 8003262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003266:	2200      	movs	r2, #0
 8003268:	673b      	str	r3, [r7, #112]	; 0x70
 800326a:	677a      	str	r2, [r7, #116]	; 0x74
 800326c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	1891      	adds	r1, r2, r2
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	415b      	adcs	r3, r3
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003280:	4641      	mov	r1, r8
 8003282:	1851      	adds	r1, r2, r1
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	4649      	mov	r1, r9
 8003288:	414b      	adcs	r3, r1
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003298:	4659      	mov	r1, fp
 800329a:	00cb      	lsls	r3, r1, #3
 800329c:	4651      	mov	r1, sl
 800329e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a2:	4651      	mov	r1, sl
 80032a4:	00ca      	lsls	r2, r1, #3
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	4642      	mov	r2, r8
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032b2:	464b      	mov	r3, r9
 80032b4:	460a      	mov	r2, r1
 80032b6:	eb42 0303 	adc.w	r3, r2, r3
 80032ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	663b      	str	r3, [r7, #96]	; 0x60
 80032c6:	667a      	str	r2, [r7, #100]	; 0x64
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032d4:	4649      	mov	r1, r9
 80032d6:	008b      	lsls	r3, r1, #2
 80032d8:	4641      	mov	r1, r8
 80032da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032de:	4641      	mov	r1, r8
 80032e0:	008a      	lsls	r2, r1, #2
 80032e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032e6:	f7fc ffcb 	bl	8000280 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <UART_SetConfig+0x4e4>)
 80032f0:	fba3 1302 	umull	r1, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	2164      	movs	r1, #100	; 0x64
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	3332      	adds	r3, #50	; 0x32
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <UART_SetConfig+0x4e4>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4422      	add	r2, r4
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800331e:	46bd      	mov	sp, r7
 8003320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f103 0208 	add.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f04f 32ff 	mov.w	r2, #4294967295
 8003340:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f103 0208 	add.w	r2, r3, #8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 0208 	add.w	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d103      	bne.n	80033ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e00c      	b.n	8003404 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3308      	adds	r3, #8
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <vListInsert+0x2e>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d2f6      	bcs.n	80033f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6892      	ldr	r2, [r2, #8]
 8003452:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6852      	ldr	r2, [r2, #4]
 800345c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	d103      	bne.n	8003470 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1e5a      	subs	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034ba:	f001 fbc3 	bl	8004c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	441a      	add	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	3b01      	subs	r3, #1
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	441a      	add	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	22ff      	movs	r2, #255	; 0xff
 8003506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d114      	bne.n	800353a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01a      	beq.n	800354e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3310      	adds	r3, #16
 800351c:	4618      	mov	r0, r3
 800351e:	f000 ff97 	bl	8004450 <xTaskRemoveFromEventList>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d012      	beq.n	800354e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <xQueueGenericReset+0xcc>)
 800352a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	e009      	b.n	800354e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3310      	adds	r3, #16
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fef2 	bl	8003328 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3324      	adds	r3, #36	; 0x24
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff feed 	bl	8003328 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800354e:	f001 fba9 	bl	8004ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003552:	2301      	movs	r3, #1
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	613b      	str	r3, [r7, #16]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3348      	adds	r3, #72	; 0x48
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fc35 	bl	8004e08 <pvPortMalloc>
 800359e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d011      	beq.n	80035ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3348      	adds	r3, #72	; 0x48
 80035ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035b8:	79fa      	ldrb	r2, [r7, #7]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	4613      	mov	r3, r2
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f805 	bl	80035d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ca:	69bb      	ldr	r3, [r7, #24]
	}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003602:	2101      	movs	r1, #1
 8003604:	69b8      	ldr	r0, [r7, #24]
 8003606:	f7ff ff43 	bl	8003490 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003622:	2300      	movs	r3, #0
 8003624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericSend+0x32>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <xQueueGenericSend+0x40>
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <xQueueGenericSend+0x44>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <xQueueGenericSend+0x46>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <xQueueGenericSend+0x60>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d103      	bne.n	8003682 <xQueueGenericSend+0x6e>
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <xQueueGenericSend+0x72>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <xQueueGenericSend+0x74>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	623b      	str	r3, [r7, #32]
}
 800369e:	bf00      	nop
 80036a0:	e7fe      	b.n	80036a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a2:	f001 f895 	bl	80047d0 <xTaskGetSchedulerState>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <xQueueGenericSend+0x9e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <xQueueGenericSend+0xa2>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueGenericSend+0xa4>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	61fb      	str	r3, [r7, #28]
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d2:	f001 fab7 	bl	8004c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <xQueueGenericSend+0xd4>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d129      	bne.n	800373c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ee:	f000 f96f 	bl	80039d0 <prvCopyDataToQueue>
 80036f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	3324      	adds	r3, #36	; 0x24
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fea5 	bl	8004450 <xTaskRemoveFromEventList>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800370c:	4b3f      	ldr	r3, [pc, #252]	; (800380c <xQueueGenericSend+0x1f8>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	e00a      	b.n	8003734 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003724:	4b39      	ldr	r3, [pc, #228]	; (800380c <xQueueGenericSend+0x1f8>)
 8003726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003734:	f001 fab6 	bl	8004ca4 <vPortExitCritical>
				return pdPASS;
 8003738:	2301      	movs	r3, #1
 800373a:	e063      	b.n	8003804 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003742:	f001 faaf 	bl	8004ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003746:	2300      	movs	r3, #0
 8003748:	e05c      	b.n	8003804 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d106      	bne.n	800375e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fedd 	bl	8004514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800375a:	2301      	movs	r3, #1
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800375e:	f001 faa1 	bl	8004ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003762:	f000 fc8d 	bl	8004080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003766:	f001 fa6d 	bl	8004c44 <vPortEnterCritical>
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003770:	b25b      	sxtb	r3, r3
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d103      	bne.n	8003780 <xQueueGenericSend+0x16c>
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003786:	b25b      	sxtb	r3, r3
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d103      	bne.n	8003796 <xQueueGenericSend+0x182>
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003796:	f001 fa85 	bl	8004ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800379a:	1d3a      	adds	r2, r7, #4
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fecc 	bl	8004540 <xTaskCheckForTimeOut>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d124      	bne.n	80037f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b0:	f000 fa06 	bl	8003bc0 <prvIsQueueFull>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	3310      	adds	r3, #16
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fe20 	bl	8004408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ca:	f000 f991 	bl	8003af0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037ce:	f000 fc65 	bl	800409c <xTaskResumeAll>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f af7c 	bne.w	80036d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <xQueueGenericSend+0x1f8>)
 80037dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	e772      	b.n	80036d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ee:	f000 f97f 	bl	8003af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037f2:	f000 fc53 	bl	800409c <xTaskResumeAll>
 80037f6:	e76c      	b.n	80036d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f000 f979 	bl	8003af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037fe:	f000 fc4d 	bl	800409c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003802:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003804:	4618      	mov	r0, r3
 8003806:	3738      	adds	r7, #56	; 0x38
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08c      	sub	sp, #48	; 0x30
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <xQueueReceive+0x30>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	623b      	str	r3, [r7, #32]
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <xQueueReceive+0x3e>
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <xQueueReceive+0x42>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueReceive+0x44>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xQueueReceive+0x5e>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61fb      	str	r3, [r7, #28]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800386e:	f000 ffaf 	bl	80047d0 <xTaskGetSchedulerState>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <xQueueReceive+0x6e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <xQueueReceive+0x72>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <xQueueReceive+0x74>
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueReceive+0x8e>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	61bb      	str	r3, [r7, #24]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800389e:	f001 f9d1 	bl	8004c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01f      	beq.n	80038ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b2:	f000 f8f7 	bl	8003aa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00f      	beq.n	80038e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	3310      	adds	r3, #16
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fdc0 	bl	8004450 <xTaskRemoveFromEventList>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038d6:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <xQueueReceive+0x1bc>)
 80038d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038e6:	f001 f9dd 	bl	8004ca4 <vPortExitCritical>
				return pdPASS;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e069      	b.n	80039c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038f4:	f001 f9d6 	bl	8004ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e062      	b.n	80039c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003902:	f107 0310 	add.w	r3, r7, #16
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe04 	bl	8004514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800390c:	2301      	movs	r3, #1
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003910:	f001 f9c8 	bl	8004ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003914:	f000 fbb4 	bl	8004080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003918:	f001 f994 	bl	8004c44 <vPortEnterCritical>
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003922:	b25b      	sxtb	r3, r3
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d103      	bne.n	8003932 <xQueueReceive+0x122>
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003938:	b25b      	sxtb	r3, r3
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d103      	bne.n	8003948 <xQueueReceive+0x138>
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003948:	f001 f9ac 	bl	8004ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800394c:	1d3a      	adds	r2, r7, #4
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fdf3 	bl	8004540 <xTaskCheckForTimeOut>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d123      	bne.n	80039a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003962:	f000 f917 	bl	8003b94 <prvIsQueueEmpty>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d017      	beq.n	800399c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd47 	bl	8004408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800397a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800397c:	f000 f8b8 	bl	8003af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003980:	f000 fb8c 	bl	800409c <xTaskResumeAll>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d189      	bne.n	800389e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <xQueueReceive+0x1bc>)
 800398c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	e780      	b.n	800389e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800399c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800399e:	f000 f8a7 	bl	8003af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039a2:	f000 fb7b 	bl	800409c <xTaskResumeAll>
 80039a6:	e77a      	b.n	800389e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039aa:	f000 f8a1 	bl	8003af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ae:	f000 fb75 	bl	800409c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039b4:	f000 f8ee 	bl	8003b94 <prvIsQueueEmpty>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f43f af6f 	beq.w	800389e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3730      	adds	r7, #48	; 0x30
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10d      	bne.n	8003a0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d14d      	bne.n	8003a92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 ff06 	bl	800480c <xTaskPriorityDisinherit>
 8003a00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	e043      	b.n	8003a92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d119      	bne.n	8003a44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6858      	ldr	r0, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	f001 fc88 	bl	8005330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d32b      	bcc.n	8003a92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	e026      	b.n	8003a92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68d8      	ldr	r0, [r3, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	f001 fc6e 	bl	8005330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	425b      	negs	r3, r3
 8003a5e:	441a      	add	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	425b      	negs	r3, r3
 8003a7a:	441a      	add	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d105      	bne.n	8003a92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a9a:	697b      	ldr	r3, [r7, #20]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d018      	beq.n	8003ae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	441a      	add	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d303      	bcc.n	8003ad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68d9      	ldr	r1, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6838      	ldr	r0, [r7, #0]
 8003ae4:	f001 fc24 	bl	8005330 <memcpy>
	}
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003af8:	f001 f8a4 	bl	8004c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b04:	e011      	b.n	8003b2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3324      	adds	r3, #36	; 0x24
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fc9c 	bl	8004450 <xTaskRemoveFromEventList>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b1e:	f000 fd71 	bl	8004604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	dce9      	bgt.n	8003b06 <prvUnlockQueue+0x16>
 8003b32:	e000      	b.n	8003b36 <prvUnlockQueue+0x46>
					break;
 8003b34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003b3e:	f001 f8b1 	bl	8004ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b42:	f001 f87f 	bl	8004c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b4e:	e011      	b.n	8003b74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fc77 	bl	8004450 <xTaskRemoveFromEventList>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b68:	f000 fd4c 	bl	8004604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	dce9      	bgt.n	8003b50 <prvUnlockQueue+0x60>
 8003b7c:	e000      	b.n	8003b80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	22ff      	movs	r2, #255	; 0xff
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b88:	f001 f88c 	bl	8004ca4 <vPortExitCritical>
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b9c:	f001 f852 	bl	8004c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e001      	b.n	8003bb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bb2:	f001 f877 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bc8:	f001 f83c 	bl	8004c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d102      	bne.n	8003bde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e001      	b.n	8003be2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003be2:	f001 f85f 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08e      	sub	sp, #56	; 0x38
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	623b      	str	r3, [r7, #32]
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	61fb      	str	r3, [r7, #28]
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c36:	23a0      	movs	r3, #160	; 0xa0
 8003c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2ba0      	cmp	r3, #160	; 0xa0
 8003c3e:	d00a      	beq.n	8003c56 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61bb      	str	r3, [r7, #24]
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01e      	beq.n	8003c9c <xTaskCreateStatic+0xac>
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c76:	2300      	movs	r3, #0
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	9302      	str	r3, [sp, #8]
 8003c7e:	f107 0314 	add.w	r3, r7, #20
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f850 	bl	8003d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c96:	f000 f8eb 	bl	8003e70 <prvAddNewTaskToReadyList>
 8003c9a:	e001      	b.n	8003ca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ca0:	697b      	ldr	r3, [r7, #20]
	}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3728      	adds	r7, #40	; 0x28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08c      	sub	sp, #48	; 0x30
 8003cae:	af04      	add	r7, sp, #16
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 f8a2 	bl	8004e08 <pvPortMalloc>
 8003cc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ccc:	20a0      	movs	r0, #160	; 0xa0
 8003cce:	f001 f89b 	bl	8004e08 <pvPortMalloc>
 8003cd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce0:	e005      	b.n	8003cee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f001 f95c 	bl	8004fa0 <vPortFree>
 8003ce8:	e001      	b.n	8003cee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9303      	str	r3, [sp, #12]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	9302      	str	r3, [sp, #8]
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f80e 	bl	8003d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d18:	69f8      	ldr	r0, [r7, #28]
 8003d1a:	f000 f8a9 	bl	8003e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e002      	b.n	8003d2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f023 0307 	bic.w	r3, r3, #7
 8003d5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	617b      	str	r3, [r7, #20]
}
 8003d78:	bf00      	nop
 8003d7a:	e7fe      	b.n	8003d7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e012      	b.n	8003dae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	7819      	ldrb	r1, [r3, #0]
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	3334      	adds	r3, #52	; 0x34
 8003d98:	460a      	mov	r2, r1
 8003d9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	4413      	add	r3, r2
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d006      	beq.n	8003db6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	d9e9      	bls.n	8003d88 <prvInitialiseNewTask+0x54>
 8003db4:	e000      	b.n	8003db8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003db6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc0:	e003      	b.n	8003dca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	2b06      	cmp	r3, #6
 8003dce:	d901      	bls.n	8003dd4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dd0:	2306      	movs	r3, #6
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	2200      	movs	r2, #0
 8003de4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fabc 	bl	8003368 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	3318      	adds	r3, #24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fab7 	bl	8003368 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	f1c3 0207 	rsb	r2, r3, #7
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	334c      	adds	r3, #76	; 0x4c
 8003e24:	224c      	movs	r2, #76	; 0x4c
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 f9f7 	bl	800521c <memset>
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <prvInitialiseNewTask+0x130>)
 8003e32:	651a      	str	r2, [r3, #80]	; 0x50
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <prvInitialiseNewTask+0x134>)
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <prvInitialiseNewTask+0x138>)
 8003e3e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	69b8      	ldr	r0, [r7, #24]
 8003e46:	f000 fdcd 	bl	80049e4 <pxPortInitialiseStack>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e5c:	bf00      	nop
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	2000411c 	.word	0x2000411c
 8003e68:	20004184 	.word	0x20004184
 8003e6c:	200041ec 	.word	0x200041ec

08003e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e78:	f000 fee4 	bl	8004c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <prvAddNewTaskToReadyList+0xb8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	4a29      	ldr	r2, [pc, #164]	; (8003f28 <prvAddNewTaskToReadyList+0xb8>)
 8003e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e86:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <prvAddNewTaskToReadyList+0xbc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e8e:	4a27      	ldr	r2, [pc, #156]	; (8003f2c <prvAddNewTaskToReadyList+0xbc>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e94:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <prvAddNewTaskToReadyList+0xb8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d110      	bne.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e9c:	f000 fbd6 	bl	800464c <prvInitialiseTaskLists>
 8003ea0:	e00d      	b.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ea2:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <prvAddNewTaskToReadyList+0xc0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <prvAddNewTaskToReadyList+0xbc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d802      	bhi.n	8003ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <prvAddNewTaskToReadyList+0xbc>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <prvAddNewTaskToReadyList+0xc4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <prvAddNewTaskToReadyList+0xc4>)
 8003ec6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	2201      	movs	r2, #1
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <prvAddNewTaskToReadyList+0xc8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <prvAddNewTaskToReadyList+0xc8>)
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <prvAddNewTaskToReadyList+0xcc>)
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f7ff fa46 	bl	8003382 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ef6:	f000 fed5 	bl	8004ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <prvAddNewTaskToReadyList+0xc0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00e      	beq.n	8003f20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <prvAddNewTaskToReadyList+0xbc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d207      	bcs.n	8003f20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <prvAddNewTaskToReadyList+0xd0>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	200004c8 	.word	0x200004c8
 8003f2c:	200003c8 	.word	0x200003c8
 8003f30:	200004d4 	.word	0x200004d4
 8003f34:	200004e4 	.word	0x200004e4
 8003f38:	200004d0 	.word	0x200004d0
 8003f3c:	200003cc 	.word	0x200003cc
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d017      	beq.n	8003f86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <vTaskDelay+0x60>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <vTaskDelay+0x30>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60bb      	str	r3, [r7, #8]
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f74:	f000 f884 	bl	8004080 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f78:	2100      	movs	r1, #0
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fccc 	bl	8004918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f80:	f000 f88c 	bl	800409c <xTaskResumeAll>
 8003f84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <vTaskDelay+0x64>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200004f0 	.word	0x200004f0
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fba:	463a      	mov	r2, r7
 8003fbc:	1d39      	adds	r1, r7, #4
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fada 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fc8:	6839      	ldr	r1, [r7, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	9202      	str	r2, [sp, #8]
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	460a      	mov	r2, r1
 8003fda:	4921      	ldr	r1, [pc, #132]	; (8004060 <vTaskStartScheduler+0xb4>)
 8003fdc:	4821      	ldr	r0, [pc, #132]	; (8004064 <vTaskStartScheduler+0xb8>)
 8003fde:	f7ff fe07 	bl	8003bf0 <xTaskCreateStatic>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a20      	ldr	r2, [pc, #128]	; (8004068 <vTaskStartScheduler+0xbc>)
 8003fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <vTaskStartScheduler+0xbc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e001      	b.n	8003ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d11b      	bne.n	8004038 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	613b      	str	r3, [r7, #16]
}
 8004012:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <vTaskStartScheduler+0xc0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	334c      	adds	r3, #76	; 0x4c
 800401a:	4a15      	ldr	r2, [pc, #84]	; (8004070 <vTaskStartScheduler+0xc4>)
 800401c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <vTaskStartScheduler+0xc8>)
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <vTaskStartScheduler+0xcc>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <vTaskStartScheduler+0xd0>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004032:	f000 fd65 	bl	8004b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004036:	e00e      	b.n	8004056 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d10a      	bne.n	8004056 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <vTaskStartScheduler+0xa8>
}
 8004056:	bf00      	nop
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	08005ddc 	.word	0x08005ddc
 8004064:	0800461d 	.word	0x0800461d
 8004068:	200004ec 	.word	0x200004ec
 800406c:	200003c8 	.word	0x200003c8
 8004070:	2000005c 	.word	0x2000005c
 8004074:	200004e8 	.word	0x200004e8
 8004078:	200004d4 	.word	0x200004d4
 800407c:	200004cc 	.word	0x200004cc

08004080 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <vTaskSuspendAll+0x18>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	4a03      	ldr	r2, [pc, #12]	; (8004098 <vTaskSuspendAll+0x18>)
 800408c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	200004f0 	.word	0x200004f0

0800409c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <xTaskResumeAll+0x114>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	603b      	str	r3, [r7, #0]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040c8:	f000 fdbc 	bl	8004c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040cc:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <xTaskResumeAll+0x114>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	4a37      	ldr	r2, [pc, #220]	; (80041b0 <xTaskResumeAll+0x114>)
 80040d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <xTaskResumeAll+0x114>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d161      	bne.n	80041a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040de:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <xTaskResumeAll+0x118>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d05d      	beq.n	80041a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040e6:	e02e      	b.n	8004146 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e8:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <xTaskResumeAll+0x11c>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3318      	adds	r3, #24
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff f9a1 	bl	800343c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff f99c 	bl	800343c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	2201      	movs	r2, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <xTaskResumeAll+0x120>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	4a2a      	ldr	r2, [pc, #168]	; (80041bc <xTaskResumeAll+0x120>)
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <xTaskResumeAll+0x124>)
 8004124:	441a      	add	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7ff f928 	bl	8003382 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <xTaskResumeAll+0x128>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <xTaskResumeAll+0x12c>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004146:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <xTaskResumeAll+0x11c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1cc      	bne.n	80040e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004154:	f000 fb1c 	bl	8004790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004158:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <xTaskResumeAll+0x130>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004164:	f000 f836 	bl	80041d4 <xTaskIncrementTick>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <xTaskResumeAll+0x12c>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f1      	bne.n	8004164 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <xTaskResumeAll+0x130>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <xTaskResumeAll+0x12c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800418e:	2301      	movs	r3, #1
 8004190:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004192:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <xTaskResumeAll+0x134>)
 8004194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041a2:	f000 fd7f 	bl	8004ca4 <vPortExitCritical>

	return xAlreadyYielded;
 80041a6:	68bb      	ldr	r3, [r7, #8]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	200004f0 	.word	0x200004f0
 80041b4:	200004c8 	.word	0x200004c8
 80041b8:	20000488 	.word	0x20000488
 80041bc:	200004d0 	.word	0x200004d0
 80041c0:	200003cc 	.word	0x200003cc
 80041c4:	200003c8 	.word	0x200003c8
 80041c8:	200004dc 	.word	0x200004dc
 80041cc:	200004d8 	.word	0x200004d8
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041de:	4b4e      	ldr	r3, [pc, #312]	; (8004318 <xTaskIncrementTick+0x144>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 808e 	bne.w	8004304 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041e8:	4b4c      	ldr	r3, [pc, #304]	; (800431c <xTaskIncrementTick+0x148>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041f0:	4a4a      	ldr	r2, [pc, #296]	; (800431c <xTaskIncrementTick+0x148>)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d120      	bne.n	800423e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041fc:	4b48      	ldr	r3, [pc, #288]	; (8004320 <xTaskIncrementTick+0x14c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <xTaskIncrementTick+0x48>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	603b      	str	r3, [r7, #0]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskIncrementTick+0x46>
 800421c:	4b40      	ldr	r3, [pc, #256]	; (8004320 <xTaskIncrementTick+0x14c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b40      	ldr	r3, [pc, #256]	; (8004324 <xTaskIncrementTick+0x150>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3e      	ldr	r2, [pc, #248]	; (8004320 <xTaskIncrementTick+0x14c>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4a3e      	ldr	r2, [pc, #248]	; (8004324 <xTaskIncrementTick+0x150>)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <xTaskIncrementTick+0x154>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <xTaskIncrementTick+0x154>)
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	f000 faa9 	bl	8004790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800423e:	4b3b      	ldr	r3, [pc, #236]	; (800432c <xTaskIncrementTick+0x158>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d348      	bcc.n	80042da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <xTaskIncrementTick+0x14c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <xTaskIncrementTick+0x158>)
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	601a      	str	r2, [r3, #0]
					break;
 800425a:	e03e      	b.n	80042da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	4b30      	ldr	r3, [pc, #192]	; (8004320 <xTaskIncrementTick+0x14c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d203      	bcs.n	800427c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004274:	4a2d      	ldr	r2, [pc, #180]	; (800432c <xTaskIncrementTick+0x158>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800427a:	e02e      	b.n	80042da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff f8db 	bl	800343c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3318      	adds	r3, #24
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f8d2 	bl	800343c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2201      	movs	r2, #1
 800429e:	409a      	lsls	r2, r3
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <xTaskIncrementTick+0x15c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	4a22      	ldr	r2, [pc, #136]	; (8004330 <xTaskIncrementTick+0x15c>)
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <xTaskIncrementTick+0x160>)
 80042b8:	441a      	add	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7ff f85e 	bl	8003382 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ca:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <xTaskIncrementTick+0x164>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d3b9      	bcc.n	8004248 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042d4:	2301      	movs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042d8:	e7b6      	b.n	8004248 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <xTaskIncrementTick+0x164>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4914      	ldr	r1, [pc, #80]	; (8004334 <xTaskIncrementTick+0x160>)
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d901      	bls.n	80042f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <xTaskIncrementTick+0x168>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e004      	b.n	800430e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004304:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <xTaskIncrementTick+0x16c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <xTaskIncrementTick+0x16c>)
 800430c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800430e:	697b      	ldr	r3, [r7, #20]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200004f0 	.word	0x200004f0
 800431c:	200004cc 	.word	0x200004cc
 8004320:	20000480 	.word	0x20000480
 8004324:	20000484 	.word	0x20000484
 8004328:	200004e0 	.word	0x200004e0
 800432c:	200004e8 	.word	0x200004e8
 8004330:	200004d0 	.word	0x200004d0
 8004334:	200003cc 	.word	0x200003cc
 8004338:	200003c8 	.word	0x200003c8
 800433c:	200004dc 	.word	0x200004dc
 8004340:	200004d8 	.word	0x200004d8

08004344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800434a:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <vTaskSwitchContext+0xac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004352:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <vTaskSwitchContext+0xb0>)
 8004354:	2201      	movs	r2, #1
 8004356:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004358:	e044      	b.n	80043e4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <vTaskSwitchContext+0xb0>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <vTaskSwitchContext+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800436e:	7afb      	ldrb	r3, [r7, #11]
 8004370:	f1c3 031f 	rsb	r3, r3, #31
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	4921      	ldr	r1, [pc, #132]	; (80043fc <vTaskSwitchContext+0xb8>)
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	607b      	str	r3, [r7, #4]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <vTaskSwitchContext+0x5a>
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <vTaskSwitchContext+0xb8>)
 80043ac:	4413      	add	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	3308      	adds	r3, #8
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d104      	bne.n	80043d0 <vTaskSwitchContext+0x8c>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <vTaskSwitchContext+0xbc>)
 80043d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <vTaskSwitchContext+0xbc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	334c      	adds	r3, #76	; 0x4c
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <vTaskSwitchContext+0xc0>)
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	200004f0 	.word	0x200004f0
 80043f4:	200004dc 	.word	0x200004dc
 80043f8:	200004d0 	.word	0x200004d0
 80043fc:	200003cc 	.word	0x200003cc
 8004400:	200003c8 	.word	0x200003c8
 8004404:	2000005c 	.word	0x2000005c

08004408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60fb      	str	r3, [r7, #12]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <vTaskPlaceOnEventList+0x44>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3318      	adds	r3, #24
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fe ffc7 	bl	80033ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800443c:	2101      	movs	r1, #1
 800443e:	6838      	ldr	r0, [r7, #0]
 8004440:	f000 fa6a 	bl	8004918 <prvAddCurrentTaskToDelayedList>
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200003c8 	.word	0x200003c8

08004450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	60fb      	str	r3, [r7, #12]
}
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	3318      	adds	r3, #24
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe ffdb 	bl	800343c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <xTaskRemoveFromEventList+0xac>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11c      	bne.n	80044c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3304      	adds	r3, #4
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe ffd2 	bl	800343c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	2201      	movs	r2, #1
 800449e:	409a      	lsls	r2, r3
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <xTaskRemoveFromEventList+0xb0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	4a16      	ldr	r2, [pc, #88]	; (8004500 <xTaskRemoveFromEventList+0xb0>)
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4a13      	ldr	r2, [pc, #76]	; (8004504 <xTaskRemoveFromEventList+0xb4>)
 80044b8:	441a      	add	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3304      	adds	r3, #4
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7fe ff5e 	bl	8003382 <vListInsertEnd>
 80044c6:	e005      	b.n	80044d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3318      	adds	r3, #24
 80044cc:	4619      	mov	r1, r3
 80044ce:	480e      	ldr	r0, [pc, #56]	; (8004508 <xTaskRemoveFromEventList+0xb8>)
 80044d0:	f7fe ff57 	bl	8003382 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <xTaskRemoveFromEventList+0xbc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	429a      	cmp	r2, r3
 80044e0:	d905      	bls.n	80044ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <xTaskRemoveFromEventList+0xc0>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e001      	b.n	80044f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	200004f0 	.word	0x200004f0
 8004500:	200004d0 	.word	0x200004d0
 8004504:	200003cc 	.word	0x200003cc
 8004508:	20000488 	.word	0x20000488
 800450c:	200003c8 	.word	0x200003c8
 8004510:	200004dc 	.word	0x200004dc

08004514 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <vTaskInternalSetTimeOutState+0x24>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <vTaskInternalSetTimeOutState+0x28>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	605a      	str	r2, [r3, #4]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	200004e0 	.word	0x200004e0
 800453c:	200004cc 	.word	0x200004cc

08004540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	613b      	str	r3, [r7, #16]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	60fb      	str	r3, [r7, #12]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004582:	f000 fb5f 	bl	8004c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <xTaskCheckForTimeOut+0xbc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d102      	bne.n	80045a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e023      	b.n	80045ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <xTaskCheckForTimeOut+0xc0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d007      	beq.n	80045c2 <xTaskCheckForTimeOut+0x82>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e015      	b.n	80045ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d20b      	bcs.n	80045e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad2      	subs	r2, r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff9b 	bl	8004514 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	e004      	b.n	80045ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045ee:	f000 fb59 	bl	8004ca4 <vPortExitCritical>

	return xReturn;
 80045f2:	69fb      	ldr	r3, [r7, #28]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200004cc 	.word	0x200004cc
 8004600:	200004e0 	.word	0x200004e0

08004604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <vTaskMissedYield+0x14>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	200004dc 	.word	0x200004dc

0800461c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004624:	f000 f852 	bl	80046cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <prvIdleTask+0x28>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d9f9      	bls.n	8004624 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <prvIdleTask+0x2c>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004640:	e7f0      	b.n	8004624 <prvIdleTask+0x8>
 8004642:	bf00      	nop
 8004644:	200003cc 	.word	0x200003cc
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004652:	2300      	movs	r3, #0
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	e00c      	b.n	8004672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <prvInitialiseTaskLists+0x60>)
 8004664:	4413      	add	r3, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fe5e 	bl	8003328 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3301      	adds	r3, #1
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d9ef      	bls.n	8004658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004678:	480d      	ldr	r0, [pc, #52]	; (80046b0 <prvInitialiseTaskLists+0x64>)
 800467a:	f7fe fe55 	bl	8003328 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800467e:	480d      	ldr	r0, [pc, #52]	; (80046b4 <prvInitialiseTaskLists+0x68>)
 8004680:	f7fe fe52 	bl	8003328 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004684:	480c      	ldr	r0, [pc, #48]	; (80046b8 <prvInitialiseTaskLists+0x6c>)
 8004686:	f7fe fe4f 	bl	8003328 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800468a:	480c      	ldr	r0, [pc, #48]	; (80046bc <prvInitialiseTaskLists+0x70>)
 800468c:	f7fe fe4c 	bl	8003328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004690:	480b      	ldr	r0, [pc, #44]	; (80046c0 <prvInitialiseTaskLists+0x74>)
 8004692:	f7fe fe49 	bl	8003328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <prvInitialiseTaskLists+0x78>)
 8004698:	4a05      	ldr	r2, [pc, #20]	; (80046b0 <prvInitialiseTaskLists+0x64>)
 800469a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvInitialiseTaskLists+0x7c>)
 800469e:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <prvInitialiseTaskLists+0x68>)
 80046a0:	601a      	str	r2, [r3, #0]
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200003cc 	.word	0x200003cc
 80046b0:	20000458 	.word	0x20000458
 80046b4:	2000046c 	.word	0x2000046c
 80046b8:	20000488 	.word	0x20000488
 80046bc:	2000049c 	.word	0x2000049c
 80046c0:	200004b4 	.word	0x200004b4
 80046c4:	20000480 	.word	0x20000480
 80046c8:	20000484 	.word	0x20000484

080046cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046d2:	e019      	b.n	8004708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046d4:	f000 fab6 	bl	8004c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d8:	4b10      	ldr	r3, [pc, #64]	; (800471c <prvCheckTasksWaitingTermination+0x50>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fea9 	bl	800343c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <prvCheckTasksWaitingTermination+0x54>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <prvCheckTasksWaitingTermination+0x54>)
 80046f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <prvCheckTasksWaitingTermination+0x58>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <prvCheckTasksWaitingTermination+0x58>)
 80046fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046fe:	f000 fad1 	bl	8004ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f810 	bl	8004728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <prvCheckTasksWaitingTermination+0x58>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e1      	bne.n	80046d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	2000049c 	.word	0x2000049c
 8004720:	200004c8 	.word	0x200004c8
 8004724:	200004b0 	.word	0x200004b0

08004728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	334c      	adds	r3, #76	; 0x4c
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fd79 	bl	800522c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004740:	2b00      	cmp	r3, #0
 8004742:	d108      	bne.n	8004756 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fc29 	bl	8004fa0 <vPortFree>
				vPortFree( pxTCB );
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fc26 	bl	8004fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004754:	e018      	b.n	8004788 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800475c:	2b01      	cmp	r3, #1
 800475e:	d103      	bne.n	8004768 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fc1d 	bl	8004fa0 <vPortFree>
	}
 8004766:	e00f      	b.n	8004788 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800476e:	2b02      	cmp	r3, #2
 8004770:	d00a      	beq.n	8004788 <prvDeleteTCB+0x60>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60fb      	str	r3, [r7, #12]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <prvDeleteTCB+0x5e>
	}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <prvResetNextTaskUnblockTime+0x38>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <prvResetNextTaskUnblockTime+0x3c>)
 80047a2:	f04f 32ff 	mov.w	r2, #4294967295
 80047a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047a8:	e008      	b.n	80047bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <prvResetNextTaskUnblockTime+0x38>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <prvResetNextTaskUnblockTime+0x3c>)
 80047ba:	6013      	str	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	20000480 	.word	0x20000480
 80047cc:	200004e8 	.word	0x200004e8

080047d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <xTaskGetSchedulerState+0x34>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047de:	2301      	movs	r3, #1
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	e008      	b.n	80047f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <xTaskGetSchedulerState+0x38>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047ec:	2302      	movs	r3, #2
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	e001      	b.n	80047f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047f6:	687b      	ldr	r3, [r7, #4]
	}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	200004d4 	.word	0x200004d4
 8004808:	200004f0 	.word	0x200004f0

0800480c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d06e      	beq.n	8004900 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004822:	4b3a      	ldr	r3, [pc, #232]	; (800490c <xTaskPriorityDisinherit+0x100>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	429a      	cmp	r2, r3
 800482a:	d00a      	beq.n	8004842 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60bb      	str	r3, [r7, #8]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	429a      	cmp	r2, r3
 8004874:	d044      	beq.n	8004900 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487a:	2b00      	cmp	r3, #0
 800487c:	d140      	bne.n	8004900 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3304      	adds	r3, #4
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fdda 	bl	800343c <uxListRemove>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d115      	bne.n	80048ba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004892:	491f      	ldr	r1, [pc, #124]	; (8004910 <xTaskPriorityDisinherit+0x104>)
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xTaskPriorityDisinherit+0xae>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2201      	movs	r2, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43da      	mvns	r2, r3
 80048b0:	4b18      	ldr	r3, [pc, #96]	; (8004914 <xTaskPriorityDisinherit+0x108>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4013      	ands	r3, r2
 80048b6:	4a17      	ldr	r2, [pc, #92]	; (8004914 <xTaskPriorityDisinherit+0x108>)
 80048b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	f1c3 0207 	rsb	r2, r3, #7
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	2201      	movs	r2, #1
 80048d4:	409a      	lsls	r2, r3
 80048d6:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <xTaskPriorityDisinherit+0x108>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <xTaskPriorityDisinherit+0x108>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a08      	ldr	r2, [pc, #32]	; (8004910 <xTaskPriorityDisinherit+0x104>)
 80048ee:	441a      	add	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fe fd43 	bl	8003382 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004900:	697b      	ldr	r3, [r7, #20]
	}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200003c8 	.word	0x200003c8
 8004910:	200003cc 	.word	0x200003cc
 8004914:	200004d0 	.word	0x200004d0

08004918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3304      	adds	r3, #4
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fd84 	bl	800343c <uxListRemove>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	2201      	movs	r2, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43da      	mvns	r2, r3
 8004948:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4013      	ands	r3, r2
 800494e:	4a20      	ldr	r2, [pc, #128]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004950:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d10a      	bne.n	8004970 <prvAddCurrentTaskToDelayedList+0x58>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	481a      	ldr	r0, [pc, #104]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800496a:	f7fe fd0a 	bl	8003382 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800496e:	e026      	b.n	80049be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	429a      	cmp	r2, r3
 8004986:	d209      	bcs.n	800499c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe fd18 	bl	80033ca <vListInsert>
}
 800499a:	e010      	b.n	80049be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f7fe fd0e 	bl	80033ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d202      	bcs.n	80049be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200004cc 	.word	0x200004cc
 80049cc:	200003c8 	.word	0x200003c8
 80049d0:	200004d0 	.word	0x200004d0
 80049d4:	200004b4 	.word	0x200004b4
 80049d8:	20000484 	.word	0x20000484
 80049dc:	20000480 	.word	0x20000480
 80049e0:	200004e8 	.word	0x200004e8

080049e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b04      	subs	r3, #4
 80049f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3b04      	subs	r3, #4
 8004a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3b04      	subs	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a14:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <pxPortInitialiseStack+0x64>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b14      	subs	r3, #20
 8004a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b04      	subs	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f06f 0202 	mvn.w	r2, #2
 8004a32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3b20      	subs	r3, #32
 8004a38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	08004a4d 	.word	0x08004a4d

08004a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <prvTaskExitError+0x54>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d00a      	beq.n	8004a76 <prvTaskExitError+0x2a>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <prvTaskExitError+0x28>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	60bb      	str	r3, [r7, #8]
}
 8004a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a8a:	bf00      	nop
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0fc      	beq.n	8004a8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	2000000c 	.word	0x2000000c
	...

08004ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <pxCurrentTCBConst2>)
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	6808      	ldr	r0, [r1, #0]
 8004ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	f380 8809 	msr	PSP, r0
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f380 8811 	msr	BASEPRI, r0
 8004aca:	4770      	bx	lr
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst2>:
 8004ad0:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ad8:	4808      	ldr	r0, [pc, #32]	; (8004afc <prvPortStartFirstTask+0x24>)
 8004ada:	6800      	ldr	r0, [r0, #0]
 8004adc:	6800      	ldr	r0, [r0, #0]
 8004ade:	f380 8808 	msr	MSP, r0
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8814 	msr	CONTROL, r0
 8004aea:	b662      	cpsie	i
 8004aec:	b661      	cpsie	f
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	df00      	svc	0
 8004af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004afa:	bf00      	nop
 8004afc:	e000ed08 	.word	0xe000ed08

08004b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b06:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <xPortStartScheduler+0x120>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a46      	ldr	r2, [pc, #280]	; (8004c24 <xPortStartScheduler+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10a      	bne.n	8004b26 <xPortStartScheduler+0x26>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <xPortStartScheduler+0x120>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	; (8004c28 <xPortStartScheduler+0x128>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10a      	bne.n	8004b46 <xPortStartScheduler+0x46>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <xPortStartScheduler+0x12c>)
 8004b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	22ff      	movs	r2, #255	; 0xff
 8004b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <xPortStartScheduler+0x130>)
 8004b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b6e:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b74:	e009      	b.n	8004b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b76:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	4a2d      	ldr	r2, [pc, #180]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d0ef      	beq.n	8004b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b96:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <xPortStartScheduler+0x134>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1c3 0307 	rsb	r3, r3, #7
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d00a      	beq.n	8004bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60bb      	str	r3, [r7, #8]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <xPortStartScheduler+0x134>)
 8004bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <xPortStartScheduler+0x138>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <xPortStartScheduler+0x138>)
 8004bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <xPortStartScheduler+0x138>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <xPortStartScheduler+0x138>)
 8004be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bee:	f000 f8dd 	bl	8004dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <xPortStartScheduler+0x13c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bf8:	f000 f8fc 	bl	8004df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bfc:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <xPortStartScheduler+0x140>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <xPortStartScheduler+0x140>)
 8004c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c08:	f7ff ff66 	bl	8004ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c0c:	f7ff fb9a 	bl	8004344 <vTaskSwitchContext>
	prvTaskExitError();
 8004c10:	f7ff ff1c 	bl	8004a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	e000ed00 	.word	0xe000ed00
 8004c24:	410fc271 	.word	0x410fc271
 8004c28:	410fc270 	.word	0x410fc270
 8004c2c:	e000e400 	.word	0xe000e400
 8004c30:	200004f4 	.word	0x200004f4
 8004c34:	200004f8 	.word	0x200004f8
 8004c38:	e000ed20 	.word	0xe000ed20
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	e000ef34 	.word	0xe000ef34

08004c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	607b      	str	r3, [r7, #4]
}
 8004c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <vPortEnterCritical+0x58>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10f      	bne.n	8004c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <vPortEnterCritical+0x5c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	603b      	str	r3, [r7, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vPortEnterCritical+0x4a>
	}
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	2000000c 	.word	0x2000000c
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <vPortExitCritical+0x24>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	607b      	str	r3, [r7, #4]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <vPortExitCritical+0x50>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <vPortExitCritical+0x42>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c
	...

08004d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d00:	f3ef 8009 	mrs	r0, PSP
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <pxCurrentTCBConst>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f01e 0f10 	tst.w	lr, #16
 8004d10:	bf08      	it	eq
 8004d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1a:	6010      	str	r0, [r2, #0]
 8004d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d24:	f380 8811 	msr	BASEPRI, r0
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f7ff fb08 	bl	8004344 <vTaskSwitchContext>
 8004d34:	f04f 0000 	mov.w	r0, #0
 8004d38:	f380 8811 	msr	BASEPRI, r0
 8004d3c:	bc09      	pop	{r0, r3}
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	6808      	ldr	r0, [r1, #0]
 8004d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d46:	f01e 0f10 	tst.w	lr, #16
 8004d4a:	bf08      	it	eq
 8004d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d50:	f380 8809 	msr	PSP, r0
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst>:
 8004d60:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d82:	f7ff fa27 	bl	80041d4 <xTaskIncrementTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <SysTick_Handler+0x40>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
}
 8004d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <vPortSetupTimerInterrupt+0x38>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <vPortSetupTimerInterrupt+0x3c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <vPortSetupTimerInterrupt+0x40>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <vPortSetupTimerInterrupt+0x44>)
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <vPortSetupTimerInterrupt+0x34>)
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	e000e010 	.word	0xe000e010
 8004de4:	e000e018 	.word	0xe000e018
 8004de8:	20000000 	.word	0x20000000
 8004dec:	10624dd3 	.word	0x10624dd3
 8004df0:	e000e014 	.word	0xe000e014

08004df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e04 <vPortEnableVFP+0x10>
 8004df8:	6801      	ldr	r1, [r0, #0]
 8004dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dfe:	6001      	str	r1, [r0, #0]
 8004e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e02:	bf00      	nop
 8004e04:	e000ed88 	.word	0xe000ed88

08004e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e14:	f7ff f934 	bl	8004080 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e18:	4b5b      	ldr	r3, [pc, #364]	; (8004f88 <pvPortMalloc+0x180>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e20:	f000 f920 	bl	8005064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e24:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <pvPortMalloc+0x184>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 8093 	bne.w	8004f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01d      	beq.n	8004e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e38:	2208      	movs	r2, #8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d014      	beq.n	8004e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f023 0307 	bic.w	r3, r3, #7
 8004e50:	3308      	adds	r3, #8
 8004e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <pvPortMalloc+0x6c>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	617b      	str	r3, [r7, #20]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d06e      	beq.n	8004f58 <pvPortMalloc+0x150>
 8004e7a:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <pvPortMalloc+0x188>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d869      	bhi.n	8004f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e84:	4b43      	ldr	r3, [pc, #268]	; (8004f94 <pvPortMalloc+0x18c>)
 8004e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e88:	4b42      	ldr	r3, [pc, #264]	; (8004f94 <pvPortMalloc+0x18c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e8e:	e004      	b.n	8004e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d903      	bls.n	8004eac <pvPortMalloc+0xa4>
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f1      	bne.n	8004e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004eac:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <pvPortMalloc+0x180>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d050      	beq.n	8004f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2208      	movs	r2, #8
 8004ebc:	4413      	add	r3, r2
 8004ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d91f      	bls.n	8004f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <pvPortMalloc+0xf8>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	613b      	str	r3, [r7, #16]
}
 8004efc:	bf00      	nop
 8004efe:	e7fe      	b.n	8004efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f12:	69b8      	ldr	r0, [r7, #24]
 8004f14:	f000 f908 	bl	8005128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f18:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <pvPortMalloc+0x188>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <pvPortMalloc+0x188>)
 8004f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f26:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <pvPortMalloc+0x188>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <pvPortMalloc+0x190>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d203      	bcs.n	8004f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f32:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <pvPortMalloc+0x188>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <pvPortMalloc+0x190>)
 8004f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <pvPortMalloc+0x184>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <pvPortMalloc+0x194>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a11      	ldr	r2, [pc, #68]	; (8004f9c <pvPortMalloc+0x194>)
 8004f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f58:	f7ff f8a0 	bl	800409c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <pvPortMalloc+0x174>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60fb      	str	r3, [r7, #12]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <pvPortMalloc+0x172>
	return pvReturn;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3728      	adds	r7, #40	; 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20004104 	.word	0x20004104
 8004f8c:	20004118 	.word	0x20004118
 8004f90:	20004108 	.word	0x20004108
 8004f94:	200040fc 	.word	0x200040fc
 8004f98:	2000410c 	.word	0x2000410c
 8004f9c:	20004110 	.word	0x20004110

08004fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04d      	beq.n	800504e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	425b      	negs	r3, r3
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4413      	add	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	4b24      	ldr	r3, [pc, #144]	; (8005058 <vPortFree+0xb8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <vPortFree+0x44>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60fb      	str	r3, [r7, #12]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <vPortFree+0x62>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	60bb      	str	r3, [r7, #8]
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <vPortFree+0xb8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01e      	beq.n	800504e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11a      	bne.n	800504e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <vPortFree+0xb8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005028:	f7ff f82a 	bl	8004080 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <vPortFree+0xbc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4413      	add	r3, r2
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <vPortFree+0xbc>)
 8005038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800503a:	6938      	ldr	r0, [r7, #16]
 800503c:	f000 f874 	bl	8005128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <vPortFree+0xc0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a06      	ldr	r2, [pc, #24]	; (8005060 <vPortFree+0xc0>)
 8005048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800504a:	f7ff f827 	bl	800409c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20004118 	.word	0x20004118
 800505c:	20004108 	.word	0x20004108
 8005060:	20004114 	.word	0x20004114

08005064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800506a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800506e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005070:	4b27      	ldr	r3, [pc, #156]	; (8005110 <prvHeapInit+0xac>)
 8005072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3307      	adds	r3, #7
 8005082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <prvHeapInit+0xac>)
 8005094:	4413      	add	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <prvHeapInit+0xb0>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <prvHeapInit+0xb0>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4413      	add	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050b0:	2208      	movs	r2, #8
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0307 	bic.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <prvHeapInit+0xb4>)
 80050c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <prvHeapInit+0xb4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <prvHeapInit+0xb4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	1ad2      	subs	r2, r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <prvHeapInit+0xb4>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4a0a      	ldr	r2, [pc, #40]	; (800511c <prvHeapInit+0xb8>)
 80050f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4a09      	ldr	r2, [pc, #36]	; (8005120 <prvHeapInit+0xbc>)
 80050fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <prvHeapInit+0xc0>)
 80050fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	200004fc 	.word	0x200004fc
 8005114:	200040fc 	.word	0x200040fc
 8005118:	20004104 	.word	0x20004104
 800511c:	2000410c 	.word	0x2000410c
 8005120:	20004108 	.word	0x20004108
 8005124:	20004118 	.word	0x20004118

08005128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005130:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <prvInsertBlockIntoFreeList+0xac>)
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e002      	b.n	800513c <prvInsertBlockIntoFreeList+0x14>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	429a      	cmp	r2, r3
 8005144:	d8f7      	bhi.n	8005136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4413      	add	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	d108      	bne.n	800516a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	441a      	add	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d118      	bne.n	80051b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d00d      	beq.n	80051a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e008      	b.n	80051b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <prvInsertBlockIntoFreeList+0xb0>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e003      	b.n	80051b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d002      	beq.n	80051c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	200040fc 	.word	0x200040fc
 80051d8:	20004104 	.word	0x20004104

080051dc <siprintf>:
 80051dc:	b40e      	push	{r1, r2, r3}
 80051de:	b500      	push	{lr}
 80051e0:	b09c      	sub	sp, #112	; 0x70
 80051e2:	ab1d      	add	r3, sp, #116	; 0x74
 80051e4:	9002      	str	r0, [sp, #8]
 80051e6:	9006      	str	r0, [sp, #24]
 80051e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051ec:	4809      	ldr	r0, [pc, #36]	; (8005214 <siprintf+0x38>)
 80051ee:	9107      	str	r1, [sp, #28]
 80051f0:	9104      	str	r1, [sp, #16]
 80051f2:	4909      	ldr	r1, [pc, #36]	; (8005218 <siprintf+0x3c>)
 80051f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f8:	9105      	str	r1, [sp, #20]
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	a902      	add	r1, sp, #8
 8005200:	f000 f9f6 	bl	80055f0 <_svfiprintf_r>
 8005204:	9b02      	ldr	r3, [sp, #8]
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	b01c      	add	sp, #112	; 0x70
 800520c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005210:	b003      	add	sp, #12
 8005212:	4770      	bx	lr
 8005214:	2000005c 	.word	0x2000005c
 8005218:	ffff0208 	.word	0xffff0208

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <_reclaim_reent>:
 800522c:	4b29      	ldr	r3, [pc, #164]	; (80052d4 <_reclaim_reent+0xa8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4283      	cmp	r3, r0
 8005232:	b570      	push	{r4, r5, r6, lr}
 8005234:	4604      	mov	r4, r0
 8005236:	d04b      	beq.n	80052d0 <_reclaim_reent+0xa4>
 8005238:	69c3      	ldr	r3, [r0, #28]
 800523a:	b143      	cbz	r3, 800524e <_reclaim_reent+0x22>
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d144      	bne.n	80052cc <_reclaim_reent+0xa0>
 8005242:	69e3      	ldr	r3, [r4, #28]
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	b111      	cbz	r1, 800524e <_reclaim_reent+0x22>
 8005248:	4620      	mov	r0, r4
 800524a:	f000 f87f 	bl	800534c <_free_r>
 800524e:	6961      	ldr	r1, [r4, #20]
 8005250:	b111      	cbz	r1, 8005258 <_reclaim_reent+0x2c>
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f87a 	bl	800534c <_free_r>
 8005258:	69e1      	ldr	r1, [r4, #28]
 800525a:	b111      	cbz	r1, 8005262 <_reclaim_reent+0x36>
 800525c:	4620      	mov	r0, r4
 800525e:	f000 f875 	bl	800534c <_free_r>
 8005262:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005264:	b111      	cbz	r1, 800526c <_reclaim_reent+0x40>
 8005266:	4620      	mov	r0, r4
 8005268:	f000 f870 	bl	800534c <_free_r>
 800526c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800526e:	b111      	cbz	r1, 8005276 <_reclaim_reent+0x4a>
 8005270:	4620      	mov	r0, r4
 8005272:	f000 f86b 	bl	800534c <_free_r>
 8005276:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005278:	b111      	cbz	r1, 8005280 <_reclaim_reent+0x54>
 800527a:	4620      	mov	r0, r4
 800527c:	f000 f866 	bl	800534c <_free_r>
 8005280:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005282:	b111      	cbz	r1, 800528a <_reclaim_reent+0x5e>
 8005284:	4620      	mov	r0, r4
 8005286:	f000 f861 	bl	800534c <_free_r>
 800528a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800528c:	b111      	cbz	r1, 8005294 <_reclaim_reent+0x68>
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f85c 	bl	800534c <_free_r>
 8005294:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005296:	b111      	cbz	r1, 800529e <_reclaim_reent+0x72>
 8005298:	4620      	mov	r0, r4
 800529a:	f000 f857 	bl	800534c <_free_r>
 800529e:	6a23      	ldr	r3, [r4, #32]
 80052a0:	b1b3      	cbz	r3, 80052d0 <_reclaim_reent+0xa4>
 80052a2:	4620      	mov	r0, r4
 80052a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052a8:	4718      	bx	r3
 80052aa:	5949      	ldr	r1, [r1, r5]
 80052ac:	b941      	cbnz	r1, 80052c0 <_reclaim_reent+0x94>
 80052ae:	3504      	adds	r5, #4
 80052b0:	69e3      	ldr	r3, [r4, #28]
 80052b2:	2d80      	cmp	r5, #128	; 0x80
 80052b4:	68d9      	ldr	r1, [r3, #12]
 80052b6:	d1f8      	bne.n	80052aa <_reclaim_reent+0x7e>
 80052b8:	4620      	mov	r0, r4
 80052ba:	f000 f847 	bl	800534c <_free_r>
 80052be:	e7c0      	b.n	8005242 <_reclaim_reent+0x16>
 80052c0:	680e      	ldr	r6, [r1, #0]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 f842 	bl	800534c <_free_r>
 80052c8:	4631      	mov	r1, r6
 80052ca:	e7ef      	b.n	80052ac <_reclaim_reent+0x80>
 80052cc:	2500      	movs	r5, #0
 80052ce:	e7ef      	b.n	80052b0 <_reclaim_reent+0x84>
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	bf00      	nop
 80052d4:	2000005c 	.word	0x2000005c

080052d8 <__errno>:
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <__errno+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	2000005c 	.word	0x2000005c

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4d0d      	ldr	r5, [pc, #52]	; (800531c <__libc_init_array+0x38>)
 80052e8:	4c0d      	ldr	r4, [pc, #52]	; (8005320 <__libc_init_array+0x3c>)
 80052ea:	1b64      	subs	r4, r4, r5
 80052ec:	10a4      	asrs	r4, r4, #2
 80052ee:	2600      	movs	r6, #0
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	4d0b      	ldr	r5, [pc, #44]	; (8005324 <__libc_init_array+0x40>)
 80052f6:	4c0c      	ldr	r4, [pc, #48]	; (8005328 <__libc_init_array+0x44>)
 80052f8:	f000 fc6a 	bl	8005bd0 <_init>
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	2600      	movs	r6, #0
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	f855 3b04 	ldr.w	r3, [r5], #4
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	f855 3b04 	ldr.w	r3, [r5], #4
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	08005e38 	.word	0x08005e38
 8005320:	08005e38 	.word	0x08005e38
 8005324:	08005e38 	.word	0x08005e38
 8005328:	08005e3c 	.word	0x08005e3c

0800532c <__retarget_lock_acquire_recursive>:
 800532c:	4770      	bx	lr

0800532e <__retarget_lock_release_recursive>:
 800532e:	4770      	bx	lr

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <_free_r>:
 800534c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800534e:	2900      	cmp	r1, #0
 8005350:	d044      	beq.n	80053dc <_free_r+0x90>
 8005352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005356:	9001      	str	r0, [sp, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f1a1 0404 	sub.w	r4, r1, #4
 800535e:	bfb8      	it	lt
 8005360:	18e4      	addlt	r4, r4, r3
 8005362:	f000 f8df 	bl	8005524 <__malloc_lock>
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <_free_r+0x94>)
 8005368:	9801      	ldr	r0, [sp, #4]
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	b933      	cbnz	r3, 800537c <_free_r+0x30>
 800536e:	6063      	str	r3, [r4, #4]
 8005370:	6014      	str	r4, [r2, #0]
 8005372:	b003      	add	sp, #12
 8005374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005378:	f000 b8da 	b.w	8005530 <__malloc_unlock>
 800537c:	42a3      	cmp	r3, r4
 800537e:	d908      	bls.n	8005392 <_free_r+0x46>
 8005380:	6825      	ldr	r5, [r4, #0]
 8005382:	1961      	adds	r1, r4, r5
 8005384:	428b      	cmp	r3, r1
 8005386:	bf01      	itttt	eq
 8005388:	6819      	ldreq	r1, [r3, #0]
 800538a:	685b      	ldreq	r3, [r3, #4]
 800538c:	1949      	addeq	r1, r1, r5
 800538e:	6021      	streq	r1, [r4, #0]
 8005390:	e7ed      	b.n	800536e <_free_r+0x22>
 8005392:	461a      	mov	r2, r3
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	b10b      	cbz	r3, 800539c <_free_r+0x50>
 8005398:	42a3      	cmp	r3, r4
 800539a:	d9fa      	bls.n	8005392 <_free_r+0x46>
 800539c:	6811      	ldr	r1, [r2, #0]
 800539e:	1855      	adds	r5, r2, r1
 80053a0:	42a5      	cmp	r5, r4
 80053a2:	d10b      	bne.n	80053bc <_free_r+0x70>
 80053a4:	6824      	ldr	r4, [r4, #0]
 80053a6:	4421      	add	r1, r4
 80053a8:	1854      	adds	r4, r2, r1
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	d1e0      	bne.n	8005372 <_free_r+0x26>
 80053b0:	681c      	ldr	r4, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	6053      	str	r3, [r2, #4]
 80053b6:	440c      	add	r4, r1
 80053b8:	6014      	str	r4, [r2, #0]
 80053ba:	e7da      	b.n	8005372 <_free_r+0x26>
 80053bc:	d902      	bls.n	80053c4 <_free_r+0x78>
 80053be:	230c      	movs	r3, #12
 80053c0:	6003      	str	r3, [r0, #0]
 80053c2:	e7d6      	b.n	8005372 <_free_r+0x26>
 80053c4:	6825      	ldr	r5, [r4, #0]
 80053c6:	1961      	adds	r1, r4, r5
 80053c8:	428b      	cmp	r3, r1
 80053ca:	bf04      	itt	eq
 80053cc:	6819      	ldreq	r1, [r3, #0]
 80053ce:	685b      	ldreq	r3, [r3, #4]
 80053d0:	6063      	str	r3, [r4, #4]
 80053d2:	bf04      	itt	eq
 80053d4:	1949      	addeq	r1, r1, r5
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	6054      	str	r4, [r2, #4]
 80053da:	e7ca      	b.n	8005372 <_free_r+0x26>
 80053dc:	b003      	add	sp, #12
 80053de:	bd30      	pop	{r4, r5, pc}
 80053e0:	2000425c 	.word	0x2000425c

080053e4 <sbrk_aligned>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4e0e      	ldr	r6, [pc, #56]	; (8005420 <sbrk_aligned+0x3c>)
 80053e8:	460c      	mov	r4, r1
 80053ea:	6831      	ldr	r1, [r6, #0]
 80053ec:	4605      	mov	r5, r0
 80053ee:	b911      	cbnz	r1, 80053f6 <sbrk_aligned+0x12>
 80053f0:	f000 fba6 	bl	8005b40 <_sbrk_r>
 80053f4:	6030      	str	r0, [r6, #0]
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	f000 fba1 	bl	8005b40 <_sbrk_r>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d00a      	beq.n	8005418 <sbrk_aligned+0x34>
 8005402:	1cc4      	adds	r4, r0, #3
 8005404:	f024 0403 	bic.w	r4, r4, #3
 8005408:	42a0      	cmp	r0, r4
 800540a:	d007      	beq.n	800541c <sbrk_aligned+0x38>
 800540c:	1a21      	subs	r1, r4, r0
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fb96 	bl	8005b40 <_sbrk_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d101      	bne.n	800541c <sbrk_aligned+0x38>
 8005418:	f04f 34ff 	mov.w	r4, #4294967295
 800541c:	4620      	mov	r0, r4
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	20004260 	.word	0x20004260

08005424 <_malloc_r>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	1ccd      	adds	r5, r1, #3
 800542a:	f025 0503 	bic.w	r5, r5, #3
 800542e:	3508      	adds	r5, #8
 8005430:	2d0c      	cmp	r5, #12
 8005432:	bf38      	it	cc
 8005434:	250c      	movcc	r5, #12
 8005436:	2d00      	cmp	r5, #0
 8005438:	4607      	mov	r7, r0
 800543a:	db01      	blt.n	8005440 <_malloc_r+0x1c>
 800543c:	42a9      	cmp	r1, r5
 800543e:	d905      	bls.n	800544c <_malloc_r+0x28>
 8005440:	230c      	movs	r3, #12
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	2600      	movs	r6, #0
 8005446:	4630      	mov	r0, r6
 8005448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005520 <_malloc_r+0xfc>
 8005450:	f000 f868 	bl	8005524 <__malloc_lock>
 8005454:	f8d8 3000 	ldr.w	r3, [r8]
 8005458:	461c      	mov	r4, r3
 800545a:	bb5c      	cbnz	r4, 80054b4 <_malloc_r+0x90>
 800545c:	4629      	mov	r1, r5
 800545e:	4638      	mov	r0, r7
 8005460:	f7ff ffc0 	bl	80053e4 <sbrk_aligned>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	4604      	mov	r4, r0
 8005468:	d155      	bne.n	8005516 <_malloc_r+0xf2>
 800546a:	f8d8 4000 	ldr.w	r4, [r8]
 800546e:	4626      	mov	r6, r4
 8005470:	2e00      	cmp	r6, #0
 8005472:	d145      	bne.n	8005500 <_malloc_r+0xdc>
 8005474:	2c00      	cmp	r4, #0
 8005476:	d048      	beq.n	800550a <_malloc_r+0xe6>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	4631      	mov	r1, r6
 800547c:	4638      	mov	r0, r7
 800547e:	eb04 0903 	add.w	r9, r4, r3
 8005482:	f000 fb5d 	bl	8005b40 <_sbrk_r>
 8005486:	4581      	cmp	r9, r0
 8005488:	d13f      	bne.n	800550a <_malloc_r+0xe6>
 800548a:	6821      	ldr	r1, [r4, #0]
 800548c:	1a6d      	subs	r5, r5, r1
 800548e:	4629      	mov	r1, r5
 8005490:	4638      	mov	r0, r7
 8005492:	f7ff ffa7 	bl	80053e4 <sbrk_aligned>
 8005496:	3001      	adds	r0, #1
 8005498:	d037      	beq.n	800550a <_malloc_r+0xe6>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	442b      	add	r3, r5
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	f8d8 3000 	ldr.w	r3, [r8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d038      	beq.n	800551a <_malloc_r+0xf6>
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	42a2      	cmp	r2, r4
 80054ac:	d12b      	bne.n	8005506 <_malloc_r+0xe2>
 80054ae:	2200      	movs	r2, #0
 80054b0:	605a      	str	r2, [r3, #4]
 80054b2:	e00f      	b.n	80054d4 <_malloc_r+0xb0>
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	1b52      	subs	r2, r2, r5
 80054b8:	d41f      	bmi.n	80054fa <_malloc_r+0xd6>
 80054ba:	2a0b      	cmp	r2, #11
 80054bc:	d917      	bls.n	80054ee <_malloc_r+0xca>
 80054be:	1961      	adds	r1, r4, r5
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	6025      	str	r5, [r4, #0]
 80054c4:	bf18      	it	ne
 80054c6:	6059      	strne	r1, [r3, #4]
 80054c8:	6863      	ldr	r3, [r4, #4]
 80054ca:	bf08      	it	eq
 80054cc:	f8c8 1000 	streq.w	r1, [r8]
 80054d0:	5162      	str	r2, [r4, r5]
 80054d2:	604b      	str	r3, [r1, #4]
 80054d4:	4638      	mov	r0, r7
 80054d6:	f104 060b 	add.w	r6, r4, #11
 80054da:	f000 f829 	bl	8005530 <__malloc_unlock>
 80054de:	f026 0607 	bic.w	r6, r6, #7
 80054e2:	1d23      	adds	r3, r4, #4
 80054e4:	1af2      	subs	r2, r6, r3
 80054e6:	d0ae      	beq.n	8005446 <_malloc_r+0x22>
 80054e8:	1b9b      	subs	r3, r3, r6
 80054ea:	50a3      	str	r3, [r4, r2]
 80054ec:	e7ab      	b.n	8005446 <_malloc_r+0x22>
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	6862      	ldr	r2, [r4, #4]
 80054f2:	d1dd      	bne.n	80054b0 <_malloc_r+0x8c>
 80054f4:	f8c8 2000 	str.w	r2, [r8]
 80054f8:	e7ec      	b.n	80054d4 <_malloc_r+0xb0>
 80054fa:	4623      	mov	r3, r4
 80054fc:	6864      	ldr	r4, [r4, #4]
 80054fe:	e7ac      	b.n	800545a <_malloc_r+0x36>
 8005500:	4634      	mov	r4, r6
 8005502:	6876      	ldr	r6, [r6, #4]
 8005504:	e7b4      	b.n	8005470 <_malloc_r+0x4c>
 8005506:	4613      	mov	r3, r2
 8005508:	e7cc      	b.n	80054a4 <_malloc_r+0x80>
 800550a:	230c      	movs	r3, #12
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	4638      	mov	r0, r7
 8005510:	f000 f80e 	bl	8005530 <__malloc_unlock>
 8005514:	e797      	b.n	8005446 <_malloc_r+0x22>
 8005516:	6025      	str	r5, [r4, #0]
 8005518:	e7dc      	b.n	80054d4 <_malloc_r+0xb0>
 800551a:	605b      	str	r3, [r3, #4]
 800551c:	deff      	udf	#255	; 0xff
 800551e:	bf00      	nop
 8005520:	2000425c 	.word	0x2000425c

08005524 <__malloc_lock>:
 8005524:	4801      	ldr	r0, [pc, #4]	; (800552c <__malloc_lock+0x8>)
 8005526:	f7ff bf01 	b.w	800532c <__retarget_lock_acquire_recursive>
 800552a:	bf00      	nop
 800552c:	20004258 	.word	0x20004258

08005530 <__malloc_unlock>:
 8005530:	4801      	ldr	r0, [pc, #4]	; (8005538 <__malloc_unlock+0x8>)
 8005532:	f7ff befc 	b.w	800532e <__retarget_lock_release_recursive>
 8005536:	bf00      	nop
 8005538:	20004258 	.word	0x20004258

0800553c <__ssputs_r>:
 800553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005540:	688e      	ldr	r6, [r1, #8]
 8005542:	461f      	mov	r7, r3
 8005544:	42be      	cmp	r6, r7
 8005546:	680b      	ldr	r3, [r1, #0]
 8005548:	4682      	mov	sl, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4690      	mov	r8, r2
 800554e:	d82c      	bhi.n	80055aa <__ssputs_r+0x6e>
 8005550:	898a      	ldrh	r2, [r1, #12]
 8005552:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005556:	d026      	beq.n	80055a6 <__ssputs_r+0x6a>
 8005558:	6965      	ldr	r5, [r4, #20]
 800555a:	6909      	ldr	r1, [r1, #16]
 800555c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005560:	eba3 0901 	sub.w	r9, r3, r1
 8005564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005568:	1c7b      	adds	r3, r7, #1
 800556a:	444b      	add	r3, r9
 800556c:	106d      	asrs	r5, r5, #1
 800556e:	429d      	cmp	r5, r3
 8005570:	bf38      	it	cc
 8005572:	461d      	movcc	r5, r3
 8005574:	0553      	lsls	r3, r2, #21
 8005576:	d527      	bpl.n	80055c8 <__ssputs_r+0x8c>
 8005578:	4629      	mov	r1, r5
 800557a:	f7ff ff53 	bl	8005424 <_malloc_r>
 800557e:	4606      	mov	r6, r0
 8005580:	b360      	cbz	r0, 80055dc <__ssputs_r+0xa0>
 8005582:	6921      	ldr	r1, [r4, #16]
 8005584:	464a      	mov	r2, r9
 8005586:	f7ff fed3 	bl	8005330 <memcpy>
 800558a:	89a3      	ldrh	r3, [r4, #12]
 800558c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	6126      	str	r6, [r4, #16]
 8005598:	6165      	str	r5, [r4, #20]
 800559a:	444e      	add	r6, r9
 800559c:	eba5 0509 	sub.w	r5, r5, r9
 80055a0:	6026      	str	r6, [r4, #0]
 80055a2:	60a5      	str	r5, [r4, #8]
 80055a4:	463e      	mov	r6, r7
 80055a6:	42be      	cmp	r6, r7
 80055a8:	d900      	bls.n	80055ac <__ssputs_r+0x70>
 80055aa:	463e      	mov	r6, r7
 80055ac:	6820      	ldr	r0, [r4, #0]
 80055ae:	4632      	mov	r2, r6
 80055b0:	4641      	mov	r1, r8
 80055b2:	f000 faab 	bl	8005b0c <memmove>
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	1b9b      	subs	r3, r3, r6
 80055ba:	60a3      	str	r3, [r4, #8]
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	4433      	add	r3, r6
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	2000      	movs	r0, #0
 80055c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c8:	462a      	mov	r2, r5
 80055ca:	f000 fac9 	bl	8005b60 <_realloc_r>
 80055ce:	4606      	mov	r6, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1e0      	bne.n	8005596 <__ssputs_r+0x5a>
 80055d4:	6921      	ldr	r1, [r4, #16]
 80055d6:	4650      	mov	r0, sl
 80055d8:	f7ff feb8 	bl	800534c <_free_r>
 80055dc:	230c      	movs	r3, #12
 80055de:	f8ca 3000 	str.w	r3, [sl]
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e8:	81a3      	strh	r3, [r4, #12]
 80055ea:	f04f 30ff 	mov.w	r0, #4294967295
 80055ee:	e7e9      	b.n	80055c4 <__ssputs_r+0x88>

080055f0 <_svfiprintf_r>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	4698      	mov	r8, r3
 80055f6:	898b      	ldrh	r3, [r1, #12]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	b09d      	sub	sp, #116	; 0x74
 80055fc:	4607      	mov	r7, r0
 80055fe:	460d      	mov	r5, r1
 8005600:	4614      	mov	r4, r2
 8005602:	d50e      	bpl.n	8005622 <_svfiprintf_r+0x32>
 8005604:	690b      	ldr	r3, [r1, #16]
 8005606:	b963      	cbnz	r3, 8005622 <_svfiprintf_r+0x32>
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	f7ff ff0b 	bl	8005424 <_malloc_r>
 800560e:	6028      	str	r0, [r5, #0]
 8005610:	6128      	str	r0, [r5, #16]
 8005612:	b920      	cbnz	r0, 800561e <_svfiprintf_r+0x2e>
 8005614:	230c      	movs	r3, #12
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	e0d0      	b.n	80057c0 <_svfiprintf_r+0x1d0>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	616b      	str	r3, [r5, #20]
 8005622:	2300      	movs	r3, #0
 8005624:	9309      	str	r3, [sp, #36]	; 0x24
 8005626:	2320      	movs	r3, #32
 8005628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800562c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005630:	2330      	movs	r3, #48	; 0x30
 8005632:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057d8 <_svfiprintf_r+0x1e8>
 8005636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800563a:	f04f 0901 	mov.w	r9, #1
 800563e:	4623      	mov	r3, r4
 8005640:	469a      	mov	sl, r3
 8005642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005646:	b10a      	cbz	r2, 800564c <_svfiprintf_r+0x5c>
 8005648:	2a25      	cmp	r2, #37	; 0x25
 800564a:	d1f9      	bne.n	8005640 <_svfiprintf_r+0x50>
 800564c:	ebba 0b04 	subs.w	fp, sl, r4
 8005650:	d00b      	beq.n	800566a <_svfiprintf_r+0x7a>
 8005652:	465b      	mov	r3, fp
 8005654:	4622      	mov	r2, r4
 8005656:	4629      	mov	r1, r5
 8005658:	4638      	mov	r0, r7
 800565a:	f7ff ff6f 	bl	800553c <__ssputs_r>
 800565e:	3001      	adds	r0, #1
 8005660:	f000 80a9 	beq.w	80057b6 <_svfiprintf_r+0x1c6>
 8005664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005666:	445a      	add	r2, fp
 8005668:	9209      	str	r2, [sp, #36]	; 0x24
 800566a:	f89a 3000 	ldrb.w	r3, [sl]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80a1 	beq.w	80057b6 <_svfiprintf_r+0x1c6>
 8005674:	2300      	movs	r3, #0
 8005676:	f04f 32ff 	mov.w	r2, #4294967295
 800567a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800567e:	f10a 0a01 	add.w	sl, sl, #1
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	9307      	str	r3, [sp, #28]
 8005686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800568a:	931a      	str	r3, [sp, #104]	; 0x68
 800568c:	4654      	mov	r4, sl
 800568e:	2205      	movs	r2, #5
 8005690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005694:	4850      	ldr	r0, [pc, #320]	; (80057d8 <_svfiprintf_r+0x1e8>)
 8005696:	f7fa fda3 	bl	80001e0 <memchr>
 800569a:	9a04      	ldr	r2, [sp, #16]
 800569c:	b9d8      	cbnz	r0, 80056d6 <_svfiprintf_r+0xe6>
 800569e:	06d0      	lsls	r0, r2, #27
 80056a0:	bf44      	itt	mi
 80056a2:	2320      	movmi	r3, #32
 80056a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a8:	0711      	lsls	r1, r2, #28
 80056aa:	bf44      	itt	mi
 80056ac:	232b      	movmi	r3, #43	; 0x2b
 80056ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b2:	f89a 3000 	ldrb.w	r3, [sl]
 80056b6:	2b2a      	cmp	r3, #42	; 0x2a
 80056b8:	d015      	beq.n	80056e6 <_svfiprintf_r+0xf6>
 80056ba:	9a07      	ldr	r2, [sp, #28]
 80056bc:	4654      	mov	r4, sl
 80056be:	2000      	movs	r0, #0
 80056c0:	f04f 0c0a 	mov.w	ip, #10
 80056c4:	4621      	mov	r1, r4
 80056c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ca:	3b30      	subs	r3, #48	; 0x30
 80056cc:	2b09      	cmp	r3, #9
 80056ce:	d94d      	bls.n	800576c <_svfiprintf_r+0x17c>
 80056d0:	b1b0      	cbz	r0, 8005700 <_svfiprintf_r+0x110>
 80056d2:	9207      	str	r2, [sp, #28]
 80056d4:	e014      	b.n	8005700 <_svfiprintf_r+0x110>
 80056d6:	eba0 0308 	sub.w	r3, r0, r8
 80056da:	fa09 f303 	lsl.w	r3, r9, r3
 80056de:	4313      	orrs	r3, r2
 80056e0:	9304      	str	r3, [sp, #16]
 80056e2:	46a2      	mov	sl, r4
 80056e4:	e7d2      	b.n	800568c <_svfiprintf_r+0x9c>
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	1d19      	adds	r1, r3, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	9103      	str	r1, [sp, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bfbb      	ittet	lt
 80056f2:	425b      	neglt	r3, r3
 80056f4:	f042 0202 	orrlt.w	r2, r2, #2
 80056f8:	9307      	strge	r3, [sp, #28]
 80056fa:	9307      	strlt	r3, [sp, #28]
 80056fc:	bfb8      	it	lt
 80056fe:	9204      	strlt	r2, [sp, #16]
 8005700:	7823      	ldrb	r3, [r4, #0]
 8005702:	2b2e      	cmp	r3, #46	; 0x2e
 8005704:	d10c      	bne.n	8005720 <_svfiprintf_r+0x130>
 8005706:	7863      	ldrb	r3, [r4, #1]
 8005708:	2b2a      	cmp	r3, #42	; 0x2a
 800570a:	d134      	bne.n	8005776 <_svfiprintf_r+0x186>
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	1d1a      	adds	r2, r3, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	9203      	str	r2, [sp, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfb8      	it	lt
 8005718:	f04f 33ff 	movlt.w	r3, #4294967295
 800571c:	3402      	adds	r4, #2
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057e8 <_svfiprintf_r+0x1f8>
 8005724:	7821      	ldrb	r1, [r4, #0]
 8005726:	2203      	movs	r2, #3
 8005728:	4650      	mov	r0, sl
 800572a:	f7fa fd59 	bl	80001e0 <memchr>
 800572e:	b138      	cbz	r0, 8005740 <_svfiprintf_r+0x150>
 8005730:	9b04      	ldr	r3, [sp, #16]
 8005732:	eba0 000a 	sub.w	r0, r0, sl
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	4082      	lsls	r2, r0
 800573a:	4313      	orrs	r3, r2
 800573c:	3401      	adds	r4, #1
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005744:	4825      	ldr	r0, [pc, #148]	; (80057dc <_svfiprintf_r+0x1ec>)
 8005746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800574a:	2206      	movs	r2, #6
 800574c:	f7fa fd48 	bl	80001e0 <memchr>
 8005750:	2800      	cmp	r0, #0
 8005752:	d038      	beq.n	80057c6 <_svfiprintf_r+0x1d6>
 8005754:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <_svfiprintf_r+0x1f0>)
 8005756:	bb1b      	cbnz	r3, 80057a0 <_svfiprintf_r+0x1b0>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	3307      	adds	r3, #7
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	9303      	str	r3, [sp, #12]
 8005764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005766:	4433      	add	r3, r6
 8005768:	9309      	str	r3, [sp, #36]	; 0x24
 800576a:	e768      	b.n	800563e <_svfiprintf_r+0x4e>
 800576c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005770:	460c      	mov	r4, r1
 8005772:	2001      	movs	r0, #1
 8005774:	e7a6      	b.n	80056c4 <_svfiprintf_r+0xd4>
 8005776:	2300      	movs	r3, #0
 8005778:	3401      	adds	r4, #1
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0c0a 	mov.w	ip, #10
 8005782:	4620      	mov	r0, r4
 8005784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005788:	3a30      	subs	r2, #48	; 0x30
 800578a:	2a09      	cmp	r2, #9
 800578c:	d903      	bls.n	8005796 <_svfiprintf_r+0x1a6>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0c6      	beq.n	8005720 <_svfiprintf_r+0x130>
 8005792:	9105      	str	r1, [sp, #20]
 8005794:	e7c4      	b.n	8005720 <_svfiprintf_r+0x130>
 8005796:	fb0c 2101 	mla	r1, ip, r1, r2
 800579a:	4604      	mov	r4, r0
 800579c:	2301      	movs	r3, #1
 800579e:	e7f0      	b.n	8005782 <_svfiprintf_r+0x192>
 80057a0:	ab03      	add	r3, sp, #12
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	462a      	mov	r2, r5
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <_svfiprintf_r+0x1f4>)
 80057a8:	a904      	add	r1, sp, #16
 80057aa:	4638      	mov	r0, r7
 80057ac:	f3af 8000 	nop.w
 80057b0:	1c42      	adds	r2, r0, #1
 80057b2:	4606      	mov	r6, r0
 80057b4:	d1d6      	bne.n	8005764 <_svfiprintf_r+0x174>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	065b      	lsls	r3, r3, #25
 80057ba:	f53f af2d 	bmi.w	8005618 <_svfiprintf_r+0x28>
 80057be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057c0:	b01d      	add	sp, #116	; 0x74
 80057c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c6:	ab03      	add	r3, sp, #12
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	462a      	mov	r2, r5
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <_svfiprintf_r+0x1f4>)
 80057ce:	a904      	add	r1, sp, #16
 80057d0:	4638      	mov	r0, r7
 80057d2:	f000 f879 	bl	80058c8 <_printf_i>
 80057d6:	e7eb      	b.n	80057b0 <_svfiprintf_r+0x1c0>
 80057d8:	08005dfc 	.word	0x08005dfc
 80057dc:	08005e06 	.word	0x08005e06
 80057e0:	00000000 	.word	0x00000000
 80057e4:	0800553d 	.word	0x0800553d
 80057e8:	08005e02 	.word	0x08005e02

080057ec <_printf_common>:
 80057ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	4616      	mov	r6, r2
 80057f2:	4699      	mov	r9, r3
 80057f4:	688a      	ldr	r2, [r1, #8]
 80057f6:	690b      	ldr	r3, [r1, #16]
 80057f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057fc:	4293      	cmp	r3, r2
 80057fe:	bfb8      	it	lt
 8005800:	4613      	movlt	r3, r2
 8005802:	6033      	str	r3, [r6, #0]
 8005804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005808:	4607      	mov	r7, r0
 800580a:	460c      	mov	r4, r1
 800580c:	b10a      	cbz	r2, 8005812 <_printf_common+0x26>
 800580e:	3301      	adds	r3, #1
 8005810:	6033      	str	r3, [r6, #0]
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	0699      	lsls	r1, r3, #26
 8005816:	bf42      	ittt	mi
 8005818:	6833      	ldrmi	r3, [r6, #0]
 800581a:	3302      	addmi	r3, #2
 800581c:	6033      	strmi	r3, [r6, #0]
 800581e:	6825      	ldr	r5, [r4, #0]
 8005820:	f015 0506 	ands.w	r5, r5, #6
 8005824:	d106      	bne.n	8005834 <_printf_common+0x48>
 8005826:	f104 0a19 	add.w	sl, r4, #25
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	6832      	ldr	r2, [r6, #0]
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	42ab      	cmp	r3, r5
 8005832:	dc26      	bgt.n	8005882 <_printf_common+0x96>
 8005834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005838:	1e13      	subs	r3, r2, #0
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	bf18      	it	ne
 800583e:	2301      	movne	r3, #1
 8005840:	0692      	lsls	r2, r2, #26
 8005842:	d42b      	bmi.n	800589c <_printf_common+0xb0>
 8005844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005848:	4649      	mov	r1, r9
 800584a:	4638      	mov	r0, r7
 800584c:	47c0      	blx	r8
 800584e:	3001      	adds	r0, #1
 8005850:	d01e      	beq.n	8005890 <_printf_common+0xa4>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	6922      	ldr	r2, [r4, #16]
 8005856:	f003 0306 	and.w	r3, r3, #6
 800585a:	2b04      	cmp	r3, #4
 800585c:	bf02      	ittt	eq
 800585e:	68e5      	ldreq	r5, [r4, #12]
 8005860:	6833      	ldreq	r3, [r6, #0]
 8005862:	1aed      	subeq	r5, r5, r3
 8005864:	68a3      	ldr	r3, [r4, #8]
 8005866:	bf0c      	ite	eq
 8005868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800586c:	2500      	movne	r5, #0
 800586e:	4293      	cmp	r3, r2
 8005870:	bfc4      	itt	gt
 8005872:	1a9b      	subgt	r3, r3, r2
 8005874:	18ed      	addgt	r5, r5, r3
 8005876:	2600      	movs	r6, #0
 8005878:	341a      	adds	r4, #26
 800587a:	42b5      	cmp	r5, r6
 800587c:	d11a      	bne.n	80058b4 <_printf_common+0xc8>
 800587e:	2000      	movs	r0, #0
 8005880:	e008      	b.n	8005894 <_printf_common+0xa8>
 8005882:	2301      	movs	r3, #1
 8005884:	4652      	mov	r2, sl
 8005886:	4649      	mov	r1, r9
 8005888:	4638      	mov	r0, r7
 800588a:	47c0      	blx	r8
 800588c:	3001      	adds	r0, #1
 800588e:	d103      	bne.n	8005898 <_printf_common+0xac>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	3501      	adds	r5, #1
 800589a:	e7c6      	b.n	800582a <_printf_common+0x3e>
 800589c:	18e1      	adds	r1, r4, r3
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	2030      	movs	r0, #48	; 0x30
 80058a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058a6:	4422      	add	r2, r4
 80058a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b0:	3302      	adds	r3, #2
 80058b2:	e7c7      	b.n	8005844 <_printf_common+0x58>
 80058b4:	2301      	movs	r3, #1
 80058b6:	4622      	mov	r2, r4
 80058b8:	4649      	mov	r1, r9
 80058ba:	4638      	mov	r0, r7
 80058bc:	47c0      	blx	r8
 80058be:	3001      	adds	r0, #1
 80058c0:	d0e6      	beq.n	8005890 <_printf_common+0xa4>
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7d9      	b.n	800587a <_printf_common+0x8e>
	...

080058c8 <_printf_i>:
 80058c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	7e0f      	ldrb	r7, [r1, #24]
 80058ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d0:	2f78      	cmp	r7, #120	; 0x78
 80058d2:	4691      	mov	r9, r2
 80058d4:	4680      	mov	r8, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	469a      	mov	sl, r3
 80058da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058de:	d807      	bhi.n	80058f0 <_printf_i+0x28>
 80058e0:	2f62      	cmp	r7, #98	; 0x62
 80058e2:	d80a      	bhi.n	80058fa <_printf_i+0x32>
 80058e4:	2f00      	cmp	r7, #0
 80058e6:	f000 80d4 	beq.w	8005a92 <_printf_i+0x1ca>
 80058ea:	2f58      	cmp	r7, #88	; 0x58
 80058ec:	f000 80c0 	beq.w	8005a70 <_printf_i+0x1a8>
 80058f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058f8:	e03a      	b.n	8005970 <_printf_i+0xa8>
 80058fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058fe:	2b15      	cmp	r3, #21
 8005900:	d8f6      	bhi.n	80058f0 <_printf_i+0x28>
 8005902:	a101      	add	r1, pc, #4	; (adr r1, 8005908 <_printf_i+0x40>)
 8005904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005908:	08005961 	.word	0x08005961
 800590c:	08005975 	.word	0x08005975
 8005910:	080058f1 	.word	0x080058f1
 8005914:	080058f1 	.word	0x080058f1
 8005918:	080058f1 	.word	0x080058f1
 800591c:	080058f1 	.word	0x080058f1
 8005920:	08005975 	.word	0x08005975
 8005924:	080058f1 	.word	0x080058f1
 8005928:	080058f1 	.word	0x080058f1
 800592c:	080058f1 	.word	0x080058f1
 8005930:	080058f1 	.word	0x080058f1
 8005934:	08005a79 	.word	0x08005a79
 8005938:	080059a1 	.word	0x080059a1
 800593c:	08005a33 	.word	0x08005a33
 8005940:	080058f1 	.word	0x080058f1
 8005944:	080058f1 	.word	0x080058f1
 8005948:	08005a9b 	.word	0x08005a9b
 800594c:	080058f1 	.word	0x080058f1
 8005950:	080059a1 	.word	0x080059a1
 8005954:	080058f1 	.word	0x080058f1
 8005958:	080058f1 	.word	0x080058f1
 800595c:	08005a3b 	.word	0x08005a3b
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	1d1a      	adds	r2, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	602a      	str	r2, [r5, #0]
 8005968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005970:	2301      	movs	r3, #1
 8005972:	e09f      	b.n	8005ab4 <_printf_i+0x1ec>
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	682b      	ldr	r3, [r5, #0]
 8005978:	0607      	lsls	r7, r0, #24
 800597a:	f103 0104 	add.w	r1, r3, #4
 800597e:	6029      	str	r1, [r5, #0]
 8005980:	d501      	bpl.n	8005986 <_printf_i+0xbe>
 8005982:	681e      	ldr	r6, [r3, #0]
 8005984:	e003      	b.n	800598e <_printf_i+0xc6>
 8005986:	0646      	lsls	r6, r0, #25
 8005988:	d5fb      	bpl.n	8005982 <_printf_i+0xba>
 800598a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800598e:	2e00      	cmp	r6, #0
 8005990:	da03      	bge.n	800599a <_printf_i+0xd2>
 8005992:	232d      	movs	r3, #45	; 0x2d
 8005994:	4276      	negs	r6, r6
 8005996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599a:	485a      	ldr	r0, [pc, #360]	; (8005b04 <_printf_i+0x23c>)
 800599c:	230a      	movs	r3, #10
 800599e:	e012      	b.n	80059c6 <_printf_i+0xfe>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	6820      	ldr	r0, [r4, #0]
 80059a4:	1d19      	adds	r1, r3, #4
 80059a6:	6029      	str	r1, [r5, #0]
 80059a8:	0605      	lsls	r5, r0, #24
 80059aa:	d501      	bpl.n	80059b0 <_printf_i+0xe8>
 80059ac:	681e      	ldr	r6, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <_printf_i+0xee>
 80059b0:	0641      	lsls	r1, r0, #25
 80059b2:	d5fb      	bpl.n	80059ac <_printf_i+0xe4>
 80059b4:	881e      	ldrh	r6, [r3, #0]
 80059b6:	4853      	ldr	r0, [pc, #332]	; (8005b04 <_printf_i+0x23c>)
 80059b8:	2f6f      	cmp	r7, #111	; 0x6f
 80059ba:	bf0c      	ite	eq
 80059bc:	2308      	moveq	r3, #8
 80059be:	230a      	movne	r3, #10
 80059c0:	2100      	movs	r1, #0
 80059c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059c6:	6865      	ldr	r5, [r4, #4]
 80059c8:	60a5      	str	r5, [r4, #8]
 80059ca:	2d00      	cmp	r5, #0
 80059cc:	bfa2      	ittt	ge
 80059ce:	6821      	ldrge	r1, [r4, #0]
 80059d0:	f021 0104 	bicge.w	r1, r1, #4
 80059d4:	6021      	strge	r1, [r4, #0]
 80059d6:	b90e      	cbnz	r6, 80059dc <_printf_i+0x114>
 80059d8:	2d00      	cmp	r5, #0
 80059da:	d04b      	beq.n	8005a74 <_printf_i+0x1ac>
 80059dc:	4615      	mov	r5, r2
 80059de:	fbb6 f1f3 	udiv	r1, r6, r3
 80059e2:	fb03 6711 	mls	r7, r3, r1, r6
 80059e6:	5dc7      	ldrb	r7, [r0, r7]
 80059e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059ec:	4637      	mov	r7, r6
 80059ee:	42bb      	cmp	r3, r7
 80059f0:	460e      	mov	r6, r1
 80059f2:	d9f4      	bls.n	80059de <_printf_i+0x116>
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d10b      	bne.n	8005a10 <_printf_i+0x148>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	07de      	lsls	r6, r3, #31
 80059fc:	d508      	bpl.n	8005a10 <_printf_i+0x148>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	6861      	ldr	r1, [r4, #4]
 8005a02:	4299      	cmp	r1, r3
 8005a04:	bfde      	ittt	le
 8005a06:	2330      	movle	r3, #48	; 0x30
 8005a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a10:	1b52      	subs	r2, r2, r5
 8005a12:	6122      	str	r2, [r4, #16]
 8005a14:	f8cd a000 	str.w	sl, [sp]
 8005a18:	464b      	mov	r3, r9
 8005a1a:	aa03      	add	r2, sp, #12
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4640      	mov	r0, r8
 8005a20:	f7ff fee4 	bl	80057ec <_printf_common>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d14a      	bne.n	8005abe <_printf_i+0x1f6>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b004      	add	sp, #16
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f043 0320 	orr.w	r3, r3, #32
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	4833      	ldr	r0, [pc, #204]	; (8005b08 <_printf_i+0x240>)
 8005a3c:	2778      	movs	r7, #120	; 0x78
 8005a3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	6829      	ldr	r1, [r5, #0]
 8005a46:	061f      	lsls	r7, r3, #24
 8005a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a4c:	d402      	bmi.n	8005a54 <_printf_i+0x18c>
 8005a4e:	065f      	lsls	r7, r3, #25
 8005a50:	bf48      	it	mi
 8005a52:	b2b6      	uxthmi	r6, r6
 8005a54:	07df      	lsls	r7, r3, #31
 8005a56:	bf48      	it	mi
 8005a58:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5c:	6029      	str	r1, [r5, #0]
 8005a5e:	bf48      	it	mi
 8005a60:	6023      	strmi	r3, [r4, #0]
 8005a62:	b91e      	cbnz	r6, 8005a6c <_printf_i+0x1a4>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	f023 0320 	bic.w	r3, r3, #32
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	e7a7      	b.n	80059c0 <_printf_i+0xf8>
 8005a70:	4824      	ldr	r0, [pc, #144]	; (8005b04 <_printf_i+0x23c>)
 8005a72:	e7e4      	b.n	8005a3e <_printf_i+0x176>
 8005a74:	4615      	mov	r5, r2
 8005a76:	e7bd      	b.n	80059f4 <_printf_i+0x12c>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	6826      	ldr	r6, [r4, #0]
 8005a7c:	6961      	ldr	r1, [r4, #20]
 8005a7e:	1d18      	adds	r0, r3, #4
 8005a80:	6028      	str	r0, [r5, #0]
 8005a82:	0635      	lsls	r5, r6, #24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	d501      	bpl.n	8005a8c <_printf_i+0x1c4>
 8005a88:	6019      	str	r1, [r3, #0]
 8005a8a:	e002      	b.n	8005a92 <_printf_i+0x1ca>
 8005a8c:	0670      	lsls	r0, r6, #25
 8005a8e:	d5fb      	bpl.n	8005a88 <_printf_i+0x1c0>
 8005a90:	8019      	strh	r1, [r3, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	4615      	mov	r5, r2
 8005a98:	e7bc      	b.n	8005a14 <_printf_i+0x14c>
 8005a9a:	682b      	ldr	r3, [r5, #0]
 8005a9c:	1d1a      	adds	r2, r3, #4
 8005a9e:	602a      	str	r2, [r5, #0]
 8005aa0:	681d      	ldr	r5, [r3, #0]
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7fa fb9a 	bl	80001e0 <memchr>
 8005aac:	b108      	cbz	r0, 8005ab2 <_printf_i+0x1ea>
 8005aae:	1b40      	subs	r0, r0, r5
 8005ab0:	6060      	str	r0, [r4, #4]
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abc:	e7aa      	b.n	8005a14 <_printf_i+0x14c>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	462a      	mov	r2, r5
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	47d0      	blx	sl
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0ad      	beq.n	8005a28 <_printf_i+0x160>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	079b      	lsls	r3, r3, #30
 8005ad0:	d413      	bmi.n	8005afa <_printf_i+0x232>
 8005ad2:	68e0      	ldr	r0, [r4, #12]
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	4298      	cmp	r0, r3
 8005ad8:	bfb8      	it	lt
 8005ada:	4618      	movlt	r0, r3
 8005adc:	e7a6      	b.n	8005a2c <_printf_i+0x164>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	47d0      	blx	sl
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d09d      	beq.n	8005a28 <_printf_i+0x160>
 8005aec:	3501      	adds	r5, #1
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	9903      	ldr	r1, [sp, #12]
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dcf2      	bgt.n	8005ade <_printf_i+0x216>
 8005af8:	e7eb      	b.n	8005ad2 <_printf_i+0x20a>
 8005afa:	2500      	movs	r5, #0
 8005afc:	f104 0619 	add.w	r6, r4, #25
 8005b00:	e7f5      	b.n	8005aee <_printf_i+0x226>
 8005b02:	bf00      	nop
 8005b04:	08005e0d 	.word	0x08005e0d
 8005b08:	08005e1e 	.word	0x08005e1e

08005b0c <memmove>:
 8005b0c:	4288      	cmp	r0, r1
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	eb01 0402 	add.w	r4, r1, r2
 8005b14:	d902      	bls.n	8005b1c <memmove+0x10>
 8005b16:	4284      	cmp	r4, r0
 8005b18:	4623      	mov	r3, r4
 8005b1a:	d807      	bhi.n	8005b2c <memmove+0x20>
 8005b1c:	1e43      	subs	r3, r0, #1
 8005b1e:	42a1      	cmp	r1, r4
 8005b20:	d008      	beq.n	8005b34 <memmove+0x28>
 8005b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b2a:	e7f8      	b.n	8005b1e <memmove+0x12>
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4601      	mov	r1, r0
 8005b30:	428a      	cmp	r2, r1
 8005b32:	d100      	bne.n	8005b36 <memmove+0x2a>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b3e:	e7f7      	b.n	8005b30 <memmove+0x24>

08005b40 <_sbrk_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d06      	ldr	r5, [pc, #24]	; (8005b5c <_sbrk_r+0x1c>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f7fb f8c2 	bl	8000cd4 <_sbrk>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_sbrk_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_sbrk_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	20004254 	.word	0x20004254

08005b60 <_realloc_r>:
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b64:	4680      	mov	r8, r0
 8005b66:	4614      	mov	r4, r2
 8005b68:	460e      	mov	r6, r1
 8005b6a:	b921      	cbnz	r1, 8005b76 <_realloc_r+0x16>
 8005b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	4611      	mov	r1, r2
 8005b72:	f7ff bc57 	b.w	8005424 <_malloc_r>
 8005b76:	b92a      	cbnz	r2, 8005b84 <_realloc_r+0x24>
 8005b78:	f7ff fbe8 	bl	800534c <_free_r>
 8005b7c:	4625      	mov	r5, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b84:	f000 f81b 	bl	8005bbe <_malloc_usable_size_r>
 8005b88:	4284      	cmp	r4, r0
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	d802      	bhi.n	8005b94 <_realloc_r+0x34>
 8005b8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b92:	d812      	bhi.n	8005bba <_realloc_r+0x5a>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4640      	mov	r0, r8
 8005b98:	f7ff fc44 	bl	8005424 <_malloc_r>
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d0ed      	beq.n	8005b7e <_realloc_r+0x1e>
 8005ba2:	42bc      	cmp	r4, r7
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	bf28      	it	cs
 8005baa:	463a      	movcs	r2, r7
 8005bac:	f7ff fbc0 	bl	8005330 <memcpy>
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f7ff fbca 	bl	800534c <_free_r>
 8005bb8:	e7e1      	b.n	8005b7e <_realloc_r+0x1e>
 8005bba:	4635      	mov	r5, r6
 8005bbc:	e7df      	b.n	8005b7e <_realloc_r+0x1e>

08005bbe <_malloc_usable_size_r>:
 8005bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc2:	1f18      	subs	r0, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfbc      	itt	lt
 8005bc8:	580b      	ldrlt	r3, [r1, r0]
 8005bca:	18c0      	addlt	r0, r0, r3
 8005bcc:	4770      	bx	lr
	...

08005bd0 <_init>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr

08005bdc <_fini>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr
