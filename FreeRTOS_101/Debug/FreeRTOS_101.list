
FreeRTOS_101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb4  08003fb4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fbc  08003fbc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000041f4  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004254  20004254  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012cb2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a03  00000000  00000000  00032d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001070  00000000  00000000  00035788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ccc  00000000  00000000  000367f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022290  00000000  00000000  000374c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012866  00000000  00000000  00059754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2da3  00000000  00000000  0006bfba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004760  00000000  00000000  0013ed60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001434c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e74 	.word	0x08003e74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003e74 	.word	0x08003e74

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000007c 	.word	0x2000007c
 80004fc:	2000011c 	.word	0x2000011c

08000500 <send_deftask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_deftask(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from def task\n";
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <send_deftask+0x30>)
 8000508:	463c      	mov	r4, r7
 800050a:	461d      	mov	r5, r3
 800050c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000510:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000514:	6020      	str	r0, [r4, #0]
 8000516:	3404      	adds	r4, #4
 8000518:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 800051a:	4639      	mov	r1, r7
 800051c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000520:	2215      	movs	r2, #21
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <send_deftask+0x34>)
 8000524:	f001 fdd9 	bl	80020da <HAL_UART_Transmit>
}
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bdb0      	pop	{r4, r5, r7, pc}
 8000530:	08003e8c 	.word	0x08003e8c
 8000534:	2000031c 	.word	0x2000031c

08000538 <send_task02>:

void send_task02(void)
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from task 2\n";
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <send_task02+0x34>)
 8000540:	1d3c      	adds	r4, r7, #4
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	8022      	strh	r2, [r4, #0]
 800054e:	3402      	adds	r4, #2
 8000550:	0c1b      	lsrs	r3, r3, #16
 8000552:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8000554:	1d39      	adds	r1, r7, #4
 8000556:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800055a:	2213      	movs	r2, #19
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <send_task02+0x38>)
 800055e:	f001 fdbc 	bl	80020da <HAL_UART_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bdb0      	pop	{r4, r5, r7, pc}
 800056a:	bf00      	nop
 800056c:	08003ea4 	.word	0x08003ea4
 8000570:	2000031c 	.word	0x2000031c

08000574 <send_task03>:

void send_task03(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from task 3\n";
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <send_task03+0x34>)
 800057c:	1d3c      	adds	r4, r7, #4
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	682b      	ldr	r3, [r5, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	8022      	strh	r2, [r4, #0]
 800058a:	3402      	adds	r4, #2
 800058c:	0c1b      	lsrs	r3, r3, #16
 800058e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8000590:	1d39      	adds	r1, r7, #4
 8000592:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000596:	2213      	movs	r2, #19
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <send_task03+0x38>)
 800059a:	f001 fd9e 	bl	80020da <HAL_UART_Transmit>

}
 800059e:	bf00      	nop
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bdb0      	pop	{r4, r5, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	08003eb8 	.word	0x08003eb8
 80005ac:	2000031c 	.word	0x2000031c

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b0a4      	sub	sp, #144	; 0x90
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fb17 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f879 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f90b 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f8df 	bl	8000784 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <main+0xd8>)
 80005c8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f90e 	bl	8002802 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a28      	ldr	r2, [pc, #160]	; (800068c <main+0xdc>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <main+0xe0>)
 80005ee:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f8fb 	bl	8002802 <osThreadCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a21      	ldr	r2, [pc, #132]	; (8000694 <main+0xe4>)
 8000610:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <main+0xe8>)
 8000614:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f8e8 	bl	8002802 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a19      	ldr	r2, [pc, #100]	; (800069c <main+0xec>)
 8000636:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <main+0xf0>)
 800063a:	f107 0420 	add.w	r4, r7, #32
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f8d5 	bl	8002802 <osThreadCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <main+0xf4>)
 800065c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <main+0xf8>)
 8000660:	1d3c      	adds	r4, r7, #4
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f8c4 	bl	8002802 <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <main+0xfc>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f002 f8b8 	bl	80027f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0xd4>
 8000686:	bf00      	nop
 8000688:	08003ed8 	.word	0x08003ed8
 800068c:	20000360 	.word	0x20000360
 8000690:	08003f00 	.word	0x08003f00
 8000694:	20000364 	.word	0x20000364
 8000698:	08003f28 	.word	0x08003f28
 800069c:	20000368 	.word	0x20000368
 80006a0:	08003f50 	.word	0x08003f50
 80006a4:	2000036c 	.word	0x2000036c
 80006a8:	08003f78 	.word	0x08003f78
 80006ac:	20000370 	.word	0x20000370

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fafc 	bl	8003cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <SystemClock_Config+0xcc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xd0>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000720:	2308      	movs	r3, #8
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000724:	23a8      	movs	r3, #168	; 0xa8
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fd4b 	bl	80011d0 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 f901 	bl	8000946 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2105      	movs	r1, #5
 8000762:	4618      	mov	r0, r3
 8000764:	f000 ffac 	bl	80016c0 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076e:	f000 f8ea 	bl	8000946 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f001 fc40 	bl	8002040 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f8be 	bl	8000946 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000031c 	.word	0x2000031c
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <MX_GPIO_Init+0xc4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a29      	ldr	r2, [pc, #164]	; (800089c <MX_GPIO_Init+0xc4>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <MX_GPIO_Init+0xc4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_GPIO_Init+0xc4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_GPIO_Init+0xc4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_GPIO_Init+0xc4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_GPIO_Init+0xc4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a1b      	ldr	r2, [pc, #108]	; (800089c <MX_GPIO_Init+0xc4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_GPIO_Init+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2102      	movs	r1, #2
 8000846:	4816      	ldr	r0, [pc, #88]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000848:	f000 fc8e 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <MX_GPIO_Init+0xcc>)
 8000854:	f000 fc88 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000858:	2302      	movs	r3, #2
 800085a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_GPIO_Init+0xc8>)
 8000870:	f000 fade 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000874:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_GPIO_Init+0xcc>)
 800088e:	f000 facf 	bl	8000e30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020c00 	.word	0x40020c00

080008a8 <StartTask05>:

/* USER CODE BEGIN 4 */
/* USER CODE END Header_StartTask02 */
void StartTask05(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	  send_task02();
    osDelay(200);
 80008b0:	20c8      	movs	r0, #200	; 0xc8
 80008b2:	f001 fff2 	bl	800289a <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <StartTask05+0x8>

080008b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  send_deftask();
 80008c0:	f7ff fe1e 	bl	8000500 <send_deftask>
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
    osDelay(500);
 80008c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c8:	f001 ffe7 	bl	800289a <osDelay>
	  send_deftask();
 80008cc:	e7f8      	b.n	80008c0 <StartDefaultTask+0x8>

080008ce <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	  send_task02();
 80008d6:	f7ff fe2f 	bl	8000538 <send_task02>
    osDelay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f001 ffdc 	bl	800289a <osDelay>
	  send_task02();
 80008e2:	e7f8      	b.n	80008d6 <StartTask02+0x8>

080008e4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <StartTask03+0x20>)
 80008f2:	f000 fc52 	bl	800119a <HAL_GPIO_TogglePin>
	send_task03();
 80008f6:	f7ff fe3d 	bl	8000574 <send_task03>
    osDelay(500);
 80008fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fe:	f001 ffcc 	bl	800289a <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000902:	e7f3      	b.n	80008ec <StartTask03+0x8>
 8000904:	40020c00 	.word	0x40020c00

08000908 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <StartTask04+0x1c>)
 8000916:	f000 fc40 	bl	800119a <HAL_GPIO_TogglePin>
    osDelay(700);
 800091a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800091e:	f001 ffbc 	bl	800289a <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000922:	e7f5      	b.n	8000910 <StartTask04+0x8>
 8000924:	40020c00 	.word	0x40020c00

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f977 	bl	8000c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094a:	b672      	cpsid	i
}
 800094c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094e:	e7fe      	b.n	800094e <Error_Handler+0x8>

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <HAL_MspInit+0x54>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x54>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_MspInit+0x54>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x54>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fa21 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_UART_MspInit+0x8c>)
 8000a1e:	f000 fa07 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <HAL_InitTick+0xe8>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <HAL_InitTick+0xe8>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40
 8000a58:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <HAL_InitTick+0xe8>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a64:	f107 0210 	add.w	r2, r7, #16
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f806 	bl	8001a80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d103      	bne.n	8000a86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7e:	f000 ffd7 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8000a82:	6378      	str	r0, [r7, #52]	; 0x34
 8000a84:	e004      	b.n	8000a90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a86:	f000 ffd3 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <HAL_InitTick+0xec>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	0c9b      	lsrs	r3, r3, #18
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <HAL_InitTick+0xf0>)
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_InitTick+0xf0>)
 8000aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <HAL_InitTick+0xf0>)
 8000ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xf0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_InitTick+0xf0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_InitTick+0xf0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <HAL_InitTick+0xf0>)
 8000ac8:	f001 f80c 	bl	8001ae4 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d11b      	bne.n	8000b12 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <HAL_InitTick+0xf0>)
 8000adc:	f001 f85c 	bl	8001b98 <HAL_TIM_Base_Start_IT>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d111      	bne.n	8000b12 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aee:	201c      	movs	r0, #28
 8000af0:	f000 f990 	bl	8000e14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	d808      	bhi.n	8000b0c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000afa:	2200      	movs	r2, #0
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	201c      	movs	r0, #28
 8000b00:	f000 f96c 	bl	8000ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b04:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <HAL_InitTick+0xf4>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e002      	b.n	8000b12 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	; 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	20000374 	.word	0x20000374
 8000b2c:	20000004 	.word	0x20000004

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <TIM2_IRQHandler+0x10>)
 8000b62:	f001 f889 	bl	8001c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000374 	.word	0x20000374

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9a:	490e      	ldr	r1, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb0:	4c0b      	ldr	r4, [pc, #44]	; (8000be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd7 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 f8d9 	bl	8003d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fcf3 	bl	80005b0 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bd8:	08003fc4 	.word	0x08003fc4
  ldr r2, =_sbss
 8000bdc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000be0:	20004254 	.word	0x20004254

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f8d8 	bl	8000dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f7ff ff0e 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fe98 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200003bc 	.word	0x200003bc

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200003bc 	.word	0x200003bc

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff4c 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dee:	f7ff ff61 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ffb1 	bl	8000d60 <NVIC_EncodePriority>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff80 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b60      	ldr	r3, [pc, #384]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a5f      	ldr	r2, [pc, #380]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	; (8001140 <HAL_GPIO_Init+0x310>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x314>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x318>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_GPIO_Init+0x31c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x320>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x324>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x328>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x32c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x310>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_GPIO_Init+0x334>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109a:	4a32      	ldr	r2, [pc, #200]	; (8001164 <HAL_GPIO_Init+0x334>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x334>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_GPIO_Init+0x334>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	041a      	lsls	r2, r3, #16
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	400b      	ands	r3, r1
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e267      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b85      	ldr	r3, [pc, #532]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e242      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6f      	ldr	r2, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a68      	ldr	r2, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fce4 	bl	8000c54 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fce0 	bl	8000c54 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e207      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcd0 	bl	8000c54 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fccc 	bl	8000c54 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f3      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c7      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc85 	bl	8000c54 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc81 	bl	8000c54 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a8      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4925      	ldr	r1, [pc, #148]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc64 	bl	8000c54 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc60 	bl	8000c54 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e187      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d036      	beq.n	8001428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fc44 	bl	8000c54 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc40 	bl	8000c54 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e167      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e01b      	b.n	8001428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fc2d 	bl	8000c54 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e00e      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc29 	bl	8000c54 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d907      	bls.n	800141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e150      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ea      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8097 	beq.w	8001564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a7c      	ldr	r2, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b77      	ldr	r3, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a73      	ldr	r2, [pc, #460]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fbe9 	bl	8000c54 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fbe5 	bl	8000c54 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e10c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014ac:	4b64      	ldr	r3, [pc, #400]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a63      	ldr	r2, [pc, #396]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x30c>
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a54      	ldr	r2, [pc, #336]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fbaa 	bl	8000c54 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fba6 	bl	8000c54 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0cb      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ee      	beq.n	8001504 <HAL_RCC_OscConfig+0x334>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fb94 	bl	8000c54 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fb90 	bl	8000c54 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0b5      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ee      	bne.n	8001530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a1 	beq.w	80016b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d05c      	beq.n	8001634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d141      	bne.n	8001606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fb64 	bl	8000c54 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fb60 	bl	8000c54 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e087      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	491b      	ldr	r1, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fb39 	bl	8000c54 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fb35 	bl	8000c54 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e05c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x416>
 8001604:	e054      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb22 	bl	8000c54 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb1e 	bl	8000c54 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e045      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
 8001632:	e03d      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e038      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000
 8001648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d028      	beq.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d121      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11a      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800167c:	4013      	ands	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fa50 	bl	8000c54 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff fa4c 	bl	8000c54 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f8e6 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	08003f9c 	.word	0x08003f9c
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b090      	sub	sp, #64	; 0x40
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
 8001898:	2300      	movs	r3, #0
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	f200 80a1 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018be:	e09b      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018c4:	e09b      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ca:	e098      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d028      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	627a      	str	r2, [r7, #36]	; 0x24
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018f4:	2100      	movs	r1, #0
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f8:	fb03 f201 	mul.w	r2, r3, r1
 80018fc:	2300      	movs	r3, #0
 80018fe:	fb00 f303 	mul.w	r3, r0, r3
 8001902:	4413      	add	r3, r2
 8001904:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001906:	fba0 1202 	umull	r1, r2, r0, r2
 800190a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800190c:	460a      	mov	r2, r1
 800190e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	4413      	add	r3, r2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001918:	2200      	movs	r2, #0
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	61fa      	str	r2, [r7, #28]
 800191e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001926:	f7fe fc53 	bl	80001d0 <__aeabi_uldivmod>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4613      	mov	r3, r2
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001932:	e053      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	2200      	movs	r2, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	617a      	str	r2, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001946:	f04f 0b00 	mov.w	fp, #0
 800194a:	4652      	mov	r2, sl
 800194c:	465b      	mov	r3, fp
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	ebb2 080a 	subs.w	r8, r2, sl
 8001966:	eb63 090b 	sbc.w	r9, r3, fp
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001976:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800197a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800197e:	ebb2 0408 	subs.w	r4, r2, r8
 8001982:	eb63 0509 	sbc.w	r5, r3, r9
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	00eb      	lsls	r3, r5, #3
 8001990:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001994:	00e2      	lsls	r2, r4, #3
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	eb14 030a 	adds.w	r3, r4, sl
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	eb45 030b 	adc.w	r3, r5, fp
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	028b      	lsls	r3, r1, #10
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019bc:	4621      	mov	r1, r4
 80019be:	028a      	lsls	r2, r1, #10
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	2200      	movs	r2, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d0:	f7fe fbfe 	bl	80001d0 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3740      	adds	r7, #64	; 0x40
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	017d7840 	.word	0x017d7840

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff0 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08003fac 	.word	0x08003fac

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff ffdc 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0b5b      	lsrs	r3, r3, #13
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08003fac 	.word	0x08003fac

08001a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RCC_GetClockConfig+0x60>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0207 	and.w	r2, r3, #7
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	601a      	str	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e041      	b.n	8001b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f839 	bl	8001b82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f000 f9d8 	bl	8001ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d001      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e04e      	b.n	8001c4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <HAL_TIM_Base_Start_IT+0xc4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x80>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d01d      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x80>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HAL_TIM_Base_Start_IT+0xc8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x80>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x80>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x80>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x80>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x80>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d111      	bne.n	8001c3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d010      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3a:	e007      	b.n	8001c4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800
 8001c68:	40000c00 	.word	0x40000c00
 8001c6c:	40010400 	.word	0x40010400
 8001c70:	40014000 	.word	0x40014000
 8001c74:	40001800 	.word	0x40001800

08001c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d122      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d11b      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0202 	mvn.w	r2, #2
 8001ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8ee 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001cc0:	e005      	b.n	8001cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8e0 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f8f1 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d122      	bne.n	8001d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d11b      	bne.n	8001d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0204 	mvn.w	r2, #4
 8001cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8c4 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8b6 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8c7 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0208 	mvn.w	r2, #8
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2204      	movs	r2, #4
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f89a 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f88c 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f89d 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0210 	mvn.w	r2, #16
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2208      	movs	r2, #8
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f870 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f862 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f873 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0201 	mvn.w	r2, #1
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fd96 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	2b80      	cmp	r3, #128	; 0x80
 8001e08:	d10e      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e14:	2b80      	cmp	r3, #128	; 0x80
 8001e16:	d107      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f902 	bl	800202c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	d10e      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e40:	2b40      	cmp	r3, #64	; 0x40
 8001e42:	d107      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f838 	bl	8001ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d10e      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d107      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0220 	mvn.w	r2, #32
 8001e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8cc 	bl	8002018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <TIM_Base_SetConfig+0x114>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef6:	d00f      	beq.n	8001f18 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3d      	ldr	r2, [pc, #244]	; (8001ff0 <TIM_Base_SetConfig+0x118>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00b      	beq.n	8001f18 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3c      	ldr	r2, [pc, #240]	; (8001ff4 <TIM_Base_SetConfig+0x11c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <TIM_Base_SetConfig+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ff8 <TIM_Base_SetConfig+0x120>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d003      	beq.n	8001f18 <TIM_Base_SetConfig+0x40>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <TIM_Base_SetConfig+0x124>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d108      	bne.n	8001f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <TIM_Base_SetConfig+0x114>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02b      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d027      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ff0 <TIM_Base_SetConfig+0x118>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d023      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <TIM_Base_SetConfig+0x11c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01f      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ff8 <TIM_Base_SetConfig+0x120>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01b      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <TIM_Base_SetConfig+0x124>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d017      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a28      	ldr	r2, [pc, #160]	; (8002000 <TIM_Base_SetConfig+0x128>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a27      	ldr	r2, [pc, #156]	; (8002004 <TIM_Base_SetConfig+0x12c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00f      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a26      	ldr	r2, [pc, #152]	; (8002008 <TIM_Base_SetConfig+0x130>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00b      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a25      	ldr	r2, [pc, #148]	; (800200c <TIM_Base_SetConfig+0x134>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <TIM_Base_SetConfig+0x138>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d003      	beq.n	8001f8a <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <TIM_Base_SetConfig+0x13c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d108      	bne.n	8001f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <TIM_Base_SetConfig+0x114>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0xf8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <TIM_Base_SetConfig+0x124>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	615a      	str	r2, [r3, #20]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40014000 	.word	0x40014000
 8002004:	40014400 	.word	0x40014400
 8002008:	40014800 	.word	0x40014800
 800200c:	40001800 	.word	0x40001800
 8002010:	40001c00 	.word	0x40001c00
 8002014:	40002000 	.word	0x40002000

08002018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e03f      	b.n	80020d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fc9e 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f929 	bl	80022dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b08a      	sub	sp, #40	; 0x28
 80020de:	af02      	add	r7, sp, #8
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d17c      	bne.n	80021f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_UART_Transmit+0x2c>
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e075      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_UART_Transmit+0x3e>
 8002114:	2302      	movs	r3, #2
 8002116:	e06e      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2221      	movs	r2, #33	; 0x21
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800212e:	f7fe fd91 	bl	8000c54 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	88fa      	ldrh	r2, [r7, #6]
 800213e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	d108      	bne.n	800215c <HAL_UART_Transmit+0x82>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	e003      	b.n	8002164 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800216c:	e02a      	b.n	80021c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2200      	movs	r2, #0
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f840 	bl	80021fe <UART_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e036      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800219c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3302      	adds	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e007      	b.n	80021b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1cf      	bne.n	800216e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f810 	bl	80021fe <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e006      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b090      	sub	sp, #64	; 0x40
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800220e:	e050      	b.n	80022b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d04c      	beq.n	80022b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <UART_WaitOnFlagUntilTimeout+0x30>
 800221e:	f7fe fd19 	bl	8000c54 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800222a:	429a      	cmp	r2, r3
 800222c:	d241      	bcs.n	80022b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	e853 3f00 	ldrex	r3, [r3]
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800224e:	637a      	str	r2, [r7, #52]	; 0x34
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e5      	bne.n	800222e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	613b      	str	r3, [r7, #16]
   return(result);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	63bb      	str	r3, [r7, #56]	; 0x38
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002282:	623a      	str	r2, [r7, #32]
 8002284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	69f9      	ldr	r1, [r7, #28]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	e841 2300 	strex	r3, r2, [r1]
 800228e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e5      	bne.n	8002262 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e00f      	b.n	80022d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4013      	ands	r3, r2
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d09f      	beq.n	8002210 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3740      	adds	r7, #64	; 0x40
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e0:	b0c0      	sub	sp, #256	; 0x100
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	ea40 0301 	orr.w	r3, r0, r1
 8002304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	431a      	orrs	r2, r3
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	431a      	orrs	r2, r3
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002334:	f021 010c 	bic.w	r1, r1, #12
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002342:	430b      	orrs	r3, r1
 8002344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002356:	6999      	ldr	r1, [r3, #24]
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	ea40 0301 	orr.w	r3, r0, r1
 8002362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b8f      	ldr	r3, [pc, #572]	; (80025a8 <UART_SetConfig+0x2cc>)
 800236c:	429a      	cmp	r2, r3
 800236e:	d005      	beq.n	800237c <UART_SetConfig+0xa0>
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b8d      	ldr	r3, [pc, #564]	; (80025ac <UART_SetConfig+0x2d0>)
 8002378:	429a      	cmp	r2, r3
 800237a:	d104      	bne.n	8002386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800237c:	f7ff fb6c 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8002380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002384:	e003      	b.n	800238e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002386:	f7ff fb53 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 800238a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800238e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002398:	f040 810c 	bne.w	80025b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800239c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023a0:	2200      	movs	r2, #0
 80023a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023ae:	4622      	mov	r2, r4
 80023b0:	462b      	mov	r3, r5
 80023b2:	1891      	adds	r1, r2, r2
 80023b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80023b6:	415b      	adcs	r3, r3
 80023b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023be:	4621      	mov	r1, r4
 80023c0:	eb12 0801 	adds.w	r8, r2, r1
 80023c4:	4629      	mov	r1, r5
 80023c6:	eb43 0901 	adc.w	r9, r3, r1
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023de:	4690      	mov	r8, r2
 80023e0:	4699      	mov	r9, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	eb18 0303 	adds.w	r3, r8, r3
 80023e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023ec:	462b      	mov	r3, r5
 80023ee:	eb49 0303 	adc.w	r3, r9, r3
 80023f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800240a:	460b      	mov	r3, r1
 800240c:	18db      	adds	r3, r3, r3
 800240e:	653b      	str	r3, [r7, #80]	; 0x50
 8002410:	4613      	mov	r3, r2
 8002412:	eb42 0303 	adc.w	r3, r2, r3
 8002416:	657b      	str	r3, [r7, #84]	; 0x54
 8002418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800241c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002420:	f7fd fed6 	bl	80001d0 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <UART_SetConfig+0x2d4>)
 800242a:	fba3 2302 	umull	r2, r3, r3, r2
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	011c      	lsls	r4, r3, #4
 8002432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002436:	2200      	movs	r2, #0
 8002438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800243c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002444:	4642      	mov	r2, r8
 8002446:	464b      	mov	r3, r9
 8002448:	1891      	adds	r1, r2, r2
 800244a:	64b9      	str	r1, [r7, #72]	; 0x48
 800244c:	415b      	adcs	r3, r3
 800244e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002454:	4641      	mov	r1, r8
 8002456:	eb12 0a01 	adds.w	sl, r2, r1
 800245a:	4649      	mov	r1, r9
 800245c:	eb43 0b01 	adc.w	fp, r3, r1
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800246c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002474:	4692      	mov	sl, r2
 8002476:	469b      	mov	fp, r3
 8002478:	4643      	mov	r3, r8
 800247a:	eb1a 0303 	adds.w	r3, sl, r3
 800247e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002482:	464b      	mov	r3, r9
 8002484:	eb4b 0303 	adc.w	r3, fp, r3
 8002488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800249c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024a0:	460b      	mov	r3, r1
 80024a2:	18db      	adds	r3, r3, r3
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
 80024a6:	4613      	mov	r3, r2
 80024a8:	eb42 0303 	adc.w	r3, r2, r3
 80024ac:	647b      	str	r3, [r7, #68]	; 0x44
 80024ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024b6:	f7fd fe8b 	bl	80001d0 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <UART_SetConfig+0x2d4>)
 80024c2:	fba3 2301 	umull	r2, r3, r3, r1
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2264      	movs	r2, #100	; 0x64
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	1acb      	subs	r3, r1, r3
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <UART_SetConfig+0x2d4>)
 80024d8:	fba3 2302 	umull	r2, r3, r3, r2
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024e4:	441c      	add	r4, r3
 80024e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ea:	2200      	movs	r2, #0
 80024ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024f8:	4642      	mov	r2, r8
 80024fa:	464b      	mov	r3, r9
 80024fc:	1891      	adds	r1, r2, r2
 80024fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002500:	415b      	adcs	r3, r3
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002508:	4641      	mov	r1, r8
 800250a:	1851      	adds	r1, r2, r1
 800250c:	6339      	str	r1, [r7, #48]	; 0x30
 800250e:	4649      	mov	r1, r9
 8002510:	414b      	adcs	r3, r1
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002520:	4659      	mov	r1, fp
 8002522:	00cb      	lsls	r3, r1, #3
 8002524:	4651      	mov	r1, sl
 8002526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252a:	4651      	mov	r1, sl
 800252c:	00ca      	lsls	r2, r1, #3
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	4603      	mov	r3, r0
 8002534:	4642      	mov	r2, r8
 8002536:	189b      	adds	r3, r3, r2
 8002538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800253c:	464b      	mov	r3, r9
 800253e:	460a      	mov	r2, r1
 8002540:	eb42 0303 	adc.w	r3, r2, r3
 8002544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800255c:	460b      	mov	r3, r1
 800255e:	18db      	adds	r3, r3, r3
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
 8002562:	4613      	mov	r3, r2
 8002564:	eb42 0303 	adc.w	r3, r2, r3
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800256e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002572:	f7fd fe2d 	bl	80001d0 <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <UART_SetConfig+0x2d4>)
 800257c:	fba3 1302 	umull	r1, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	2164      	movs	r1, #100	; 0x64
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3332      	adds	r3, #50	; 0x32
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <UART_SetConfig+0x2d4>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	f003 0207 	and.w	r2, r3, #7
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4422      	add	r2, r4
 80025a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025a4:	e106      	b.n	80027b4 <UART_SetConfig+0x4d8>
 80025a6:	bf00      	nop
 80025a8:	40011000 	.word	0x40011000
 80025ac:	40011400 	.word	0x40011400
 80025b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025c6:	4642      	mov	r2, r8
 80025c8:	464b      	mov	r3, r9
 80025ca:	1891      	adds	r1, r2, r2
 80025cc:	6239      	str	r1, [r7, #32]
 80025ce:	415b      	adcs	r3, r3
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025d6:	4641      	mov	r1, r8
 80025d8:	1854      	adds	r4, r2, r1
 80025da:	4649      	mov	r1, r9
 80025dc:	eb43 0501 	adc.w	r5, r3, r1
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	00eb      	lsls	r3, r5, #3
 80025ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ee:	00e2      	lsls	r2, r4, #3
 80025f0:	4614      	mov	r4, r2
 80025f2:	461d      	mov	r5, r3
 80025f4:	4643      	mov	r3, r8
 80025f6:	18e3      	adds	r3, r4, r3
 80025f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025fc:	464b      	mov	r3, r9
 80025fe:	eb45 0303 	adc.w	r3, r5, r3
 8002602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002622:	4629      	mov	r1, r5
 8002624:	008b      	lsls	r3, r1, #2
 8002626:	4621      	mov	r1, r4
 8002628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800262c:	4621      	mov	r1, r4
 800262e:	008a      	lsls	r2, r1, #2
 8002630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002634:	f7fd fdcc 	bl	80001d0 <__aeabi_uldivmod>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <UART_SetConfig+0x4e4>)
 800263e:	fba3 2302 	umull	r2, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	011c      	lsls	r4, r3, #4
 8002646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002658:	4642      	mov	r2, r8
 800265a:	464b      	mov	r3, r9
 800265c:	1891      	adds	r1, r2, r2
 800265e:	61b9      	str	r1, [r7, #24]
 8002660:	415b      	adcs	r3, r3
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002668:	4641      	mov	r1, r8
 800266a:	1851      	adds	r1, r2, r1
 800266c:	6139      	str	r1, [r7, #16]
 800266e:	4649      	mov	r1, r9
 8002670:	414b      	adcs	r3, r1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002680:	4659      	mov	r1, fp
 8002682:	00cb      	lsls	r3, r1, #3
 8002684:	4651      	mov	r1, sl
 8002686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800268a:	4651      	mov	r1, sl
 800268c:	00ca      	lsls	r2, r1, #3
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	4603      	mov	r3, r0
 8002694:	4642      	mov	r2, r8
 8002696:	189b      	adds	r3, r3, r2
 8002698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800269c:	464b      	mov	r3, r9
 800269e:	460a      	mov	r2, r1
 80026a0:	eb42 0303 	adc.w	r3, r2, r3
 80026a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80026b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026c0:	4649      	mov	r1, r9
 80026c2:	008b      	lsls	r3, r1, #2
 80026c4:	4641      	mov	r1, r8
 80026c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ca:	4641      	mov	r1, r8
 80026cc:	008a      	lsls	r2, r1, #2
 80026ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026d2:	f7fd fd7d 	bl	80001d0 <__aeabi_uldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <UART_SetConfig+0x4e4>)
 80026de:	fba3 2301 	umull	r2, r3, r3, r1
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2264      	movs	r2, #100	; 0x64
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	1acb      	subs	r3, r1, r3
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	3332      	adds	r3, #50	; 0x32
 80026f0:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <UART_SetConfig+0x4e4>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026fc:	441c      	add	r4, r3
 80026fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002702:	2200      	movs	r2, #0
 8002704:	673b      	str	r3, [r7, #112]	; 0x70
 8002706:	677a      	str	r2, [r7, #116]	; 0x74
 8002708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800270c:	4642      	mov	r2, r8
 800270e:	464b      	mov	r3, r9
 8002710:	1891      	adds	r1, r2, r2
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	415b      	adcs	r3, r3
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800271c:	4641      	mov	r1, r8
 800271e:	1851      	adds	r1, r2, r1
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	4649      	mov	r1, r9
 8002724:	414b      	adcs	r3, r1
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002734:	4659      	mov	r1, fp
 8002736:	00cb      	lsls	r3, r1, #3
 8002738:	4651      	mov	r1, sl
 800273a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800273e:	4651      	mov	r1, sl
 8002740:	00ca      	lsls	r2, r1, #3
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	4603      	mov	r3, r0
 8002748:	4642      	mov	r2, r8
 800274a:	189b      	adds	r3, r3, r2
 800274c:	66bb      	str	r3, [r7, #104]	; 0x68
 800274e:	464b      	mov	r3, r9
 8002750:	460a      	mov	r2, r1
 8002752:	eb42 0303 	adc.w	r3, r2, r3
 8002756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	663b      	str	r3, [r7, #96]	; 0x60
 8002762:	667a      	str	r2, [r7, #100]	; 0x64
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002770:	4649      	mov	r1, r9
 8002772:	008b      	lsls	r3, r1, #2
 8002774:	4641      	mov	r1, r8
 8002776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800277a:	4641      	mov	r1, r8
 800277c:	008a      	lsls	r2, r1, #2
 800277e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002782:	f7fd fd25 	bl	80001d0 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <UART_SetConfig+0x4e4>)
 800278c:	fba3 1302 	umull	r1, r3, r3, r2
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	2164      	movs	r1, #100	; 0x64
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	3332      	adds	r3, #50	; 0x32
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <UART_SetConfig+0x4e4>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	f003 020f 	and.w	r2, r3, #15
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4422      	add	r2, r4
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027ba:	46bd      	mov	sp, r7
 80027bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c0:	51eb851f 	.word	0x51eb851f

080027c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d6:	2b84      	cmp	r3, #132	; 0x84
 80027d8:	d005      	beq.n	80027e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4413      	add	r3, r2
 80027e2:	3303      	adds	r3, #3
 80027e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027f8:	f000 faf6 	bl	8002de8 <vTaskStartScheduler>
  
  return osOK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	bd80      	pop	{r7, pc}

08002802 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002804:	b089      	sub	sp, #36	; 0x24
 8002806:	af04      	add	r7, sp, #16
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <osThreadCreate+0x54>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01c      	beq.n	8002856 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685c      	ldr	r4, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691e      	ldr	r6, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ffc8 	bl	80027c4 <makeFreeRtosPriority>
 8002834:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800283e:	9202      	str	r2, [sp, #8]
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	9100      	str	r1, [sp, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4632      	mov	r2, r6
 8002848:	4629      	mov	r1, r5
 800284a:	4620      	mov	r0, r4
 800284c:	f000 f8ed 	bl	8002a2a <xTaskCreateStatic>
 8002850:	4603      	mov	r3, r0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e01c      	b.n	8002890 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685c      	ldr	r4, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002862:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ffaa 	bl	80027c4 <makeFreeRtosPriority>
 8002870:	4602      	mov	r2, r0
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	9200      	str	r2, [sp, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	4632      	mov	r2, r6
 800287e:	4629      	mov	r1, r5
 8002880:	4620      	mov	r0, r4
 8002882:	f000 f92f 	bl	8002ae4 <xTaskCreate>
 8002886:	4603      	mov	r3, r0
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800288c:	2300      	movs	r3, #0
 800288e:	e000      	b.n	8002892 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800289a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <osDelay+0x16>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	e000      	b.n	80028b2 <osDelay+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa64 	bl	8002d80 <vTaskDelay>
  
  return osOK;
 80028b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f103 0208 	add.w	r2, r3, #8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f04f 32ff 	mov.w	r2, #4294967295
 80028da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f103 0208 	add.w	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f103 0208 	add.w	r2, r3, #8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	601a      	str	r2, [r3, #0]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d103      	bne.n	8002984 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e00c      	b.n	800299e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3308      	adds	r3, #8
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e002      	b.n	8002992 <vListInsert+0x2e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	d2f6      	bcs.n	800298c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6892      	ldr	r2, [r2, #8]
 80029ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6852      	ldr	r2, [r2, #4]
 80029f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d103      	bne.n	8002a0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08e      	sub	sp, #56	; 0x38
 8002a2e:	af04      	add	r7, sp, #16
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	61fb      	str	r3, [r7, #28]
}
 8002a6c:	bf00      	nop
 8002a6e:	e7fe      	b.n	8002a6e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a70:	23a0      	movs	r3, #160	; 0xa0
 8002a72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2ba0      	cmp	r3, #160	; 0xa0
 8002a78:	d00a      	beq.n	8002a90 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	61bb      	str	r3, [r7, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01e      	beq.n	8002ad6 <xTaskCreateStatic+0xac>
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01b      	beq.n	8002ad6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9303      	str	r3, [sp, #12]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f851 	bl	8002b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ad0:	f000 f8ec 	bl	8002cac <prvAddNewTaskToReadyList>
 8002ad4:	e001      	b.n	8002ada <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ada:	697b      	ldr	r3, [r7, #20]
	}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3728      	adds	r7, #40	; 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fef5 	bl	80038e8 <pvPortMalloc>
 8002afe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00e      	beq.n	8002b24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b06:	20a0      	movs	r0, #160	; 0xa0
 8002b08:	f000 feee 	bl	80038e8 <pvPortMalloc>
 8002b0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
 8002b1a:	e005      	b.n	8002b28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b1c:	6978      	ldr	r0, [r7, #20]
 8002b1e:	f000 ffaf 	bl	8003a80 <vPortFree>
 8002b22:	e001      	b.n	8002b28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d017      	beq.n	8002b5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9303      	str	r3, [sp, #12]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	9302      	str	r3, [sp, #8]
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f80f 	bl	8002b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b52:	69f8      	ldr	r0, [r7, #28]
 8002b54:	f000 f8aa 	bl	8002cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	e002      	b.n	8002b64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b64:	69bb      	ldr	r3, [r7, #24]
	}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f023 0307 	bic.w	r3, r3, #7
 8002b96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	617b      	str	r3, [r7, #20]
}
 8002bb4:	bf00      	nop
 8002bb6:	e7fe      	b.n	8002bb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01f      	beq.n	8002bfe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e012      	b.n	8002bea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	7819      	ldrb	r1, [r3, #0]
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3334      	adds	r3, #52	; 0x34
 8002bd4:	460a      	mov	r2, r1
 8002bd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	3301      	adds	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2b0f      	cmp	r3, #15
 8002bee:	d9e9      	bls.n	8002bc4 <prvInitialiseNewTask+0x54>
 8002bf0:	e000      	b.n	8002bf4 <prvInitialiseNewTask+0x84>
			{
				break;
 8002bf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bfc:	e003      	b.n	8002c06 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d901      	bls.n	8002c10 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c0c:	2306      	movs	r3, #6
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	2200      	movs	r2, #0
 8002c20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	3304      	adds	r3, #4
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fe6b 	bl	8002902 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	3318      	adds	r3, #24
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fe66 	bl	8002902 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	f1c3 0207 	rsb	r2, r3, #7
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	334c      	adds	r3, #76	; 0x4c
 8002c60:	224c      	movs	r2, #76	; 0x4c
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 f829 	bl	8003cbc <memset>
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <prvInitialiseNewTask+0x130>)
 8002c6e:	651a      	str	r2, [r3, #80]	; 0x50
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <prvInitialiseNewTask+0x134>)
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <prvInitialiseNewTask+0x138>)
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	69b8      	ldr	r0, [r7, #24]
 8002c82:	f000 fc1f 	bl	80034c4 <pxPortInitialiseStack>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c98:	bf00      	nop
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20004114 	.word	0x20004114
 8002ca4:	2000417c 	.word	0x2000417c
 8002ca8:	200041e4 	.word	0x200041e4

08002cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002cb4:	f000 fd36 	bl	8003724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <prvAddNewTaskToReadyList+0xb8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <prvAddNewTaskToReadyList+0xb8>)
 8002cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <prvAddNewTaskToReadyList+0xbc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cca:	4a27      	ldr	r2, [pc, #156]	; (8002d68 <prvAddNewTaskToReadyList+0xbc>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <prvAddNewTaskToReadyList+0xb8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d110      	bne.n	8002cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cd8:	f000 facc 	bl	8003274 <prvInitialiseTaskLists>
 8002cdc:	e00d      	b.n	8002cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <prvAddNewTaskToReadyList+0xc0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <prvAddNewTaskToReadyList+0xbc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d802      	bhi.n	8002cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <prvAddNewTaskToReadyList+0xbc>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <prvAddNewTaskToReadyList+0xc4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <prvAddNewTaskToReadyList+0xc4>)
 8002d02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <prvAddNewTaskToReadyList+0xc8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <prvAddNewTaskToReadyList+0xc8>)
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <prvAddNewTaskToReadyList+0xcc>)
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f7ff fdf5 	bl	800291c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d32:	f000 fd27 	bl	8003784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <prvAddNewTaskToReadyList+0xc0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00e      	beq.n	8002d5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <prvAddNewTaskToReadyList+0xbc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d207      	bcs.n	8002d5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <prvAddNewTaskToReadyList+0xd0>)
 8002d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200004c0 	.word	0x200004c0
 8002d68:	200003c0 	.word	0x200003c0
 8002d6c:	200004cc 	.word	0x200004cc
 8002d70:	200004dc 	.word	0x200004dc
 8002d74:	200004c8 	.word	0x200004c8
 8002d78:	200003c4 	.word	0x200003c4
 8002d7c:	e000ed04 	.word	0xe000ed04

08002d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d017      	beq.n	8002dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <vTaskDelay+0x60>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <vTaskDelay+0x30>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60bb      	str	r3, [r7, #8]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002db0:	f000 f884 	bl	8002ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002db4:	2100      	movs	r1, #0
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fb1e 	bl	80033f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002dbc:	f000 f88c 	bl	8002ed8 <xTaskResumeAll>
 8002dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <vTaskDelay+0x64>)
 8002dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200004e8 	.word	0x200004e8
 8002de4:	e000ed04 	.word	0xe000ed04

08002de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002df6:	463a      	mov	r2, r7
 8002df8:	1d39      	adds	r1, r7, #4
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fb64 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	9202      	str	r2, [sp, #8]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	2300      	movs	r3, #0
 8002e14:	460a      	mov	r2, r1
 8002e16:	4921      	ldr	r1, [pc, #132]	; (8002e9c <vTaskStartScheduler+0xb4>)
 8002e18:	4821      	ldr	r0, [pc, #132]	; (8002ea0 <vTaskStartScheduler+0xb8>)
 8002e1a:	f7ff fe06 	bl	8002a2a <xTaskCreateStatic>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <vTaskStartScheduler+0xbc>)
 8002e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <vTaskStartScheduler+0xbc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e001      	b.n	8002e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d11b      	bne.n	8002e74 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	613b      	str	r3, [r7, #16]
}
 8002e4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <vTaskStartScheduler+0xc0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	334c      	adds	r3, #76	; 0x4c
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <vTaskStartScheduler+0xc4>)
 8002e58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <vTaskStartScheduler+0xc8>)
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <vTaskStartScheduler+0xcc>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <vTaskStartScheduler+0xd0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e6e:	f000 fbb7 	bl	80035e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e72:	e00e      	b.n	8002e92 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d10a      	bne.n	8002e92 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	60fb      	str	r3, [r7, #12]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <vTaskStartScheduler+0xa8>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	08003f94 	.word	0x08003f94
 8002ea0:	08003245 	.word	0x08003245
 8002ea4:	200004e4 	.word	0x200004e4
 8002ea8:	200003c0 	.word	0x200003c0
 8002eac:	2000005c 	.word	0x2000005c
 8002eb0:	200004e0 	.word	0x200004e0
 8002eb4:	200004cc 	.word	0x200004cc
 8002eb8:	200004c4 	.word	0x200004c4

08002ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <vTaskSuspendAll+0x18>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <vTaskSuspendAll+0x18>)
 8002ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	200004e8 	.word	0x200004e8

08002ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <xTaskResumeAll+0x114>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	603b      	str	r3, [r7, #0]
}
 8002f00:	bf00      	nop
 8002f02:	e7fe      	b.n	8002f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f04:	f000 fc0e 	bl	8003724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f08:	4b38      	ldr	r3, [pc, #224]	; (8002fec <xTaskResumeAll+0x114>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	4a37      	ldr	r2, [pc, #220]	; (8002fec <xTaskResumeAll+0x114>)
 8002f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f12:	4b36      	ldr	r3, [pc, #216]	; (8002fec <xTaskResumeAll+0x114>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d161      	bne.n	8002fde <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <xTaskResumeAll+0x118>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d05d      	beq.n	8002fde <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f22:	e02e      	b.n	8002f82 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f24:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <xTaskResumeAll+0x11c>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3318      	adds	r3, #24
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fd50 	bl	80029d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fd4b 	bl	80029d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	2201      	movs	r2, #1
 8002f46:	409a      	lsls	r2, r3
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <xTaskResumeAll+0x120>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <xTaskResumeAll+0x120>)
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <xTaskResumeAll+0x124>)
 8002f60:	441a      	add	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3304      	adds	r3, #4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f7ff fcd7 	bl	800291c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <xTaskResumeAll+0x128>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d302      	bcc.n	8002f82 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <xTaskResumeAll+0x12c>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <xTaskResumeAll+0x11c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1cc      	bne.n	8002f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f90:	f000 fa12 	bl	80033b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <xTaskResumeAll+0x130>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002fa0:	f000 f836 	bl	8003010 <xTaskIncrementTick>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <xTaskResumeAll+0x12c>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f1      	bne.n	8002fa0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <xTaskResumeAll+0x130>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <xTaskResumeAll+0x12c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <xTaskResumeAll+0x134>)
 8002fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fde:	f000 fbd1 	bl	8003784 <vPortExitCritical>

	return xAlreadyYielded;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200004e8 	.word	0x200004e8
 8002ff0:	200004c0 	.word	0x200004c0
 8002ff4:	20000480 	.word	0x20000480
 8002ff8:	200004c8 	.word	0x200004c8
 8002ffc:	200003c4 	.word	0x200003c4
 8003000:	200003c0 	.word	0x200003c0
 8003004:	200004d4 	.word	0x200004d4
 8003008:	200004d0 	.word	0x200004d0
 800300c:	e000ed04 	.word	0xe000ed04

08003010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800301a:	4b4e      	ldr	r3, [pc, #312]	; (8003154 <xTaskIncrementTick+0x144>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 808e 	bne.w	8003140 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <xTaskIncrementTick+0x148>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800302c:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <xTaskIncrementTick+0x148>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d120      	bne.n	800307a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003038:	4b48      	ldr	r3, [pc, #288]	; (800315c <xTaskIncrementTick+0x14c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <xTaskIncrementTick+0x48>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	603b      	str	r3, [r7, #0]
}
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <xTaskIncrementTick+0x46>
 8003058:	4b40      	ldr	r3, [pc, #256]	; (800315c <xTaskIncrementTick+0x14c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4b40      	ldr	r3, [pc, #256]	; (8003160 <xTaskIncrementTick+0x150>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a3e      	ldr	r2, [pc, #248]	; (800315c <xTaskIncrementTick+0x14c>)
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4a3e      	ldr	r2, [pc, #248]	; (8003160 <xTaskIncrementTick+0x150>)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <xTaskIncrementTick+0x154>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <xTaskIncrementTick+0x154>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	f000 f99f 	bl	80033b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <xTaskIncrementTick+0x158>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d348      	bcc.n	8003116 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003084:	4b35      	ldr	r3, [pc, #212]	; (800315c <xTaskIncrementTick+0x14c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <xTaskIncrementTick+0x158>)
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	601a      	str	r2, [r3, #0]
					break;
 8003096:	e03e      	b.n	8003116 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <xTaskIncrementTick+0x14c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d203      	bcs.n	80030b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030b0:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <xTaskIncrementTick+0x158>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030b6:	e02e      	b.n	8003116 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fc8a 	bl	80029d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3318      	adds	r3, #24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fc81 	bl	80029d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2201      	movs	r2, #1
 80030da:	409a      	lsls	r2, r3
 80030dc:	4b23      	ldr	r3, [pc, #140]	; (800316c <xTaskIncrementTick+0x15c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <xTaskIncrementTick+0x15c>)
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <xTaskIncrementTick+0x160>)
 80030f4:	441a      	add	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3304      	adds	r3, #4
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f7ff fc0d 	bl	800291c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <xTaskIncrementTick+0x164>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	429a      	cmp	r2, r3
 800310e:	d3b9      	bcc.n	8003084 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003114:	e7b6      	b.n	8003084 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <xTaskIncrementTick+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	4914      	ldr	r1, [pc, #80]	; (8003170 <xTaskIncrementTick+0x160>)
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d901      	bls.n	8003132 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <xTaskIncrementTick+0x168>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800313a:	2301      	movs	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	e004      	b.n	800314a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <xTaskIncrementTick+0x16c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	4a0d      	ldr	r2, [pc, #52]	; (800317c <xTaskIncrementTick+0x16c>)
 8003148:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800314a:	697b      	ldr	r3, [r7, #20]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200004e8 	.word	0x200004e8
 8003158:	200004c4 	.word	0x200004c4
 800315c:	20000478 	.word	0x20000478
 8003160:	2000047c 	.word	0x2000047c
 8003164:	200004d8 	.word	0x200004d8
 8003168:	200004e0 	.word	0x200004e0
 800316c:	200004c8 	.word	0x200004c8
 8003170:	200003c4 	.word	0x200003c4
 8003174:	200003c0 	.word	0x200003c0
 8003178:	200004d4 	.word	0x200004d4
 800317c:	200004d0 	.word	0x200004d0

08003180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <vTaskSwitchContext+0xac>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <vTaskSwitchContext+0xb0>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003194:	e044      	b.n	8003220 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <vTaskSwitchContext+0xb0>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <vTaskSwitchContext+0xb4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031aa:	7afb      	ldrb	r3, [r7, #11]
 80031ac:	f1c3 031f 	rsb	r3, r3, #31
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	4921      	ldr	r1, [pc, #132]	; (8003238 <vTaskSwitchContext+0xb8>)
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	607b      	str	r3, [r7, #4]
}
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <vTaskSwitchContext+0x5a>
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4a14      	ldr	r2, [pc, #80]	; (8003238 <vTaskSwitchContext+0xb8>)
 80031e8:	4413      	add	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3308      	adds	r3, #8
 80031fe:	429a      	cmp	r2, r3
 8003200:	d104      	bne.n	800320c <vTaskSwitchContext+0x8c>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <vTaskSwitchContext+0xbc>)
 8003214:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <vTaskSwitchContext+0xbc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	334c      	adds	r3, #76	; 0x4c
 800321c:	4a08      	ldr	r2, [pc, #32]	; (8003240 <vTaskSwitchContext+0xc0>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	200004e8 	.word	0x200004e8
 8003230:	200004d4 	.word	0x200004d4
 8003234:	200004c8 	.word	0x200004c8
 8003238:	200003c4 	.word	0x200003c4
 800323c:	200003c0 	.word	0x200003c0
 8003240:	2000005c 	.word	0x2000005c

08003244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800324c:	f000 f852 	bl	80032f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <prvIdleTask+0x28>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d9f9      	bls.n	800324c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <prvIdleTask+0x2c>)
 800325a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003268:	e7f0      	b.n	800324c <prvIdleTask+0x8>
 800326a:	bf00      	nop
 800326c:	200003c4 	.word	0x200003c4
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	e00c      	b.n	800329a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <prvInitialiseTaskLists+0x60>)
 800328c:	4413      	add	r3, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb17 	bl	80028c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3301      	adds	r3, #1
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d9ef      	bls.n	8003280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <prvInitialiseTaskLists+0x64>)
 80032a2:	f7ff fb0e 	bl	80028c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032a6:	480d      	ldr	r0, [pc, #52]	; (80032dc <prvInitialiseTaskLists+0x68>)
 80032a8:	f7ff fb0b 	bl	80028c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <prvInitialiseTaskLists+0x6c>)
 80032ae:	f7ff fb08 	bl	80028c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032b2:	480c      	ldr	r0, [pc, #48]	; (80032e4 <prvInitialiseTaskLists+0x70>)
 80032b4:	f7ff fb05 	bl	80028c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032b8:	480b      	ldr	r0, [pc, #44]	; (80032e8 <prvInitialiseTaskLists+0x74>)
 80032ba:	f7ff fb02 	bl	80028c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <prvInitialiseTaskLists+0x78>)
 80032c0:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <prvInitialiseTaskLists+0x64>)
 80032c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <prvInitialiseTaskLists+0x7c>)
 80032c6:	4a05      	ldr	r2, [pc, #20]	; (80032dc <prvInitialiseTaskLists+0x68>)
 80032c8:	601a      	str	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	200003c4 	.word	0x200003c4
 80032d8:	20000450 	.word	0x20000450
 80032dc:	20000464 	.word	0x20000464
 80032e0:	20000480 	.word	0x20000480
 80032e4:	20000494 	.word	0x20000494
 80032e8:	200004ac 	.word	0x200004ac
 80032ec:	20000478 	.word	0x20000478
 80032f0:	2000047c 	.word	0x2000047c

080032f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032fa:	e019      	b.n	8003330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032fc:	f000 fa12 	bl	8003724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <prvCheckTasksWaitingTermination+0x50>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fb62 	bl	80029d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <prvCheckTasksWaitingTermination+0x54>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3b01      	subs	r3, #1
 8003318:	4a0b      	ldr	r2, [pc, #44]	; (8003348 <prvCheckTasksWaitingTermination+0x54>)
 800331a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <prvCheckTasksWaitingTermination+0x58>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3b01      	subs	r3, #1
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <prvCheckTasksWaitingTermination+0x58>)
 8003324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003326:	f000 fa2d 	bl	8003784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f810 	bl	8003350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <prvCheckTasksWaitingTermination+0x58>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e1      	bne.n	80032fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000494 	.word	0x20000494
 8003348:	200004c0 	.word	0x200004c0
 800334c:	200004a8 	.word	0x200004a8

08003350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	334c      	adds	r3, #76	; 0x4c
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fcb5 	bl	8003ccc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003368:	2b00      	cmp	r3, #0
 800336a:	d108      	bne.n	800337e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fb85 	bl	8003a80 <vPortFree>
				vPortFree( pxTCB );
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fb82 	bl	8003a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800337c:	e018      	b.n	80033b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003384:	2b01      	cmp	r3, #1
 8003386:	d103      	bne.n	8003390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fb79 	bl	8003a80 <vPortFree>
	}
 800338e:	e00f      	b.n	80033b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003396:	2b02      	cmp	r3, #2
 8003398:	d00a      	beq.n	80033b0 <prvDeleteTCB+0x60>
	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	60fb      	str	r3, [r7, #12]
}
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <prvDeleteTCB+0x5e>
	}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <prvResetNextTaskUnblockTime+0x38>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <prvResetNextTaskUnblockTime+0x3c>)
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033d0:	e008      	b.n	80033e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <prvResetNextTaskUnblockTime+0x38>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <prvResetNextTaskUnblockTime+0x3c>)
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	20000478 	.word	0x20000478
 80033f4:	200004e0 	.word	0x200004e0

080033f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003408:	4b28      	ldr	r3, [pc, #160]	; (80034ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3304      	adds	r3, #4
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fae1 	bl	80029d6 <uxListRemove>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	2201      	movs	r2, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4013      	ands	r3, r2
 800342e:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d10a      	bne.n	8003450 <prvAddCurrentTaskToDelayedList+0x58>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	481a      	ldr	r0, [pc, #104]	; (80034b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800344a:	f7ff fa67 	bl	800291c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800344e:	e026      	b.n	800349e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	429a      	cmp	r2, r3
 8003466:	d209      	bcs.n	800347c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3304      	adds	r3, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f7ff fa75 	bl	8002964 <vListInsert>
}
 800347a:	e010      	b.n	800349e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3304      	adds	r3, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7ff fa6b 	bl	8002964 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	429a      	cmp	r2, r3
 8003496:	d202      	bcs.n	800349e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003498:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200004c4 	.word	0x200004c4
 80034ac:	200003c0 	.word	0x200003c0
 80034b0:	200004c8 	.word	0x200004c8
 80034b4:	200004ac 	.word	0x200004ac
 80034b8:	2000047c 	.word	0x2000047c
 80034bc:	20000478 	.word	0x20000478
 80034c0:	200004e0 	.word	0x200004e0

080034c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3b04      	subs	r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3b04      	subs	r3, #4
 80034e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f023 0201 	bic.w	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b04      	subs	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <pxPortInitialiseStack+0x64>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3b14      	subs	r3, #20
 80034fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3b04      	subs	r3, #4
 800350a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f06f 0202 	mvn.w	r2, #2
 8003512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3b20      	subs	r3, #32
 8003518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	0800352d 	.word	0x0800352d

0800352c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <prvTaskExitError+0x54>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d00a      	beq.n	8003556 <prvTaskExitError+0x2a>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <prvTaskExitError+0x28>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60bb      	str	r3, [r7, #8]
}
 8003568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800356a:	bf00      	nop
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0fc      	beq.n	800356c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	2000000c 	.word	0x2000000c
	...

08003590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <pxCurrentTCBConst2>)
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	6808      	ldr	r0, [r1, #0]
 8003596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359a:	f380 8809 	msr	PSP, r0
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f380 8811 	msr	BASEPRI, r0
 80035aa:	4770      	bx	lr
 80035ac:	f3af 8000 	nop.w

080035b0 <pxCurrentTCBConst2>:
 80035b0:	200003c0 	.word	0x200003c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop

080035b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80035b8:	4808      	ldr	r0, [pc, #32]	; (80035dc <prvPortStartFirstTask+0x24>)
 80035ba:	6800      	ldr	r0, [r0, #0]
 80035bc:	6800      	ldr	r0, [r0, #0]
 80035be:	f380 8808 	msr	MSP, r0
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f380 8814 	msr	CONTROL, r0
 80035ca:	b662      	cpsie	i
 80035cc:	b661      	cpsie	f
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	df00      	svc	0
 80035d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035da:	bf00      	nop
 80035dc:	e000ed08 	.word	0xe000ed08

080035e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <xPortStartScheduler+0x120>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a46      	ldr	r2, [pc, #280]	; (8003704 <xPortStartScheduler+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10a      	bne.n	8003606 <xPortStartScheduler+0x26>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	613b      	str	r3, [r7, #16]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003606:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <xPortStartScheduler+0x120>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3f      	ldr	r2, [pc, #252]	; (8003708 <xPortStartScheduler+0x128>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10a      	bne.n	8003626 <xPortStartScheduler+0x46>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60fb      	str	r3, [r7, #12]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <xPortStartScheduler+0x12c>)
 8003628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b31      	ldr	r3, [pc, #196]	; (8003710 <xPortStartScheduler+0x130>)
 800364c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <xPortStartScheduler+0x134>)
 8003650:	2207      	movs	r2, #7
 8003652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003654:	e009      	b.n	800366a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <xPortStartScheduler+0x134>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b01      	subs	r3, #1
 800365c:	4a2d      	ldr	r2, [pc, #180]	; (8003714 <xPortStartScheduler+0x134>)
 800365e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d0ef      	beq.n	8003656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003676:	4b27      	ldr	r3, [pc, #156]	; (8003714 <xPortStartScheduler+0x134>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	d00a      	beq.n	8003698 <xPortStartScheduler+0xb8>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60bb      	str	r3, [r7, #8]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <xPortStartScheduler+0x134>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <xPortStartScheduler+0x134>)
 80036a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <xPortStartScheduler+0x134>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <xPortStartScheduler+0x134>)
 80036ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <xPortStartScheduler+0x138>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <xPortStartScheduler+0x138>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <xPortStartScheduler+0x138>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a14      	ldr	r2, [pc, #80]	; (8003718 <xPortStartScheduler+0x138>)
 80036c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036ce:	f000 f8dd 	bl	800388c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <xPortStartScheduler+0x13c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80036d8:	f000 f8fc 	bl	80038d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036dc:	4b10      	ldr	r3, [pc, #64]	; (8003720 <xPortStartScheduler+0x140>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <xPortStartScheduler+0x140>)
 80036e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036e8:	f7ff ff66 	bl	80035b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036ec:	f7ff fd48 	bl	8003180 <vTaskSwitchContext>
	prvTaskExitError();
 80036f0:	f7ff ff1c 	bl	800352c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00
 8003704:	410fc271 	.word	0x410fc271
 8003708:	410fc270 	.word	0x410fc270
 800370c:	e000e400 	.word	0xe000e400
 8003710:	200004ec 	.word	0x200004ec
 8003714:	200004f0 	.word	0x200004f0
 8003718:	e000ed20 	.word	0xe000ed20
 800371c:	2000000c 	.word	0x2000000c
 8003720:	e000ef34 	.word	0xe000ef34

08003724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	607b      	str	r3, [r7, #4]
}
 800373c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <vPortEnterCritical+0x58>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <vPortEnterCritical+0x58>)
 8003746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <vPortEnterCritical+0x58>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10f      	bne.n	8003770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <vPortEnterCritical+0x5c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <vPortEnterCritical+0x4c>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	603b      	str	r3, [r7, #0]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <vPortEnterCritical+0x4a>
	}
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	2000000c 	.word	0x2000000c
 8003780:	e000ed04 	.word	0xe000ed04

08003784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <vPortExitCritical+0x50>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <vPortExitCritical+0x24>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	607b      	str	r3, [r7, #4]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <vPortExitCritical+0x50>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <vPortExitCritical+0x50>)
 80037b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <vPortExitCritical+0x50>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <vPortExitCritical+0x42>
 80037ba:	2300      	movs	r3, #0
 80037bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	2000000c 	.word	0x2000000c
	...

080037e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037e0:	f3ef 8009 	mrs	r0, PSP
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <pxCurrentTCBConst>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f01e 0f10 	tst.w	lr, #16
 80037f0:	bf08      	it	eq
 80037f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fa:	6010      	str	r0, [r2, #0]
 80037fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003804:	f380 8811 	msr	BASEPRI, r0
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f7ff fcb6 	bl	8003180 <vTaskSwitchContext>
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f380 8811 	msr	BASEPRI, r0
 800381c:	bc09      	pop	{r0, r3}
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	6808      	ldr	r0, [r1, #0]
 8003822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003826:	f01e 0f10 	tst.w	lr, #16
 800382a:	bf08      	it	eq
 800382c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003830:	f380 8809 	msr	PSP, r0
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	f3af 8000 	nop.w

08003840 <pxCurrentTCBConst>:
 8003840:	200003c0 	.word	0x200003c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop

08003848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	607b      	str	r3, [r7, #4]
}
 8003860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003862:	f7ff fbd5 	bl	8003010 <xTaskIncrementTick>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <SysTick_Handler+0x40>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f383 8811 	msr	BASEPRI, r3
}
 800387e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <vPortSetupTimerInterrupt+0x34>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <vPortSetupTimerInterrupt+0x38>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <vPortSetupTimerInterrupt+0x3c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <vPortSetupTimerInterrupt+0x40>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <vPortSetupTimerInterrupt+0x44>)
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <vPortSetupTimerInterrupt+0x34>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010
 80038c4:	e000e018 	.word	0xe000e018
 80038c8:	20000000 	.word	0x20000000
 80038cc:	10624dd3 	.word	0x10624dd3
 80038d0:	e000e014 	.word	0xe000e014

080038d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80038d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038e4 <vPortEnableVFP+0x10>
 80038d8:	6801      	ldr	r1, [r0, #0]
 80038da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038de:	6001      	str	r1, [r0, #0]
 80038e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80038e2:	bf00      	nop
 80038e4:	e000ed88 	.word	0xe000ed88

080038e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038f4:	f7ff fae2 	bl	8002ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038f8:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <pvPortMalloc+0x180>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003900:	f000 f920 	bl	8003b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003904:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <pvPortMalloc+0x184>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 8093 	bne.w	8003a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01d      	beq.n	8003954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003918:	2208      	movs	r2, #8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	2b00      	cmp	r3, #0
 8003928:	d014      	beq.n	8003954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f023 0307 	bic.w	r3, r3, #7
 8003930:	3308      	adds	r3, #8
 8003932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <pvPortMalloc+0x6c>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	617b      	str	r3, [r7, #20]
}
 8003950:	bf00      	nop
 8003952:	e7fe      	b.n	8003952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d06e      	beq.n	8003a38 <pvPortMalloc+0x150>
 800395a:	4b45      	ldr	r3, [pc, #276]	; (8003a70 <pvPortMalloc+0x188>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	429a      	cmp	r2, r3
 8003962:	d869      	bhi.n	8003a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003964:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <pvPortMalloc+0x18c>)
 8003966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <pvPortMalloc+0x18c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800396e:	e004      	b.n	800397a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d903      	bls.n	800398c <pvPortMalloc+0xa4>
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f1      	bne.n	8003970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <pvPortMalloc+0x180>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003992:	429a      	cmp	r2, r3
 8003994:	d050      	beq.n	8003a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2208      	movs	r2, #8
 800399c:	4413      	add	r3, r2
 800399e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	2308      	movs	r3, #8
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d91f      	bls.n	80039f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <pvPortMalloc+0xf8>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	613b      	str	r3, [r7, #16]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039f2:	69b8      	ldr	r0, [r7, #24]
 80039f4:	f000 f908 	bl	8003c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <pvPortMalloc+0x188>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <pvPortMalloc+0x188>)
 8003a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a06:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <pvPortMalloc+0x188>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <pvPortMalloc+0x190>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d203      	bcs.n	8003a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <pvPortMalloc+0x188>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <pvPortMalloc+0x190>)
 8003a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <pvPortMalloc+0x184>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <pvPortMalloc+0x194>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <pvPortMalloc+0x194>)
 8003a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a38:	f7ff fa4e 	bl	8002ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <pvPortMalloc+0x174>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60fb      	str	r3, [r7, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <pvPortMalloc+0x172>
	return pvReturn;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200040fc 	.word	0x200040fc
 8003a6c:	20004110 	.word	0x20004110
 8003a70:	20004100 	.word	0x20004100
 8003a74:	200040f4 	.word	0x200040f4
 8003a78:	20004104 	.word	0x20004104
 8003a7c:	20004108 	.word	0x20004108

08003a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d04d      	beq.n	8003b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a92:	2308      	movs	r3, #8
 8003a94:	425b      	negs	r3, r3
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4413      	add	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <vPortFree+0xb8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <vPortFree+0x44>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	60fb      	str	r3, [r7, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <vPortFree+0x62>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60bb      	str	r3, [r7, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <vPortFree+0xb8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01e      	beq.n	8003b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d11a      	bne.n	8003b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <vPortFree+0xb8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	401a      	ands	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b08:	f7ff f9d8 	bl	8002ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <vPortFree+0xbc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <vPortFree+0xbc>)
 8003b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b1a:	6938      	ldr	r0, [r7, #16]
 8003b1c:	f000 f874 	bl	8003c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <vPortFree+0xc0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a06      	ldr	r2, [pc, #24]	; (8003b40 <vPortFree+0xc0>)
 8003b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b2a:	f7ff f9d5 	bl	8002ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20004110 	.word	0x20004110
 8003b3c:	20004100 	.word	0x20004100
 8003b40:	2000410c 	.word	0x2000410c

08003b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <prvHeapInit+0xac>)
 8003b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00c      	beq.n	8003b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3307      	adds	r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0307 	bic.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <prvHeapInit+0xac>)
 8003b74:	4413      	add	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <prvHeapInit+0xb0>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b82:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <prvHeapInit+0xb0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b90:	2208      	movs	r2, #8
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <prvHeapInit+0xb4>)
 8003ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <prvHeapInit+0xb4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <prvHeapInit+0xb4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <prvHeapInit+0xb4>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <prvHeapInit+0xb8>)
 8003bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <prvHeapInit+0xbc>)
 8003bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <prvHeapInit+0xc0>)
 8003bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	200004f4 	.word	0x200004f4
 8003bf4:	200040f4 	.word	0x200040f4
 8003bf8:	200040fc 	.word	0x200040fc
 8003bfc:	20004104 	.word	0x20004104
 8003c00:	20004100 	.word	0x20004100
 8003c04:	20004110 	.word	0x20004110

08003c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <prvInsertBlockIntoFreeList+0xac>)
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e002      	b.n	8003c1c <prvInsertBlockIntoFreeList+0x14>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d8f7      	bhi.n	8003c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	4413      	add	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d108      	bne.n	8003c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	441a      	add	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d118      	bne.n	8003c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d00d      	beq.n	8003c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	441a      	add	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e008      	b.n	8003c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e003      	b.n	8003c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d002      	beq.n	8003ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	200040f4 	.word	0x200040f4
 8003cb8:	200040fc 	.word	0x200040fc

08003cbc <memset>:
 8003cbc:	4402      	add	r2, r0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <memset+0xa>
 8003cc4:	4770      	bx	lr
 8003cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cca:	e7f9      	b.n	8003cc0 <memset+0x4>

08003ccc <_reclaim_reent>:
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <_reclaim_reent+0xa8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4283      	cmp	r3, r0
 8003cd2:	b570      	push	{r4, r5, r6, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	d04b      	beq.n	8003d70 <_reclaim_reent+0xa4>
 8003cd8:	69c3      	ldr	r3, [r0, #28]
 8003cda:	b143      	cbz	r3, 8003cee <_reclaim_reent+0x22>
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d144      	bne.n	8003d6c <_reclaim_reent+0xa0>
 8003ce2:	69e3      	ldr	r3, [r4, #28]
 8003ce4:	6819      	ldr	r1, [r3, #0]
 8003ce6:	b111      	cbz	r1, 8003cee <_reclaim_reent+0x22>
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f000 f86b 	bl	8003dc4 <_free_r>
 8003cee:	6961      	ldr	r1, [r4, #20]
 8003cf0:	b111      	cbz	r1, 8003cf8 <_reclaim_reent+0x2c>
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 f866 	bl	8003dc4 <_free_r>
 8003cf8:	69e1      	ldr	r1, [r4, #28]
 8003cfa:	b111      	cbz	r1, 8003d02 <_reclaim_reent+0x36>
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f000 f861 	bl	8003dc4 <_free_r>
 8003d02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d04:	b111      	cbz	r1, 8003d0c <_reclaim_reent+0x40>
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 f85c 	bl	8003dc4 <_free_r>
 8003d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d0e:	b111      	cbz	r1, 8003d16 <_reclaim_reent+0x4a>
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 f857 	bl	8003dc4 <_free_r>
 8003d16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d18:	b111      	cbz	r1, 8003d20 <_reclaim_reent+0x54>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f000 f852 	bl	8003dc4 <_free_r>
 8003d20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003d22:	b111      	cbz	r1, 8003d2a <_reclaim_reent+0x5e>
 8003d24:	4620      	mov	r0, r4
 8003d26:	f000 f84d 	bl	8003dc4 <_free_r>
 8003d2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d2c:	b111      	cbz	r1, 8003d34 <_reclaim_reent+0x68>
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 f848 	bl	8003dc4 <_free_r>
 8003d34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d36:	b111      	cbz	r1, 8003d3e <_reclaim_reent+0x72>
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 f843 	bl	8003dc4 <_free_r>
 8003d3e:	6a23      	ldr	r3, [r4, #32]
 8003d40:	b1b3      	cbz	r3, 8003d70 <_reclaim_reent+0xa4>
 8003d42:	4620      	mov	r0, r4
 8003d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d48:	4718      	bx	r3
 8003d4a:	5949      	ldr	r1, [r1, r5]
 8003d4c:	b941      	cbnz	r1, 8003d60 <_reclaim_reent+0x94>
 8003d4e:	3504      	adds	r5, #4
 8003d50:	69e3      	ldr	r3, [r4, #28]
 8003d52:	2d80      	cmp	r5, #128	; 0x80
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	d1f8      	bne.n	8003d4a <_reclaim_reent+0x7e>
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 f833 	bl	8003dc4 <_free_r>
 8003d5e:	e7c0      	b.n	8003ce2 <_reclaim_reent+0x16>
 8003d60:	680e      	ldr	r6, [r1, #0]
 8003d62:	4620      	mov	r0, r4
 8003d64:	f000 f82e 	bl	8003dc4 <_free_r>
 8003d68:	4631      	mov	r1, r6
 8003d6a:	e7ef      	b.n	8003d4c <_reclaim_reent+0x80>
 8003d6c:	2500      	movs	r5, #0
 8003d6e:	e7ef      	b.n	8003d50 <_reclaim_reent+0x84>
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
 8003d72:	bf00      	nop
 8003d74:	2000005c 	.word	0x2000005c

08003d78 <__libc_init_array>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	4d0d      	ldr	r5, [pc, #52]	; (8003db0 <__libc_init_array+0x38>)
 8003d7c:	4c0d      	ldr	r4, [pc, #52]	; (8003db4 <__libc_init_array+0x3c>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	2600      	movs	r6, #0
 8003d84:	42a6      	cmp	r6, r4
 8003d86:	d109      	bne.n	8003d9c <__libc_init_array+0x24>
 8003d88:	4d0b      	ldr	r5, [pc, #44]	; (8003db8 <__libc_init_array+0x40>)
 8003d8a:	4c0c      	ldr	r4, [pc, #48]	; (8003dbc <__libc_init_array+0x44>)
 8003d8c:	f000 f872 	bl	8003e74 <_init>
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	2600      	movs	r6, #0
 8003d96:	42a6      	cmp	r6, r4
 8003d98:	d105      	bne.n	8003da6 <__libc_init_array+0x2e>
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da0:	4798      	blx	r3
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7ee      	b.n	8003d84 <__libc_init_array+0xc>
 8003da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003daa:	4798      	blx	r3
 8003dac:	3601      	adds	r6, #1
 8003dae:	e7f2      	b.n	8003d96 <__libc_init_array+0x1e>
 8003db0:	08003fbc 	.word	0x08003fbc
 8003db4:	08003fbc 	.word	0x08003fbc
 8003db8:	08003fbc 	.word	0x08003fbc
 8003dbc:	08003fc0 	.word	0x08003fc0

08003dc0 <__retarget_lock_acquire_recursive>:
 8003dc0:	4770      	bx	lr

08003dc2 <__retarget_lock_release_recursive>:
 8003dc2:	4770      	bx	lr

08003dc4 <_free_r>:
 8003dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dc6:	2900      	cmp	r1, #0
 8003dc8:	d044      	beq.n	8003e54 <_free_r+0x90>
 8003dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dce:	9001      	str	r0, [sp, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8003dd6:	bfb8      	it	lt
 8003dd8:	18e4      	addlt	r4, r4, r3
 8003dda:	f000 f83f 	bl	8003e5c <__malloc_lock>
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <_free_r+0x94>)
 8003de0:	9801      	ldr	r0, [sp, #4]
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	b933      	cbnz	r3, 8003df4 <_free_r+0x30>
 8003de6:	6063      	str	r3, [r4, #4]
 8003de8:	6014      	str	r4, [r2, #0]
 8003dea:	b003      	add	sp, #12
 8003dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003df0:	f000 b83a 	b.w	8003e68 <__malloc_unlock>
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	d908      	bls.n	8003e0a <_free_r+0x46>
 8003df8:	6825      	ldr	r5, [r4, #0]
 8003dfa:	1961      	adds	r1, r4, r5
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	bf01      	itttt	eq
 8003e00:	6819      	ldreq	r1, [r3, #0]
 8003e02:	685b      	ldreq	r3, [r3, #4]
 8003e04:	1949      	addeq	r1, r1, r5
 8003e06:	6021      	streq	r1, [r4, #0]
 8003e08:	e7ed      	b.n	8003de6 <_free_r+0x22>
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b10b      	cbz	r3, 8003e14 <_free_r+0x50>
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	d9fa      	bls.n	8003e0a <_free_r+0x46>
 8003e14:	6811      	ldr	r1, [r2, #0]
 8003e16:	1855      	adds	r5, r2, r1
 8003e18:	42a5      	cmp	r5, r4
 8003e1a:	d10b      	bne.n	8003e34 <_free_r+0x70>
 8003e1c:	6824      	ldr	r4, [r4, #0]
 8003e1e:	4421      	add	r1, r4
 8003e20:	1854      	adds	r4, r2, r1
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	6011      	str	r1, [r2, #0]
 8003e26:	d1e0      	bne.n	8003dea <_free_r+0x26>
 8003e28:	681c      	ldr	r4, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	6053      	str	r3, [r2, #4]
 8003e2e:	440c      	add	r4, r1
 8003e30:	6014      	str	r4, [r2, #0]
 8003e32:	e7da      	b.n	8003dea <_free_r+0x26>
 8003e34:	d902      	bls.n	8003e3c <_free_r+0x78>
 8003e36:	230c      	movs	r3, #12
 8003e38:	6003      	str	r3, [r0, #0]
 8003e3a:	e7d6      	b.n	8003dea <_free_r+0x26>
 8003e3c:	6825      	ldr	r5, [r4, #0]
 8003e3e:	1961      	adds	r1, r4, r5
 8003e40:	428b      	cmp	r3, r1
 8003e42:	bf04      	itt	eq
 8003e44:	6819      	ldreq	r1, [r3, #0]
 8003e46:	685b      	ldreq	r3, [r3, #4]
 8003e48:	6063      	str	r3, [r4, #4]
 8003e4a:	bf04      	itt	eq
 8003e4c:	1949      	addeq	r1, r1, r5
 8003e4e:	6021      	streq	r1, [r4, #0]
 8003e50:	6054      	str	r4, [r2, #4]
 8003e52:	e7ca      	b.n	8003dea <_free_r+0x26>
 8003e54:	b003      	add	sp, #12
 8003e56:	bd30      	pop	{r4, r5, pc}
 8003e58:	20004250 	.word	0x20004250

08003e5c <__malloc_lock>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <__malloc_lock+0x8>)
 8003e5e:	f7ff bfaf 	b.w	8003dc0 <__retarget_lock_acquire_recursive>
 8003e62:	bf00      	nop
 8003e64:	2000424c 	.word	0x2000424c

08003e68 <__malloc_unlock>:
 8003e68:	4801      	ldr	r0, [pc, #4]	; (8003e70 <__malloc_unlock+0x8>)
 8003e6a:	f7ff bfaa 	b.w	8003dc2 <__retarget_lock_release_recursive>
 8003e6e:	bf00      	nop
 8003e70:	2000424c 	.word	0x2000424c

08003e74 <_init>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr

08003e80 <_fini>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr
