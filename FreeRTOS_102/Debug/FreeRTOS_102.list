
FreeRTOS_102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d98  08004d98  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da0  08004da0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041fc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004268  20004268  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013597  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d3a  00000000  00000000  00033676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001120  00000000  00000000  000363b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d46  00000000  00000000  000374d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000237ba  00000000  00000000  00038216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001372d  00000000  00000000  0005b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5277  00000000  00000000  0006f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004eb8  00000000  00000000  00144374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014922c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c94 	.word	0x08004c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004c94 	.word	0x08004c94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	20000128 	.word	0x20000128

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	// implement your write code here, this is used by puts and printf //
	int i=0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffc7 	bl	80005a0 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x16>
	return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b08e      	sub	sp, #56	; 0x38
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fb13 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f839 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f8cb 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f89f 	bl	8000780 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting..........\n");
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <main+0x6c>)
 8000644:	f003 fc68 	bl	8003f18 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <main+0x70>)
 800064a:	f107 041c 	add.w	r4, r7, #28
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fff5 	bl	8002652 <osThreadCreate>
 8000668:	4603      	mov	r3, r0
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <main+0x74>)
 800066c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128);
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0x78>)
 8000670:	463c      	mov	r4, r7
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000680:	463b      	mov	r3, r7
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 ffe4 	bl	8002652 <osThreadCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <main+0x7c>)
 800068e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f001 ffc8 	bl	8002624 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x68>
 8000696:	bf00      	nop
 8000698:	08004cac 	.word	0x08004cac
 800069c:	08004ccc 	.word	0x08004ccc
 80006a0:	2000036c 	.word	0x2000036c
 80006a4:	08004cf4 	.word	0x08004cf4
 80006a8:	20000370 	.word	0x20000370

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fd0c 	bl	80040d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000720:	23a8      	movs	r3, #168	; 0xa8
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fd53 	bl	80011dc <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800073c:	f000 f8b5 	bl	80008aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2105      	movs	r1, #5
 800075e:	4618      	mov	r0, r3
 8000760:	f000 ffb4 	bl	80016cc <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076a:	f000 f89e 	bl	80008aa <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f001 fc48 	bl	800204c <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f872 	bl	80008aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000328 	.word	0x20000328
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_GPIO_Init+0x4c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_GPIO_Init+0x4c>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_GPIO_Init+0x4c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_GPIO_Init+0x4c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <MX_GPIO_Init+0x4c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_GPIO_Init+0x4c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("Printing from default task...\n");
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <StartDefaultTask+0x18>)
 800082e:	f003 fb73 	bl	8003f18 <puts>
    osDelay(1000);
 8000832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000836:	f001 ff58 	bl	80026ea <osDelay>
	  printf("Printing from default task...\n");
 800083a:	e7f7      	b.n	800082c <StartDefaultTask+0x8>
 800083c:	08004d10 	.word	0x08004d10

08000840 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  printf("counter val = %d\n", _index++);
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <StartTask02+0x44>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <StartTask02+0x44>)
 8000850:	600a      	str	r2, [r1, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <StartTask02+0x48>)
 8000856:	f003 faf9 	bl	8003e4c <iprintf>
    osDelay(2000);
 800085a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800085e:	f001 ff44 	bl	80026ea <osDelay>
//		osThreadResume(defaultTaskHandle);
//    }

    // osThreadTerminate(defaultTaskHandle);

    if(_index == 3)
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <StartTask02+0x44>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d1ee      	bne.n	8000848 <StartTask02+0x8>
    {
    	uint32_t prevWakeTime = osKernelSysTick();
 800086a:	f001 fee2 	bl	8002632 <osKernelSysTick>
 800086e:	4603      	mov	r3, r0
 8000870:	60fb      	str	r3, [r7, #12]
    	osDelayUntil(&prevWakeTime, 3000);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800087a:	4618      	mov	r0, r3
 800087c:	f001 ff49 	bl	8002712 <osDelayUntil>
	  printf("counter val = %d\n", _index++);
 8000880:	e7e2      	b.n	8000848 <StartTask02+0x8>
 8000882:	bf00      	nop
 8000884:	20000374 	.word	0x20000374
 8000888:	08004d30 	.word	0x08004d30

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089e:	f000 f9ff 	bl	8000ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ae:	b672      	cpsid	i
}
 80008b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <HAL_MspInit+0x54>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_MspInit+0x54>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	f06f 0001 	mvn.w	r0, #1
 80008fa:	f000 faa9 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12b      	bne.n	8000986 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000966:	230c      	movs	r3, #12
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000976:	2307      	movs	r3, #7
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_UART_MspInit+0x8c>)
 8000982:	f000 fa8f 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <HAL_InitTick+0xe8>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a33      	ldr	r2, [pc, #204]	; (8000a84 <HAL_InitTick+0xe8>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <HAL_InitTick+0xe8>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 0210 	add.w	r2, r7, #16
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f85a 	bl	8001a8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e2:	f001 f82b 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 80009e6:	6378      	str	r0, [r7, #52]	; 0x34
 80009e8:	e004      	b.n	80009f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ea:	f001 f827 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 80009ee:	4603      	mov	r3, r0
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f6:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <HAL_InitTick+0xec>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	0c9b      	lsrs	r3, r3, #18
 80009fe:	3b01      	subs	r3, #1
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a10:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a12:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a2a:	4818      	ldr	r0, [pc, #96]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a2c:	f001 f860 	bl	8001af0 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d11b      	bne.n	8000a76 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a3e:	4813      	ldr	r0, [pc, #76]	; (8000a8c <HAL_InitTick+0xf0>)
 8000a40:	f001 f8b0 	bl	8001ba4 <HAL_TIM_Base_Start_IT>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d111      	bne.n	8000a76 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 fa18 	bl	8000e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d808      	bhi.n	8000a70 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	201c      	movs	r0, #28
 8000a64:	f000 f9f4 	bl	8000e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a68:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_InitTick+0xf4>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e002      	b.n	8000a76 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3738      	adds	r7, #56	; 0x38
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	431bde83 	.word	0x431bde83
 8000a8c:	20000378 	.word	0x20000378
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM2_IRQHandler+0x10>)
 8000ac6:	f001 f8dd 	bl	8001c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000378 	.word	0x20000378

08000ad4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e00a      	b.n	8000afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4601      	mov	r1, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf0      	blt.n	8000ae6 <_read+0x12>
  }

  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f003 fb3a 	bl	8004220 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20020000 	.word	0x20020000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	200003c0 	.word	0x200003c0
 8000be0:	20004268 	.word	0x20004268

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c24:	4c0b      	ldr	r4, [pc, #44]	; (8000c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ffd7 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 faf9 	bl	800422c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fcf7 	bl	800062c <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c4c:	08004da8 	.word	0x08004da8
  ldr r2, =_sbss
 8000c50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c54:	20004268 	.word	0x20004268

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f8d8 	bl	8000e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f7ff fe86 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe10 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	200003c4 	.word	0x200003c4

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200003c4 	.word	0x200003c4

08000ce0 <__NVIC_SetPriorityGrouping>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff4c 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e62:	f7ff ff61 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff ffb1 	bl	8000dd4 <NVIC_EncodePriority>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff80 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff54 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e16b      	b.n	8001198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 815a 	bne.w	8001192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d005      	beq.n	8000ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d130      	bne.n	8000f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 0201 	and.w	r2, r3, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d017      	beq.n	8000f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d123      	bne.n	8000fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0203 	and.w	r2, r3, #3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80b4 	beq.w	8001192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a5f      	ldr	r2, [pc, #380]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001046:	4a5b      	ldr	r2, [pc, #364]	; (80011b4 <HAL_GPIO_Init+0x310>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x314>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d02b      	beq.n	80010ca <HAL_GPIO_Init+0x226>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x318>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d025      	beq.n	80010c6 <HAL_GPIO_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_GPIO_Init+0x31c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01f      	beq.n	80010c2 <HAL_GPIO_Init+0x21e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x320>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x21a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <HAL_GPIO_Init+0x324>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x216>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4d      	ldr	r2, [pc, #308]	; (80011cc <HAL_GPIO_Init+0x328>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x212>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <HAL_GPIO_Init+0x32c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x20e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_GPIO_Init+0x330>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x20a>
 80010aa:	2307      	movs	r3, #7
 80010ac:	e00e      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ae:	2308      	movs	r3, #8
 80010b0:	e00c      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x310>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_Init+0x334>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f ae90 	bls.w	8000ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40021400 	.word	0x40021400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021c00 	.word	0x40021c00
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e267      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d075      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b85      	ldr	r3, [pc, #532]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b82      	ldr	r3, [pc, #520]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b7e      	ldr	r3, [pc, #504]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e242      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0x74>
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b70      	ldr	r3, [pc, #448]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6f      	ldr	r2, [pc, #444]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b6d      	ldr	r3, [pc, #436]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6c      	ldr	r2, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001274:	4b69      	ldr	r3, [pc, #420]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a68      	ldr	r2, [pc, #416]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b66      	ldr	r3, [pc, #408]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fd18 	bl	8000cc8 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fd14 	bl	8000cc8 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e207      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xc0>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fd04 	bl	8000cc8 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fd00 	bl	8000cc8 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1f3      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b51      	ldr	r3, [pc, #324]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	4b4a      	ldr	r3, [pc, #296]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b44      	ldr	r3, [pc, #272]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1c7      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4937      	ldr	r1, [pc, #220]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_RCC_OscConfig+0x244>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fcb9 	bl	8000cc8 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fcb5 	bl	8000cc8 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e1a8      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4925      	ldr	r1, [pc, #148]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_RCC_OscConfig+0x244>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc98 	bl	8000cc8 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc94 	bl	8000cc8 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e187      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d036      	beq.n	8001434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_RCC_OscConfig+0x248>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fc78 	bl	8000cc8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc74 	bl	8000cc8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e167      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x200>
 80013fa:	e01b      	b.n	8001434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_OscConfig+0x248>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fc61 	bl	8000cc8 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e00e      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fc5d 	bl	8000cc8 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d907      	bls.n	8001428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e150      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
 800141c:	40023800 	.word	0x40023800
 8001420:	42470000 	.word	0x42470000
 8001424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800142a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ea      	bne.n	800140a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8097 	beq.w	8001570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b7d      	ldr	r3, [pc, #500]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a7c      	ldr	r2, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b7a      	ldr	r3, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147e:	4b74      	ldr	r3, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a73      	ldr	r2, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7ff fc1d 	bl	8000cc8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fc19 	bl	8000cc8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e10c      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2ea>
 80014b8:	4b64      	ldr	r3, [pc, #400]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a63      	ldr	r2, [pc, #396]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x30c>
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5e      	ldr	r2, [pc, #376]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a5b      	ldr	r2, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a57      	ldr	r2, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a54      	ldr	r2, [pc, #336]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d015      	beq.n	8001534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fbde 	bl	8000cc8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fbda 	bl	8000cc8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0cb      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0ee      	beq.n	8001510 <HAL_RCC_OscConfig+0x334>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fbc8 	bl	8000cc8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fbc4 	bl	8000cc8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0b5      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ee      	bne.n	800153c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a38      	ldr	r2, [pc, #224]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a1 	beq.w	80016bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d05c      	beq.n	8001640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d141      	bne.n	8001612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb98 	bl	8000cc8 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb94 	bl	8000cc8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e087      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	3b01      	subs	r3, #1
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	491b      	ldr	r1, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb6d 	bl	8000cc8 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fb69 	bl	8000cc8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e05c      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x416>
 8001610:	e054      	b.n	80016bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb56 	bl	8000cc8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fb52 	bl	8000cc8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e045      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x444>
 800163e:	e03d      	b.n	80016bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e038      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000
 8001654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x4ec>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d028      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d121      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d11a      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001688:	4013      	ands	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001690:	4293      	cmp	r3, r2
 8001692:	d111      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cc      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d90c      	bls.n	8001708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d044      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d003      	beq.n	800178a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	2b03      	cmp	r3, #3
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e067      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4934      	ldr	r1, [pc, #208]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017bc:	f7ff fa84 	bl	8000cc8 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff fa80 	bl	8000cc8 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d20c      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f892 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08004d4c 	.word	0x08004d4c
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800189c:	b090      	sub	sp, #64	; 0x40
 800189e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
 80018a4:	2300      	movs	r3, #0
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d00d      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x40>
 80018bc:	2b08      	cmp	r3, #8
 80018be:	f200 80a1 	bhi.w	8001a04 <HAL_RCC_GetSysClockFreq+0x16c>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ca:	e09b      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x184>)
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018d0:	e09b      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x188>)
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018d6:	e098      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d8:	4b4f      	ldr	r3, [pc, #316]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e2:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d028      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	627a      	str	r2, [r7, #36]	; 0x24
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001900:	2100      	movs	r1, #0
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001904:	fb03 f201 	mul.w	r2, r3, r1
 8001908:	2300      	movs	r3, #0
 800190a:	fb00 f303 	mul.w	r3, r0, r3
 800190e:	4413      	add	r3, r2
 8001910:	4a43      	ldr	r2, [pc, #268]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x188>)
 8001912:	fba0 1202 	umull	r1, r2, r0, r2
 8001916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001918:	460a      	mov	r2, r1
 800191a:	62ba      	str	r2, [r7, #40]	; 0x28
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	4413      	add	r3, r2
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	2200      	movs	r2, #0
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	61fa      	str	r2, [r7, #28]
 800192a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001932:	f7fe fc9d 	bl	8000270 <__aeabi_uldivmod>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4613      	mov	r3, r2
 800193c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193e:	e053      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x180>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	2200      	movs	r2, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	617a      	str	r2, [r7, #20]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001952:	f04f 0b00 	mov.w	fp, #0
 8001956:	4652      	mov	r2, sl
 8001958:	465b      	mov	r3, fp
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0159      	lsls	r1, r3, #5
 8001964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001968:	0150      	lsls	r0, r2, #5
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ebb2 080a 	subs.w	r8, r2, sl
 8001972:	eb63 090b 	sbc.w	r9, r3, fp
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001982:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001986:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800198a:	ebb2 0408 	subs.w	r4, r2, r8
 800198e:	eb63 0509 	sbc.w	r5, r3, r9
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	00eb      	lsls	r3, r5, #3
 800199c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a0:	00e2      	lsls	r2, r4, #3
 80019a2:	4614      	mov	r4, r2
 80019a4:	461d      	mov	r5, r3
 80019a6:	eb14 030a 	adds.w	r3, r4, sl
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	eb45 030b 	adc.w	r3, r5, fp
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019be:	4629      	mov	r1, r5
 80019c0:	028b      	lsls	r3, r1, #10
 80019c2:	4621      	mov	r1, r4
 80019c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c8:	4621      	mov	r1, r4
 80019ca:	028a      	lsls	r2, r1, #10
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	2200      	movs	r2, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	60fa      	str	r2, [r7, #12]
 80019d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019dc:	f7fe fc48 	bl	8000270 <__aeabi_uldivmod>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4613      	mov	r3, r2
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	3301      	adds	r3, #1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a02:	e002      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3740      	adds	r7, #64	; 0x40
 8001a10:	46bd      	mov	sp, r7
 8001a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	00f42400 	.word	0x00f42400
 8001a20:	017d7840 	.word	0x017d7840

08001a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000

08001a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a40:	f7ff fff0 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	0a9b      	lsrs	r3, r3, #10
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08004d5c 	.word	0x08004d5c

08001a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a68:	f7ff ffdc 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0b5b      	lsrs	r3, r3, #13
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08004d5c 	.word	0x08004d5c

08001a8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	220f      	movs	r2, #15
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_RCC_GetClockConfig+0x60>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0207 	and.w	r2, r3, #7
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	601a      	str	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e041      	b.n	8001b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f839 	bl	8001b8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f000 f9d8 	bl	8001ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d001      	beq.n	8001bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e04e      	b.n	8001c5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d022      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x80>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d01d      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x80>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_TIM_Base_Start_IT+0xc8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d018      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x80>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d013      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x80>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00e      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x80>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x80>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x80>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d111      	bne.n	8001c48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d010      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	e007      	b.n	8001c58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40010400 	.word	0x40010400
 8001c7c:	40014000 	.word	0x40014000
 8001c80:	40001800 	.word	0x40001800

08001c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0202 	mvn.w	r2, #2
 8001cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8ee 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8e0 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8f1 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0204 	mvn.w	r2, #4
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8c4 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8b6 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8c7 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0208 	mvn.w	r2, #8
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f89a 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f88c 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f89d 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0210 	mvn.w	r2, #16
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2208      	movs	r2, #8
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f870 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f862 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f873 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0201 	mvn.w	r2, #1
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fd42 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b80      	cmp	r3, #128	; 0x80
 8001e14:	d10e      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d107      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f902 	bl	8002038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b40      	cmp	r3, #64	; 0x40
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f838 	bl	8001ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d107      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0220 	mvn.w	r2, #32
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8cc 	bl	8002024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <TIM_Base_SetConfig+0x114>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d00f      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	; (8001ffc <TIM_Base_SetConfig+0x118>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00b      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <TIM_Base_SetConfig+0x11c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <TIM_Base_SetConfig+0x120>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <TIM_Base_SetConfig+0x124>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <TIM_Base_SetConfig+0x114>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02b      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d027      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2c      	ldr	r2, [pc, #176]	; (8001ffc <TIM_Base_SetConfig+0x118>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d023      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <TIM_Base_SetConfig+0x11c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01f      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <TIM_Base_SetConfig+0x120>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01b      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a29      	ldr	r2, [pc, #164]	; (8002008 <TIM_Base_SetConfig+0x124>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d017      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a28      	ldr	r2, [pc, #160]	; (800200c <TIM_Base_SetConfig+0x128>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a27      	ldr	r2, [pc, #156]	; (8002010 <TIM_Base_SetConfig+0x12c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00f      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <TIM_Base_SetConfig+0x130>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a25      	ldr	r2, [pc, #148]	; (8002018 <TIM_Base_SetConfig+0x134>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a24      	ldr	r2, [pc, #144]	; (800201c <TIM_Base_SetConfig+0x138>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a23      	ldr	r2, [pc, #140]	; (8002020 <TIM_Base_SetConfig+0x13c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <TIM_Base_SetConfig+0x114>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d003      	beq.n	8001fdc <TIM_Base_SetConfig+0xf8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <TIM_Base_SetConfig+0x124>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d103      	bne.n	8001fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	615a      	str	r2, [r3, #20]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40010400 	.word	0x40010400
 800200c:	40014000 	.word	0x40014000
 8002010:	40014400 	.word	0x40014400
 8002014:	40014800 	.word	0x40014800
 8002018:	40001800 	.word	0x40001800
 800201c:	40001c00 	.word	0x40001c00
 8002020:	40002000 	.word	0x40002000

08002024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e03f      	b.n	80020de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fc4a 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800208e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f829 	bl	80020e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ec:	b0c0      	sub	sp, #256	; 0x100
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	ea40 0301 	orr.w	r3, r0, r1
 8002110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	431a      	orrs	r2, r3
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	431a      	orrs	r2, r3
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002140:	f021 010c 	bic.w	r1, r1, #12
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800214e:	430b      	orrs	r3, r1
 8002150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002162:	6999      	ldr	r1, [r3, #24]
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	ea40 0301 	orr.w	r3, r0, r1
 800216e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <UART_SetConfig+0x2cc>)
 8002178:	429a      	cmp	r2, r3
 800217a:	d005      	beq.n	8002188 <UART_SetConfig+0xa0>
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <UART_SetConfig+0x2d0>)
 8002184:	429a      	cmp	r2, r3
 8002186:	d104      	bne.n	8002192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002188:	f7ff fc6c 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 800218c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002190:	e003      	b.n	800219a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002192:	f7ff fc53 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 8002196:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800219a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a4:	f040 810c 	bne.w	80023c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ac:	2200      	movs	r2, #0
 80021ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	1891      	adds	r1, r2, r2
 80021c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80021c2:	415b      	adcs	r3, r3
 80021c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021ca:	4621      	mov	r1, r4
 80021cc:	eb12 0801 	adds.w	r8, r2, r1
 80021d0:	4629      	mov	r1, r5
 80021d2:	eb43 0901 	adc.w	r9, r3, r1
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	eb18 0303 	adds.w	r3, r8, r3
 80021f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021f8:	462b      	mov	r3, r5
 80021fa:	eb49 0303 	adc.w	r3, r9, r3
 80021fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800220e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002216:	460b      	mov	r3, r1
 8002218:	18db      	adds	r3, r3, r3
 800221a:	653b      	str	r3, [r7, #80]	; 0x50
 800221c:	4613      	mov	r3, r2
 800221e:	eb42 0303 	adc.w	r3, r2, r3
 8002222:	657b      	str	r3, [r7, #84]	; 0x54
 8002224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800222c:	f7fe f820 	bl	8000270 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4b61      	ldr	r3, [pc, #388]	; (80023bc <UART_SetConfig+0x2d4>)
 8002236:	fba3 2302 	umull	r2, r3, r3, r2
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	011c      	lsls	r4, r3, #4
 800223e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002242:	2200      	movs	r2, #0
 8002244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002248:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800224c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	1891      	adds	r1, r2, r2
 8002256:	64b9      	str	r1, [r7, #72]	; 0x48
 8002258:	415b      	adcs	r3, r3
 800225a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800225c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002260:	4641      	mov	r1, r8
 8002262:	eb12 0a01 	adds.w	sl, r2, r1
 8002266:	4649      	mov	r1, r9
 8002268:	eb43 0b01 	adc.w	fp, r3, r1
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800227c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002280:	4692      	mov	sl, r2
 8002282:	469b      	mov	fp, r3
 8002284:	4643      	mov	r3, r8
 8002286:	eb1a 0303 	adds.w	r3, sl, r3
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800228e:	464b      	mov	r3, r9
 8002290:	eb4b 0303 	adc.w	r3, fp, r3
 8002294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022ac:	460b      	mov	r3, r1
 80022ae:	18db      	adds	r3, r3, r3
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
 80022b2:	4613      	mov	r3, r2
 80022b4:	eb42 0303 	adc.w	r3, r2, r3
 80022b8:	647b      	str	r3, [r7, #68]	; 0x44
 80022ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022c2:	f7fd ffd5 	bl	8000270 <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <UART_SetConfig+0x2d4>)
 80022ce:	fba3 2301 	umull	r2, r3, r3, r1
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2264      	movs	r2, #100	; 0x64
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	1acb      	subs	r3, r1, r3
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022e2:	4b36      	ldr	r3, [pc, #216]	; (80023bc <UART_SetConfig+0x2d4>)
 80022e4:	fba3 2302 	umull	r2, r3, r3, r2
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022f0:	441c      	add	r4, r3
 80022f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f6:	2200      	movs	r2, #0
 80022f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002304:	4642      	mov	r2, r8
 8002306:	464b      	mov	r3, r9
 8002308:	1891      	adds	r1, r2, r2
 800230a:	63b9      	str	r1, [r7, #56]	; 0x38
 800230c:	415b      	adcs	r3, r3
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002314:	4641      	mov	r1, r8
 8002316:	1851      	adds	r1, r2, r1
 8002318:	6339      	str	r1, [r7, #48]	; 0x30
 800231a:	4649      	mov	r1, r9
 800231c:	414b      	adcs	r3, r1
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800232c:	4659      	mov	r1, fp
 800232e:	00cb      	lsls	r3, r1, #3
 8002330:	4651      	mov	r1, sl
 8002332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002336:	4651      	mov	r1, sl
 8002338:	00ca      	lsls	r2, r1, #3
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	4603      	mov	r3, r0
 8002340:	4642      	mov	r2, r8
 8002342:	189b      	adds	r3, r3, r2
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002348:	464b      	mov	r3, r9
 800234a:	460a      	mov	r2, r1
 800234c:	eb42 0303 	adc.w	r3, r2, r3
 8002350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002360:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002368:	460b      	mov	r3, r1
 800236a:	18db      	adds	r3, r3, r3
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
 800236e:	4613      	mov	r3, r2
 8002370:	eb42 0303 	adc.w	r3, r2, r3
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800237a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800237e:	f7fd ff77 	bl	8000270 <__aeabi_uldivmod>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <UART_SetConfig+0x2d4>)
 8002388:	fba3 1302 	umull	r1, r3, r3, r2
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	2164      	movs	r1, #100	; 0x64
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	3332      	adds	r3, #50	; 0x32
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <UART_SetConfig+0x2d4>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	f003 0207 	and.w	r2, r3, #7
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4422      	add	r2, r4
 80023ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023b0:	e106      	b.n	80025c0 <UART_SetConfig+0x4d8>
 80023b2:	bf00      	nop
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400
 80023bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023d2:	4642      	mov	r2, r8
 80023d4:	464b      	mov	r3, r9
 80023d6:	1891      	adds	r1, r2, r2
 80023d8:	6239      	str	r1, [r7, #32]
 80023da:	415b      	adcs	r3, r3
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e2:	4641      	mov	r1, r8
 80023e4:	1854      	adds	r4, r2, r1
 80023e6:	4649      	mov	r1, r9
 80023e8:	eb43 0501 	adc.w	r5, r3, r1
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	00eb      	lsls	r3, r5, #3
 80023f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023fa:	00e2      	lsls	r2, r4, #3
 80023fc:	4614      	mov	r4, r2
 80023fe:	461d      	mov	r5, r3
 8002400:	4643      	mov	r3, r8
 8002402:	18e3      	adds	r3, r4, r3
 8002404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002408:	464b      	mov	r3, r9
 800240a:	eb45 0303 	adc.w	r3, r5, r3
 800240e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800241e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800242e:	4629      	mov	r1, r5
 8002430:	008b      	lsls	r3, r1, #2
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002438:	4621      	mov	r1, r4
 800243a:	008a      	lsls	r2, r1, #2
 800243c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002440:	f7fd ff16 	bl	8000270 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4b60      	ldr	r3, [pc, #384]	; (80025cc <UART_SetConfig+0x4e4>)
 800244a:	fba3 2302 	umull	r2, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	011c      	lsls	r4, r3, #4
 8002452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002456:	2200      	movs	r2, #0
 8002458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800245c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002464:	4642      	mov	r2, r8
 8002466:	464b      	mov	r3, r9
 8002468:	1891      	adds	r1, r2, r2
 800246a:	61b9      	str	r1, [r7, #24]
 800246c:	415b      	adcs	r3, r3
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002474:	4641      	mov	r1, r8
 8002476:	1851      	adds	r1, r2, r1
 8002478:	6139      	str	r1, [r7, #16]
 800247a:	4649      	mov	r1, r9
 800247c:	414b      	adcs	r3, r1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800248c:	4659      	mov	r1, fp
 800248e:	00cb      	lsls	r3, r1, #3
 8002490:	4651      	mov	r1, sl
 8002492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002496:	4651      	mov	r1, sl
 8002498:	00ca      	lsls	r2, r1, #3
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	4642      	mov	r2, r8
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024a8:	464b      	mov	r3, r9
 80024aa:	460a      	mov	r2, r1
 80024ac:	eb42 0303 	adc.w	r3, r2, r3
 80024b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80024be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024cc:	4649      	mov	r1, r9
 80024ce:	008b      	lsls	r3, r1, #2
 80024d0:	4641      	mov	r1, r8
 80024d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d6:	4641      	mov	r1, r8
 80024d8:	008a      	lsls	r2, r1, #2
 80024da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024de:	f7fd fec7 	bl	8000270 <__aeabi_uldivmod>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	4b38      	ldr	r3, [pc, #224]	; (80025cc <UART_SetConfig+0x4e4>)
 80024ea:	fba3 2301 	umull	r2, r3, r3, r1
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2264      	movs	r2, #100	; 0x64
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	1acb      	subs	r3, r1, r3
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	3332      	adds	r3, #50	; 0x32
 80024fc:	4a33      	ldr	r2, [pc, #204]	; (80025cc <UART_SetConfig+0x4e4>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	441c      	add	r4, r3
 800250a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800250e:	2200      	movs	r2, #0
 8002510:	673b      	str	r3, [r7, #112]	; 0x70
 8002512:	677a      	str	r2, [r7, #116]	; 0x74
 8002514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002518:	4642      	mov	r2, r8
 800251a:	464b      	mov	r3, r9
 800251c:	1891      	adds	r1, r2, r2
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	415b      	adcs	r3, r3
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002528:	4641      	mov	r1, r8
 800252a:	1851      	adds	r1, r2, r1
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	4649      	mov	r1, r9
 8002530:	414b      	adcs	r3, r1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002540:	4659      	mov	r1, fp
 8002542:	00cb      	lsls	r3, r1, #3
 8002544:	4651      	mov	r1, sl
 8002546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800254a:	4651      	mov	r1, sl
 800254c:	00ca      	lsls	r2, r1, #3
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	4603      	mov	r3, r0
 8002554:	4642      	mov	r2, r8
 8002556:	189b      	adds	r3, r3, r2
 8002558:	66bb      	str	r3, [r7, #104]	; 0x68
 800255a:	464b      	mov	r3, r9
 800255c:	460a      	mov	r2, r1
 800255e:	eb42 0303 	adc.w	r3, r2, r3
 8002562:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
 800256e:	667a      	str	r2, [r7, #100]	; 0x64
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800257c:	4649      	mov	r1, r9
 800257e:	008b      	lsls	r3, r1, #2
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002586:	4641      	mov	r1, r8
 8002588:	008a      	lsls	r2, r1, #2
 800258a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800258e:	f7fd fe6f 	bl	8000270 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <UART_SetConfig+0x4e4>)
 8002598:	fba3 1302 	umull	r1, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2164      	movs	r1, #100	; 0x64
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	3332      	adds	r3, #50	; 0x32
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <UART_SetConfig+0x4e4>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4422      	add	r2, r4
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025c6:	46bd      	mov	sp, r7
 80025c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025cc:	51eb851f 	.word	0x51eb851f

080025d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80025de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e2:	2b84      	cmp	r3, #132	; 0x84
 80025e4:	d005      	beq.n	80025f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80025e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	3303      	adds	r3, #3
 80025f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002606:	f3ef 8305 	mrs	r3, IPSR
 800260a:	607b      	str	r3, [r7, #4]
  return(result);
 800260c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002628:	f000 fb9a 	bl	8002d60 <vTaskStartScheduler>
  
  return osOK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	bd80      	pop	{r7, pc}

08002632 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002636:	f7ff ffe3 	bl	8002600 <inHandlerMode>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002640:	f000 fcb2 	bl	8002fa8 <xTaskGetTickCountFromISR>
 8002644:	4603      	mov	r3, r0
 8002646:	e002      	b.n	800264e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002648:	f000 fc9e 	bl	8002f88 <xTaskGetTickCount>
 800264c:	4603      	mov	r3, r0
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}

08002652 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002654:	b089      	sub	sp, #36	; 0x24
 8002656:	af04      	add	r7, sp, #16
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <osThreadCreate+0x54>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01c      	beq.n	80026a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685c      	ldr	r4, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691e      	ldr	r6, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ffa6 	bl	80025d0 <makeFreeRtosPriority>
 8002684:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800268e:	9202      	str	r2, [sp, #8]
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	9100      	str	r1, [sp, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4632      	mov	r2, r6
 8002698:	4629      	mov	r1, r5
 800269a:	4620      	mov	r0, r4
 800269c:	f000 f903 	bl	80028a6 <xTaskCreateStatic>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e01c      	b.n	80026e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685c      	ldr	r4, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff88 	bl	80025d0 <makeFreeRtosPriority>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	9200      	str	r2, [sp, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	4632      	mov	r2, r6
 80026ce:	4629      	mov	r1, r5
 80026d0:	4620      	mov	r0, r4
 80026d2:	f000 f945 	bl	8002960 <xTaskCreate>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d001      	beq.n	80026e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <osDelay+0x16>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	e000      	b.n	8002702 <osDelay+0x18>
 8002700:	2301      	movs	r3, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f000 faf8 	bl	8002cf8 <vTaskDelay>
  
  return osOK;
 8002708:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <osDelayUntil+0x18>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	e000      	b.n	800272c <osDelayUntil+0x1a>
 800272a:	2301      	movs	r3, #1
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fa64 	bl	8002bfc <vTaskDelayUntil>
  
  return osOK;
 8002734:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0208 	add.w	r2, r3, #8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f04f 32ff 	mov.w	r2, #4294967295
 8002756:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0208 	add.w	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 0208 	add.w	r2, r3, #8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f6:	d103      	bne.n	8002800 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	e00c      	b.n	800281a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3308      	adds	r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e002      	b.n	800280e <vListInsert+0x2e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d2f6      	bcs.n	8002808 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6852      	ldr	r2, [r2, #4]
 8002872:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d103      	bne.n	8002886 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b08e      	sub	sp, #56	; 0x38
 80028aa:	af04      	add	r7, sp, #16
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <xTaskCreateStatic+0x46>
	__asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	61fb      	str	r3, [r7, #28]
}
 80028e8:	bf00      	nop
 80028ea:	e7fe      	b.n	80028ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028ec:	23a0      	movs	r3, #160	; 0xa0
 80028ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2ba0      	cmp	r3, #160	; 0xa0
 80028f4:	d00a      	beq.n	800290c <xTaskCreateStatic+0x66>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61bb      	str	r3, [r7, #24]
}
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800290c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01e      	beq.n	8002952 <xTaskCreateStatic+0xac>
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01b      	beq.n	8002952 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002922:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	2202      	movs	r2, #2
 8002928:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800292c:	2300      	movs	r3, #0
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f851 	bl	80029ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800294a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800294c:	f000 f8ec 	bl	8002b28 <prvAddNewTaskToReadyList>
 8002950:	e001      	b.n	8002956 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002956:	697b      	ldr	r3, [r7, #20]
	}
 8002958:	4618      	mov	r0, r3
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af04      	add	r7, sp, #16
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f000 ffcf 	bl	8003918 <pvPortMalloc>
 800297a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002982:	20a0      	movs	r0, #160	; 0xa0
 8002984:	f000 ffc8 	bl	8003918 <pvPortMalloc>
 8002988:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
 8002996:	e005      	b.n	80029a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f001 f889 	bl	8003ab0 <vPortFree>
 800299e:	e001      	b.n	80029a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d017      	beq.n	80029da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f80f 	bl	80029ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029ce:	69f8      	ldr	r0, [r7, #28]
 80029d0:	f000 f8aa 	bl	8002b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029d4:	2301      	movs	r3, #1
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	e002      	b.n	80029e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029e0:	69bb      	ldr	r3, [r7, #24]
	}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a04:	3b01      	subs	r3, #1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	617b      	str	r3, [r7, #20]
}
 8002a30:	bf00      	nop
 8002a32:	e7fe      	b.n	8002a32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01f      	beq.n	8002a7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e012      	b.n	8002a66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	7819      	ldrb	r1, [r3, #0]
 8002a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3334      	adds	r3, #52	; 0x34
 8002a50:	460a      	mov	r2, r1
 8002a52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3301      	adds	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b0f      	cmp	r3, #15
 8002a6a:	d9e9      	bls.n	8002a40 <prvInitialiseNewTask+0x54>
 8002a6c:	e000      	b.n	8002a70 <prvInitialiseNewTask+0x84>
			{
				break;
 8002a6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a78:	e003      	b.n	8002a82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	d901      	bls.n	8002a8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a88:	2306      	movs	r3, #6
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fe6b 	bl	800277e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	3318      	adds	r3, #24
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fe66 	bl	800277e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	f1c3 0207 	rsb	r2, r3, #7
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	334c      	adds	r3, #76	; 0x4c
 8002adc:	224c      	movs	r2, #76	; 0x4c
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 faf9 	bl	80040d8 <memset>
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <prvInitialiseNewTask+0x130>)
 8002aea:	651a      	str	r2, [r3, #80]	; 0x50
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <prvInitialiseNewTask+0x134>)
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <prvInitialiseNewTask+0x138>)
 8002af6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	69b8      	ldr	r0, [r7, #24]
 8002afe:	f000 fcbf 	bl	8003480 <pxPortInitialiseStack>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b14:	bf00      	nop
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000411c 	.word	0x2000411c
 8002b20:	20004184 	.word	0x20004184
 8002b24:	200041ec 	.word	0x200041ec

08002b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b30:	f000 fdd0 	bl	80036d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <prvAddNewTaskToReadyList+0xb8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <prvAddNewTaskToReadyList+0xb8>)
 8002b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b46:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <prvAddNewTaskToReadyList+0xb8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d110      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b54:	f000 fb6c 	bl	8003230 <prvInitialiseTaskLists>
 8002b58:	e00d      	b.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <prvAddNewTaskToReadyList+0xc0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d802      	bhi.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <prvAddNewTaskToReadyList+0xc4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <prvAddNewTaskToReadyList+0xc4>)
 8002b7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	2201      	movs	r2, #1
 8002b86:	409a      	lsls	r2, r3
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <prvAddNewTaskToReadyList+0xcc>)
 8002ba0:	441a      	add	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f7ff fdf5 	bl	8002798 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bae:	f000 fdc1 	bl	8003734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <prvAddNewTaskToReadyList+0xc0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00e      	beq.n	8002bd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <prvAddNewTaskToReadyList+0xbc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d207      	bcs.n	8002bd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <prvAddNewTaskToReadyList+0xd0>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200004c8 	.word	0x200004c8
 8002be4:	200003c8 	.word	0x200003c8
 8002be8:	200004d4 	.word	0x200004d4
 8002bec:	200004e4 	.word	0x200004e4
 8002bf0:	200004d0 	.word	0x200004d0
 8002bf4:	200003cc 	.word	0x200003cc
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <vTaskDelayUntil+0x2a>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	617b      	str	r3, [r7, #20]
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <vTaskDelayUntil+0x46>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	613b      	str	r3, [r7, #16]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8002c42:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <vTaskDelayUntil+0xf0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <vTaskDelayUntil+0x64>
	__asm volatile
 8002c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	60fb      	str	r3, [r7, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	e7fe      	b.n	8002c5e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8002c60:	f000 f8e8 	bl	8002e34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <vTaskDelayUntil+0xf4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a3a      	ldr	r2, [r7, #32]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d20b      	bcs.n	8002c96 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d211      	bcs.n	8002cac <vTaskDelayUntil+0xb0>
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d90d      	bls.n	8002cac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e00a      	b.n	8002cac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d303      	bcc.n	8002ca8 <vTaskDelayUntil+0xac>
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d901      	bls.n	8002cac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d006      	beq.n	8002cc6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fb77 	bl	80033b4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002cc6:	f000 f8c3 	bl	8002e50 <xTaskResumeAll>
 8002cca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <vTaskDelayUntil+0xf8>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ce2:	bf00      	nop
 8002ce4:	3728      	adds	r7, #40	; 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200004f0 	.word	0x200004f0
 8002cf0:	200004cc 	.word	0x200004cc
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d017      	beq.n	8002d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <vTaskDelay+0x60>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <vTaskDelay+0x30>
	__asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	60bb      	str	r3, [r7, #8]
}
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d28:	f000 f884 	bl	8002e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fb40 	bl	80033b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d34:	f000 f88c 	bl	8002e50 <xTaskResumeAll>
 8002d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <vTaskDelay+0x64>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200004f0 	.word	0x200004f0
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d6e:	463a      	mov	r2, r7
 8002d70:	1d39      	adds	r1, r7, #4
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fbf8 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	9202      	str	r2, [sp, #8]
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	2300      	movs	r3, #0
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	4921      	ldr	r1, [pc, #132]	; (8002e14 <vTaskStartScheduler+0xb4>)
 8002d90:	4821      	ldr	r0, [pc, #132]	; (8002e18 <vTaskStartScheduler+0xb8>)
 8002d92:	f7ff fd88 	bl	80028a6 <xTaskCreateStatic>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <vTaskStartScheduler+0xbc>)
 8002d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <vTaskStartScheduler+0xbc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002da4:	2301      	movs	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e001      	b.n	8002dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d11b      	bne.n	8002dec <vTaskStartScheduler+0x8c>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	613b      	str	r3, [r7, #16]
}
 8002dc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <vTaskStartScheduler+0xc0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	334c      	adds	r3, #76	; 0x4c
 8002dce:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <vTaskStartScheduler+0xc4>)
 8002dd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <vTaskStartScheduler+0xc8>)
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <vTaskStartScheduler+0xcc>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <vTaskStartScheduler+0xd0>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002de6:	f000 fbd3 	bl	8003590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dea:	e00e      	b.n	8002e0a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d10a      	bne.n	8002e0a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <vTaskStartScheduler+0xa8>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08004d44 	.word	0x08004d44
 8002e18:	08003201 	.word	0x08003201
 8002e1c:	200004ec 	.word	0x200004ec
 8002e20:	200003c8 	.word	0x200003c8
 8002e24:	20000068 	.word	0x20000068
 8002e28:	200004e8 	.word	0x200004e8
 8002e2c:	200004d4 	.word	0x200004d4
 8002e30:	200004cc 	.word	0x200004cc

08002e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <vTaskSuspendAll+0x18>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	4a03      	ldr	r2, [pc, #12]	; (8002e4c <vTaskSuspendAll+0x18>)
 8002e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	200004f0 	.word	0x200004f0

08002e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <xTaskResumeAll+0x114>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	603b      	str	r3, [r7, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	e7fe      	b.n	8002e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e7c:	f000 fc2a 	bl	80036d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e80:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <xTaskResumeAll+0x114>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	4a37      	ldr	r2, [pc, #220]	; (8002f64 <xTaskResumeAll+0x114>)
 8002e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <xTaskResumeAll+0x114>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d161      	bne.n	8002f56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <xTaskResumeAll+0x118>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d05d      	beq.n	8002f56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e9a:	e02e      	b.n	8002efa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <xTaskResumeAll+0x11c>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fcd2 	bl	8002852 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fccd 	bl	8002852 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <xTaskResumeAll+0x120>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <xTaskResumeAll+0x120>)
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <xTaskResumeAll+0x124>)
 8002ed8:	441a      	add	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f7ff fc59 	bl	8002798 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <xTaskResumeAll+0x128>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ef4:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <xTaskResumeAll+0x12c>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <xTaskResumeAll+0x11c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1cc      	bne.n	8002e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f08:	f000 fa34 	bl	8003374 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <xTaskResumeAll+0x130>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f18:	f000 f858 	bl	8002fcc <xTaskIncrementTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <xTaskResumeAll+0x12c>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f1      	bne.n	8002f18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <xTaskResumeAll+0x130>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <xTaskResumeAll+0x12c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f46:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <xTaskResumeAll+0x134>)
 8002f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f56:	f000 fbed 	bl	8003734 <vPortExitCritical>

	return xAlreadyYielded;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200004f0 	.word	0x200004f0
 8002f68:	200004c8 	.word	0x200004c8
 8002f6c:	20000488 	.word	0x20000488
 8002f70:	200004d0 	.word	0x200004d0
 8002f74:	200003cc 	.word	0x200003cc
 8002f78:	200003c8 	.word	0x200003c8
 8002f7c:	200004dc 	.word	0x200004dc
 8002f80:	200004d8 	.word	0x200004d8
 8002f84:	e000ed04 	.word	0xe000ed04

08002f88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <xTaskGetTickCount+0x1c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f94:	687b      	ldr	r3, [r7, #4]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	200004cc 	.word	0x200004cc

08002fa8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fae:	f000 fc73 	bl	8003898 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <xTaskGetTickCountFromISR+0x20>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fbc:	683b      	ldr	r3, [r7, #0]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200004cc 	.word	0x200004cc

08002fcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <xTaskIncrementTick+0x144>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 808e 	bne.w	80030fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <xTaskIncrementTick+0x148>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	; (8003114 <xTaskIncrementTick+0x148>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d120      	bne.n	8003036 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ff4:	4b48      	ldr	r3, [pc, #288]	; (8003118 <xTaskIncrementTick+0x14c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <xTaskIncrementTick+0x48>
	__asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	603b      	str	r3, [r7, #0]
}
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <xTaskIncrementTick+0x46>
 8003014:	4b40      	ldr	r3, [pc, #256]	; (8003118 <xTaskIncrementTick+0x14c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b40      	ldr	r3, [pc, #256]	; (800311c <xTaskIncrementTick+0x150>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3e      	ldr	r2, [pc, #248]	; (8003118 <xTaskIncrementTick+0x14c>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4a3e      	ldr	r2, [pc, #248]	; (800311c <xTaskIncrementTick+0x150>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <xTaskIncrementTick+0x154>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	4a3c      	ldr	r2, [pc, #240]	; (8003120 <xTaskIncrementTick+0x154>)
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	f000 f99f 	bl	8003374 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003036:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <xTaskIncrementTick+0x158>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	429a      	cmp	r2, r3
 800303e:	d348      	bcc.n	80030d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003040:	4b35      	ldr	r3, [pc, #212]	; (8003118 <xTaskIncrementTick+0x14c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <xTaskIncrementTick+0x158>)
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	601a      	str	r2, [r3, #0]
					break;
 8003052:	e03e      	b.n	80030d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <xTaskIncrementTick+0x14c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	d203      	bcs.n	8003074 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <xTaskIncrementTick+0x158>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003072:	e02e      	b.n	80030d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3304      	adds	r3, #4
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fbea 	bl	8002852 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3318      	adds	r3, #24
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fbe1 	bl	8002852 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2201      	movs	r2, #1
 8003096:	409a      	lsls	r2, r3
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <xTaskIncrementTick+0x15c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <xTaskIncrementTick+0x15c>)
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4a1f      	ldr	r2, [pc, #124]	; (800312c <xTaskIncrementTick+0x160>)
 80030b0:	441a      	add	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7ff fb6d 	bl	8002798 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <xTaskIncrementTick+0x164>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d3b9      	bcc.n	8003040 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030cc:	2301      	movs	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d0:	e7b6      	b.n	8003040 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <xTaskIncrementTick+0x164>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4914      	ldr	r1, [pc, #80]	; (800312c <xTaskIncrementTick+0x160>)
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d901      	bls.n	80030ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <xTaskIncrementTick+0x168>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e004      	b.n	8003106 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <xTaskIncrementTick+0x16c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <xTaskIncrementTick+0x16c>)
 8003104:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003106:	697b      	ldr	r3, [r7, #20]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200004f0 	.word	0x200004f0
 8003114:	200004cc 	.word	0x200004cc
 8003118:	20000480 	.word	0x20000480
 800311c:	20000484 	.word	0x20000484
 8003120:	200004e0 	.word	0x200004e0
 8003124:	200004e8 	.word	0x200004e8
 8003128:	200004d0 	.word	0x200004d0
 800312c:	200003cc 	.word	0x200003cc
 8003130:	200003c8 	.word	0x200003c8
 8003134:	200004dc 	.word	0x200004dc
 8003138:	200004d8 	.word	0x200004d8

0800313c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003142:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <vTaskSwitchContext+0xac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800314a:	4b28      	ldr	r3, [pc, #160]	; (80031ec <vTaskSwitchContext+0xb0>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003150:	e044      	b.n	80031dc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003152:	4b26      	ldr	r3, [pc, #152]	; (80031ec <vTaskSwitchContext+0xb0>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <vTaskSwitchContext+0xb4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003166:	7afb      	ldrb	r3, [r7, #11]
 8003168:	f1c3 031f 	rsb	r3, r3, #31
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	4921      	ldr	r1, [pc, #132]	; (80031f4 <vTaskSwitchContext+0xb8>)
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
}
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <vTaskSwitchContext+0x5a>
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <vTaskSwitchContext+0xb8>)
 80031a4:	4413      	add	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	3308      	adds	r3, #8
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d104      	bne.n	80031c8 <vTaskSwitchContext+0x8c>
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <vTaskSwitchContext+0xbc>)
 80031d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <vTaskSwitchContext+0xbc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	334c      	adds	r3, #76	; 0x4c
 80031d8:	4a08      	ldr	r2, [pc, #32]	; (80031fc <vTaskSwitchContext+0xc0>)
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	200004f0 	.word	0x200004f0
 80031ec:	200004dc 	.word	0x200004dc
 80031f0:	200004d0 	.word	0x200004d0
 80031f4:	200003cc 	.word	0x200003cc
 80031f8:	200003c8 	.word	0x200003c8
 80031fc:	20000068 	.word	0x20000068

08003200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003208:	f000 f852 	bl	80032b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <prvIdleTask+0x28>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d9f9      	bls.n	8003208 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <prvIdleTask+0x2c>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003224:	e7f0      	b.n	8003208 <prvIdleTask+0x8>
 8003226:	bf00      	nop
 8003228:	200003cc 	.word	0x200003cc
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	e00c      	b.n	8003256 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <prvInitialiseTaskLists+0x60>)
 8003248:	4413      	add	r3, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fa77 	bl	800273e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3301      	adds	r3, #1
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b06      	cmp	r3, #6
 800325a:	d9ef      	bls.n	800323c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <prvInitialiseTaskLists+0x64>)
 800325e:	f7ff fa6e 	bl	800273e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003262:	480d      	ldr	r0, [pc, #52]	; (8003298 <prvInitialiseTaskLists+0x68>)
 8003264:	f7ff fa6b 	bl	800273e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <prvInitialiseTaskLists+0x6c>)
 800326a:	f7ff fa68 	bl	800273e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <prvInitialiseTaskLists+0x70>)
 8003270:	f7ff fa65 	bl	800273e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003274:	480b      	ldr	r0, [pc, #44]	; (80032a4 <prvInitialiseTaskLists+0x74>)
 8003276:	f7ff fa62 	bl	800273e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <prvInitialiseTaskLists+0x78>)
 800327c:	4a05      	ldr	r2, [pc, #20]	; (8003294 <prvInitialiseTaskLists+0x64>)
 800327e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvInitialiseTaskLists+0x7c>)
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <prvInitialiseTaskLists+0x68>)
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200003cc 	.word	0x200003cc
 8003294:	20000458 	.word	0x20000458
 8003298:	2000046c 	.word	0x2000046c
 800329c:	20000488 	.word	0x20000488
 80032a0:	2000049c 	.word	0x2000049c
 80032a4:	200004b4 	.word	0x200004b4
 80032a8:	20000480 	.word	0x20000480
 80032ac:	20000484 	.word	0x20000484

080032b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032b6:	e019      	b.n	80032ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032b8:	f000 fa0c 	bl	80036d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <prvCheckTasksWaitingTermination+0x50>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fac2 	bl	8002852 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <prvCheckTasksWaitingTermination+0x54>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <prvCheckTasksWaitingTermination+0x54>)
 80032d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <prvCheckTasksWaitingTermination+0x58>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3b01      	subs	r3, #1
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <prvCheckTasksWaitingTermination+0x58>)
 80032e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032e2:	f000 fa27 	bl	8003734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f810 	bl	800330c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <prvCheckTasksWaitingTermination+0x58>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e1      	bne.n	80032b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	2000049c 	.word	0x2000049c
 8003304:	200004c8 	.word	0x200004c8
 8003308:	200004b0 	.word	0x200004b0

0800330c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	334c      	adds	r3, #76	; 0x4c
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fef5 	bl	8004108 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003324:	2b00      	cmp	r3, #0
 8003326:	d108      	bne.n	800333a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fbbf 	bl	8003ab0 <vPortFree>
				vPortFree( pxTCB );
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fbbc 	bl	8003ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003338:	e018      	b.n	800336c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003340:	2b01      	cmp	r3, #1
 8003342:	d103      	bne.n	800334c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fbb3 	bl	8003ab0 <vPortFree>
	}
 800334a:	e00f      	b.n	800336c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003352:	2b02      	cmp	r3, #2
 8003354:	d00a      	beq.n	800336c <prvDeleteTCB+0x60>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	60fb      	str	r3, [r7, #12]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <prvDeleteTCB+0x5e>
	}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <prvResetNextTaskUnblockTime+0x38>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <prvResetNextTaskUnblockTime+0x3c>)
 8003386:	f04f 32ff 	mov.w	r2, #4294967295
 800338a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800338c:	e008      	b.n	80033a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <prvResetNextTaskUnblockTime+0x38>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <prvResetNextTaskUnblockTime+0x3c>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	20000480 	.word	0x20000480
 80033b0:	200004e8 	.word	0x200004e8

080033b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <prvAddCurrentTaskToDelayedList+0xb0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033c4:	4b28      	ldr	r3, [pc, #160]	; (8003468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fa41 	bl	8002852 <uxListRemove>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2201      	movs	r2, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <prvAddCurrentTaskToDelayedList+0xb8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4013      	ands	r3, r2
 80033ea:	4a20      	ldr	r2, [pc, #128]	; (800346c <prvAddCurrentTaskToDelayedList+0xb8>)
 80033ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d10a      	bne.n	800340c <prvAddCurrentTaskToDelayedList+0x58>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	481a      	ldr	r0, [pc, #104]	; (8003470 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003406:	f7ff f9c7 	bl	8002798 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800340a:	e026      	b.n	800345a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	429a      	cmp	r2, r3
 8003422:	d209      	bcs.n	8003438 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f7ff f9d5 	bl	80027e0 <vListInsert>
}
 8003436:	e010      	b.n	800345a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <prvAddCurrentTaskToDelayedList+0xc4>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3304      	adds	r3, #4
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f7ff f9cb 	bl	80027e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <prvAddCurrentTaskToDelayedList+0xc8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	d202      	bcs.n	800345a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200004cc 	.word	0x200004cc
 8003468:	200003c8 	.word	0x200003c8
 800346c:	200004d0 	.word	0x200004d0
 8003470:	200004b4 	.word	0x200004b4
 8003474:	20000484 	.word	0x20000484
 8003478:	20000480 	.word	0x20000480
 800347c:	200004e8 	.word	0x200004e8

08003480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b04      	subs	r3, #4
 8003490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3b04      	subs	r3, #4
 800349e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3b04      	subs	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034b0:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <pxPortInitialiseStack+0x64>)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b14      	subs	r3, #20
 80034ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b04      	subs	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f06f 0202 	mvn.w	r2, #2
 80034ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3b20      	subs	r3, #32
 80034d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	080034e9 	.word	0x080034e9

080034e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <prvTaskExitError+0x54>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d00a      	beq.n	8003512 <prvTaskExitError+0x2a>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	60fb      	str	r3, [r7, #12]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <prvTaskExitError+0x28>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	60bb      	str	r3, [r7, #8]
}
 8003524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003526:	bf00      	nop
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0fc      	beq.n	8003528 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	2000000c 	.word	0x2000000c

08003540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <pxCurrentTCBConst2>)
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	6808      	ldr	r0, [r1, #0]
 8003546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800354a:	f380 8809 	msr	PSP, r0
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8811 	msr	BASEPRI, r0
 800355a:	4770      	bx	lr
 800355c:	f3af 8000 	nop.w

08003560 <pxCurrentTCBConst2>:
 8003560:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop

08003568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003568:	4808      	ldr	r0, [pc, #32]	; (800358c <prvPortStartFirstTask+0x24>)
 800356a:	6800      	ldr	r0, [r0, #0]
 800356c:	6800      	ldr	r0, [r0, #0]
 800356e:	f380 8808 	msr	MSP, r0
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f380 8814 	msr	CONTROL, r0
 800357a:	b662      	cpsie	i
 800357c:	b661      	cpsie	f
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	df00      	svc	0
 8003588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800358a:	bf00      	nop
 800358c:	e000ed08 	.word	0xe000ed08

08003590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003596:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <xPortStartScheduler+0x120>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a46      	ldr	r2, [pc, #280]	; (80036b4 <xPortStartScheduler+0x124>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10a      	bne.n	80035b6 <xPortStartScheduler+0x26>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	613b      	str	r3, [r7, #16]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035b6:	4b3e      	ldr	r3, [pc, #248]	; (80036b0 <xPortStartScheduler+0x120>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a3f      	ldr	r2, [pc, #252]	; (80036b8 <xPortStartScheduler+0x128>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10a      	bne.n	80035d6 <xPortStartScheduler+0x46>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	60fb      	str	r3, [r7, #12]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035d6:	4b39      	ldr	r3, [pc, #228]	; (80036bc <xPortStartScheduler+0x12c>)
 80035d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	22ff      	movs	r2, #255	; 0xff
 80035e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <xPortStartScheduler+0x130>)
 80035fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <xPortStartScheduler+0x134>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003604:	e009      	b.n	800361a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <xPortStartScheduler+0x134>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3b01      	subs	r3, #1
 800360c:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <xPortStartScheduler+0x134>)
 800360e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b80      	cmp	r3, #128	; 0x80
 8003624:	d0ef      	beq.n	8003606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003626:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <xPortStartScheduler+0x134>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1c3 0307 	rsb	r3, r3, #7
 800362e:	2b04      	cmp	r3, #4
 8003630:	d00a      	beq.n	8003648 <xPortStartScheduler+0xb8>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60bb      	str	r3, [r7, #8]
}
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <xPortStartScheduler+0x134>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <xPortStartScheduler+0x134>)
 8003650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <xPortStartScheduler+0x134>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365a:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <xPortStartScheduler+0x134>)
 800365c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <xPortStartScheduler+0x138>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <xPortStartScheduler+0x138>)
 800366c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <xPortStartScheduler+0x138>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <xPortStartScheduler+0x138>)
 8003678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800367c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800367e:	f000 f8dd 	bl	800383c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <xPortStartScheduler+0x13c>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003688:	f000 f8fc 	bl	8003884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800368c:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <xPortStartScheduler+0x140>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0f      	ldr	r2, [pc, #60]	; (80036d0 <xPortStartScheduler+0x140>)
 8003692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003698:	f7ff ff66 	bl	8003568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800369c:	f7ff fd4e 	bl	800313c <vTaskSwitchContext>
	prvTaskExitError();
 80036a0:	f7ff ff22 	bl	80034e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000ed00 	.word	0xe000ed00
 80036b4:	410fc271 	.word	0x410fc271
 80036b8:	410fc270 	.word	0x410fc270
 80036bc:	e000e400 	.word	0xe000e400
 80036c0:	200004f4 	.word	0x200004f4
 80036c4:	200004f8 	.word	0x200004f8
 80036c8:	e000ed20 	.word	0xe000ed20
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	e000ef34 	.word	0xe000ef34

080036d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	607b      	str	r3, [r7, #4]
}
 80036ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036ee:	4b0f      	ldr	r3, [pc, #60]	; (800372c <vPortEnterCritical+0x58>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <vPortEnterCritical+0x58>)
 80036f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <vPortEnterCritical+0x58>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10f      	bne.n	8003720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <vPortEnterCritical+0x5c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <vPortEnterCritical+0x4c>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	603b      	str	r3, [r7, #0]
}
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <vPortEnterCritical+0x4a>
	}
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	2000000c 	.word	0x2000000c
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <vPortExitCritical+0x50>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <vPortExitCritical+0x24>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	607b      	str	r3, [r7, #4]
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <vPortExitCritical+0x50>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3b01      	subs	r3, #1
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <vPortExitCritical+0x50>)
 8003760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <vPortExitCritical+0x50>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <vPortExitCritical+0x42>
 800376a:	2300      	movs	r3, #0
 800376c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c
	...

08003790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003790:	f3ef 8009 	mrs	r0, PSP
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <pxCurrentTCBConst>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f01e 0f10 	tst.w	lr, #16
 80037a0:	bf08      	it	eq
 80037a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037aa:	6010      	str	r0, [r2, #0]
 80037ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037b4:	f380 8811 	msr	BASEPRI, r0
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f7ff fcbc 	bl	800313c <vTaskSwitchContext>
 80037c4:	f04f 0000 	mov.w	r0, #0
 80037c8:	f380 8811 	msr	BASEPRI, r0
 80037cc:	bc09      	pop	{r0, r3}
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	6808      	ldr	r0, [r1, #0]
 80037d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d6:	f01e 0f10 	tst.w	lr, #16
 80037da:	bf08      	it	eq
 80037dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037e0:	f380 8809 	msr	PSP, r0
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	f3af 8000 	nop.w

080037f0 <pxCurrentTCBConst>:
 80037f0:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop

080037f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	607b      	str	r3, [r7, #4]
}
 8003810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003812:	f7ff fbdb 	bl	8002fcc <xTaskIncrementTick>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <SysTick_Handler+0x40>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f383 8811 	msr	BASEPRI, r3
}
 800382e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <vPortSetupTimerInterrupt+0x34>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <vPortSetupTimerInterrupt+0x38>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <vPortSetupTimerInterrupt+0x3c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <vPortSetupTimerInterrupt+0x40>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <vPortSetupTimerInterrupt+0x44>)
 800385a:	3b01      	subs	r3, #1
 800385c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <vPortSetupTimerInterrupt+0x34>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010
 8003874:	e000e018 	.word	0xe000e018
 8003878:	20000000 	.word	0x20000000
 800387c:	10624dd3 	.word	0x10624dd3
 8003880:	e000e014 	.word	0xe000e014

08003884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003894 <vPortEnableVFP+0x10>
 8003888:	6801      	ldr	r1, [r0, #0]
 800388a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800388e:	6001      	str	r1, [r0, #0]
 8003890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003892:	bf00      	nop
 8003894:	e000ed88 	.word	0xe000ed88

08003898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800389e:	f3ef 8305 	mrs	r3, IPSR
 80038a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d914      	bls.n	80038d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80038aa:	4a17      	ldr	r2, [pc, #92]	; (8003908 <vPortValidateInterruptPriority+0x70>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <vPortValidateInterruptPriority+0x74>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	7afa      	ldrb	r2, [r7, #11]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d20a      	bcs.n	80038d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	607b      	str	r3, [r7, #4]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <vPortValidateInterruptPriority+0x78>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <vPortValidateInterruptPriority+0x7c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d90a      	bls.n	80038fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	603b      	str	r3, [r7, #0]
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <vPortValidateInterruptPriority+0x60>
	}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000e3f0 	.word	0xe000e3f0
 800390c:	200004f4 	.word	0x200004f4
 8003910:	e000ed0c 	.word	0xe000ed0c
 8003914:	200004f8 	.word	0x200004f8

08003918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003924:	f7ff fa86 	bl	8002e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003928:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <pvPortMalloc+0x180>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003930:	f000 f920 	bl	8003b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003934:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <pvPortMalloc+0x184>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 8093 	bne.w	8003a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01d      	beq.n	8003984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003948:	2208      	movs	r2, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	2b00      	cmp	r3, #0
 8003958:	d014      	beq.n	8003984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f023 0307 	bic.w	r3, r3, #7
 8003960:	3308      	adds	r3, #8
 8003962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <pvPortMalloc+0x6c>
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	617b      	str	r3, [r7, #20]
}
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d06e      	beq.n	8003a68 <pvPortMalloc+0x150>
 800398a:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <pvPortMalloc+0x188>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d869      	bhi.n	8003a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003994:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <pvPortMalloc+0x18c>)
 8003996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003998:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <pvPortMalloc+0x18c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800399e:	e004      	b.n	80039aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d903      	bls.n	80039bc <pvPortMalloc+0xa4>
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f1      	bne.n	80039a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <pvPortMalloc+0x180>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d050      	beq.n	8003a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2208      	movs	r2, #8
 80039cc:	4413      	add	r3, r2
 80039ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	2308      	movs	r3, #8
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d91f      	bls.n	8003a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <pvPortMalloc+0xf8>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	613b      	str	r3, [r7, #16]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a22:	69b8      	ldr	r0, [r7, #24]
 8003a24:	f000 f908 	bl	8003c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <pvPortMalloc+0x190>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d203      	bcs.n	8003a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <pvPortMalloc+0x190>)
 8003a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <pvPortMalloc+0x184>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <pvPortMalloc+0x194>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a11      	ldr	r2, [pc, #68]	; (8003aac <pvPortMalloc+0x194>)
 8003a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a68:	f7ff f9f2 	bl	8002e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <pvPortMalloc+0x174>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60fb      	str	r3, [r7, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <pvPortMalloc+0x172>
	return pvReturn;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20004104 	.word	0x20004104
 8003a9c:	20004118 	.word	0x20004118
 8003aa0:	20004108 	.word	0x20004108
 8003aa4:	200040fc 	.word	0x200040fc
 8003aa8:	2000410c 	.word	0x2000410c
 8003aac:	20004110 	.word	0x20004110

08003ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04d      	beq.n	8003b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	425b      	negs	r3, r3
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <vPortFree+0xb8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <vPortFree+0x44>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60fb      	str	r3, [r7, #12]
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <vPortFree+0x62>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	60bb      	str	r3, [r7, #8]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <vPortFree+0xb8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01e      	beq.n	8003b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11a      	bne.n	8003b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <vPortFree+0xb8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b38:	f7ff f97c 	bl	8002e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <vPortFree+0xbc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <vPortFree+0xbc>)
 8003b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b4a:	6938      	ldr	r0, [r7, #16]
 8003b4c:	f000 f874 	bl	8003c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <vPortFree+0xc0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a06      	ldr	r2, [pc, #24]	; (8003b70 <vPortFree+0xc0>)
 8003b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b5a:	f7ff f979 	bl	8002e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20004118 	.word	0x20004118
 8003b6c:	20004108 	.word	0x20004108
 8003b70:	20004114 	.word	0x20004114

08003b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <prvHeapInit+0xac>)
 8003b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3307      	adds	r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <prvHeapInit+0xac>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <prvHeapInit+0xb0>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <prvHeapInit+0xb0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0307 	bic.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <prvHeapInit+0xb4>)
 8003bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <prvHeapInit+0xb4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <prvHeapInit+0xb4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	1ad2      	subs	r2, r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <prvHeapInit+0xb4>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <prvHeapInit+0xb8>)
 8003c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <prvHeapInit+0xbc>)
 8003c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <prvHeapInit+0xc0>)
 8003c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	200004fc 	.word	0x200004fc
 8003c24:	200040fc 	.word	0x200040fc
 8003c28:	20004104 	.word	0x20004104
 8003c2c:	2000410c 	.word	0x2000410c
 8003c30:	20004108 	.word	0x20004108
 8003c34:	20004118 	.word	0x20004118

08003c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <prvInsertBlockIntoFreeList+0xac>)
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e002      	b.n	8003c4c <prvInsertBlockIntoFreeList+0x14>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d8f7      	bhi.n	8003c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d108      	bne.n	8003c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	441a      	add	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	441a      	add	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d118      	bne.n	8003cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d00d      	beq.n	8003cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e008      	b.n	8003cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e003      	b.n	8003cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d002      	beq.n	8003cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	200040fc 	.word	0x200040fc
 8003ce8:	20004104 	.word	0x20004104

08003cec <std>:
 8003cec:	2300      	movs	r3, #0
 8003cee:	b510      	push	{r4, lr}
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8003cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cfa:	6083      	str	r3, [r0, #8]
 8003cfc:	8181      	strh	r1, [r0, #12]
 8003cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8003d00:	81c2      	strh	r2, [r0, #14]
 8003d02:	6183      	str	r3, [r0, #24]
 8003d04:	4619      	mov	r1, r3
 8003d06:	2208      	movs	r2, #8
 8003d08:	305c      	adds	r0, #92	; 0x5c
 8003d0a:	f000 f9e5 	bl	80040d8 <memset>
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <std+0x38>)
 8003d10:	6263      	str	r3, [r4, #36]	; 0x24
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <std+0x3c>)
 8003d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <std+0x40>)
 8003d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <std+0x44>)
 8003d1c:	6224      	str	r4, [r4, #32]
 8003d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	bf00      	nop
 8003d24:	08003f29 	.word	0x08003f29
 8003d28:	08003f4b 	.word	0x08003f4b
 8003d2c:	08003f83 	.word	0x08003f83
 8003d30:	08003fa7 	.word	0x08003fa7

08003d34 <stdio_exit_handler>:
 8003d34:	4a02      	ldr	r2, [pc, #8]	; (8003d40 <stdio_exit_handler+0xc>)
 8003d36:	4903      	ldr	r1, [pc, #12]	; (8003d44 <stdio_exit_handler+0x10>)
 8003d38:	4803      	ldr	r0, [pc, #12]	; (8003d48 <stdio_exit_handler+0x14>)
 8003d3a:	f000 b869 	b.w	8003e10 <_fwalk_sglue>
 8003d3e:	bf00      	nop
 8003d40:	20000010 	.word	0x20000010
 8003d44:	08004b1d 	.word	0x08004b1d
 8003d48:	2000001c 	.word	0x2000001c

08003d4c <cleanup_stdio>:
 8003d4c:	6841      	ldr	r1, [r0, #4]
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <cleanup_stdio+0x34>)
 8003d50:	4299      	cmp	r1, r3
 8003d52:	b510      	push	{r4, lr}
 8003d54:	4604      	mov	r4, r0
 8003d56:	d001      	beq.n	8003d5c <cleanup_stdio+0x10>
 8003d58:	f000 fee0 	bl	8004b1c <_fflush_r>
 8003d5c:	68a1      	ldr	r1, [r4, #8]
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <cleanup_stdio+0x38>)
 8003d60:	4299      	cmp	r1, r3
 8003d62:	d002      	beq.n	8003d6a <cleanup_stdio+0x1e>
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 fed9 	bl	8004b1c <_fflush_r>
 8003d6a:	68e1      	ldr	r1, [r4, #12]
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <cleanup_stdio+0x3c>)
 8003d6e:	4299      	cmp	r1, r3
 8003d70:	d004      	beq.n	8003d7c <cleanup_stdio+0x30>
 8003d72:	4620      	mov	r0, r4
 8003d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d78:	f000 bed0 	b.w	8004b1c <_fflush_r>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	bf00      	nop
 8003d80:	2000411c 	.word	0x2000411c
 8003d84:	20004184 	.word	0x20004184
 8003d88:	200041ec 	.word	0x200041ec

08003d8c <global_stdio_init.part.0>:
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <global_stdio_init.part.0+0x30>)
 8003d90:	4c0b      	ldr	r4, [pc, #44]	; (8003dc0 <global_stdio_init.part.0+0x34>)
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <global_stdio_init.part.0+0x38>)
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	4620      	mov	r0, r4
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	f7ff ffa6 	bl	8003cec <std>
 8003da0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003da4:	2201      	movs	r2, #1
 8003da6:	2109      	movs	r1, #9
 8003da8:	f7ff ffa0 	bl	8003cec <std>
 8003dac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003db0:	2202      	movs	r2, #2
 8003db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db6:	2112      	movs	r1, #18
 8003db8:	f7ff bf98 	b.w	8003cec <std>
 8003dbc:	20004254 	.word	0x20004254
 8003dc0:	2000411c 	.word	0x2000411c
 8003dc4:	08003d35 	.word	0x08003d35

08003dc8 <__sfp_lock_acquire>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <__sfp_lock_acquire+0x8>)
 8003dca:	f000 ba53 	b.w	8004274 <__retarget_lock_acquire_recursive>
 8003dce:	bf00      	nop
 8003dd0:	2000425d 	.word	0x2000425d

08003dd4 <__sfp_lock_release>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__sfp_lock_release+0x8>)
 8003dd6:	f000 ba4e 	b.w	8004276 <__retarget_lock_release_recursive>
 8003dda:	bf00      	nop
 8003ddc:	2000425d 	.word	0x2000425d

08003de0 <__sinit>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	4604      	mov	r4, r0
 8003de4:	f7ff fff0 	bl	8003dc8 <__sfp_lock_acquire>
 8003de8:	6a23      	ldr	r3, [r4, #32]
 8003dea:	b11b      	cbz	r3, 8003df4 <__sinit+0x14>
 8003dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003df0:	f7ff bff0 	b.w	8003dd4 <__sfp_lock_release>
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <__sinit+0x28>)
 8003df6:	6223      	str	r3, [r4, #32]
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <__sinit+0x2c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f5      	bne.n	8003dec <__sinit+0xc>
 8003e00:	f7ff ffc4 	bl	8003d8c <global_stdio_init.part.0>
 8003e04:	e7f2      	b.n	8003dec <__sinit+0xc>
 8003e06:	bf00      	nop
 8003e08:	08003d4d 	.word	0x08003d4d
 8003e0c:	20004254 	.word	0x20004254

08003e10 <_fwalk_sglue>:
 8003e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e14:	4607      	mov	r7, r0
 8003e16:	4688      	mov	r8, r1
 8003e18:	4614      	mov	r4, r2
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e20:	f1b9 0901 	subs.w	r9, r9, #1
 8003e24:	d505      	bpl.n	8003e32 <_fwalk_sglue+0x22>
 8003e26:	6824      	ldr	r4, [r4, #0]
 8003e28:	2c00      	cmp	r4, #0
 8003e2a:	d1f7      	bne.n	8003e1c <_fwalk_sglue+0xc>
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e32:	89ab      	ldrh	r3, [r5, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d907      	bls.n	8003e48 <_fwalk_sglue+0x38>
 8003e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	d003      	beq.n	8003e48 <_fwalk_sglue+0x38>
 8003e40:	4629      	mov	r1, r5
 8003e42:	4638      	mov	r0, r7
 8003e44:	47c0      	blx	r8
 8003e46:	4306      	orrs	r6, r0
 8003e48:	3568      	adds	r5, #104	; 0x68
 8003e4a:	e7e9      	b.n	8003e20 <_fwalk_sglue+0x10>

08003e4c <iprintf>:
 8003e4c:	b40f      	push	{r0, r1, r2, r3}
 8003e4e:	b507      	push	{r0, r1, r2, lr}
 8003e50:	4906      	ldr	r1, [pc, #24]	; (8003e6c <iprintf+0x20>)
 8003e52:	ab04      	add	r3, sp, #16
 8003e54:	6808      	ldr	r0, [r1, #0]
 8003e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e5a:	6881      	ldr	r1, [r0, #8]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	f000 fb2d 	bl	80044bc <_vfiprintf_r>
 8003e62:	b003      	add	sp, #12
 8003e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e68:	b004      	add	sp, #16
 8003e6a:	4770      	bx	lr
 8003e6c:	20000068 	.word	0x20000068

08003e70 <_puts_r>:
 8003e70:	6a03      	ldr	r3, [r0, #32]
 8003e72:	b570      	push	{r4, r5, r6, lr}
 8003e74:	6884      	ldr	r4, [r0, #8]
 8003e76:	4605      	mov	r5, r0
 8003e78:	460e      	mov	r6, r1
 8003e7a:	b90b      	cbnz	r3, 8003e80 <_puts_r+0x10>
 8003e7c:	f7ff ffb0 	bl	8003de0 <__sinit>
 8003e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e82:	07db      	lsls	r3, r3, #31
 8003e84:	d405      	bmi.n	8003e92 <_puts_r+0x22>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	0598      	lsls	r0, r3, #22
 8003e8a:	d402      	bmi.n	8003e92 <_puts_r+0x22>
 8003e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8e:	f000 f9f1 	bl	8004274 <__retarget_lock_acquire_recursive>
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	0719      	lsls	r1, r3, #28
 8003e96:	d513      	bpl.n	8003ec0 <_puts_r+0x50>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	b18b      	cbz	r3, 8003ec0 <_puts_r+0x50>
 8003e9c:	3e01      	subs	r6, #1
 8003e9e:	68a3      	ldr	r3, [r4, #8]
 8003ea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	60a3      	str	r3, [r4, #8]
 8003ea8:	b9e9      	cbnz	r1, 8003ee6 <_puts_r+0x76>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da2e      	bge.n	8003f0c <_puts_r+0x9c>
 8003eae:	4622      	mov	r2, r4
 8003eb0:	210a      	movs	r1, #10
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f000 f87b 	bl	8003fae <__swbuf_r>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d007      	beq.n	8003ecc <_puts_r+0x5c>
 8003ebc:	250a      	movs	r5, #10
 8003ebe:	e007      	b.n	8003ed0 <_puts_r+0x60>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 f8b0 	bl	8004028 <__swsetup_r>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d0e7      	beq.n	8003e9c <_puts_r+0x2c>
 8003ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8003ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed2:	07da      	lsls	r2, r3, #31
 8003ed4:	d405      	bmi.n	8003ee2 <_puts_r+0x72>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	059b      	lsls	r3, r3, #22
 8003eda:	d402      	bmi.n	8003ee2 <_puts_r+0x72>
 8003edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ede:	f000 f9ca 	bl	8004276 <__retarget_lock_release_recursive>
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da04      	bge.n	8003ef4 <_puts_r+0x84>
 8003eea:	69a2      	ldr	r2, [r4, #24]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	dc06      	bgt.n	8003efe <_puts_r+0x8e>
 8003ef0:	290a      	cmp	r1, #10
 8003ef2:	d004      	beq.n	8003efe <_puts_r+0x8e>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	6022      	str	r2, [r4, #0]
 8003efa:	7019      	strb	r1, [r3, #0]
 8003efc:	e7cf      	b.n	8003e9e <_puts_r+0x2e>
 8003efe:	4622      	mov	r2, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f854 	bl	8003fae <__swbuf_r>
 8003f06:	3001      	adds	r0, #1
 8003f08:	d1c9      	bne.n	8003e9e <_puts_r+0x2e>
 8003f0a:	e7df      	b.n	8003ecc <_puts_r+0x5c>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	250a      	movs	r5, #10
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	6022      	str	r2, [r4, #0]
 8003f14:	701d      	strb	r5, [r3, #0]
 8003f16:	e7db      	b.n	8003ed0 <_puts_r+0x60>

08003f18 <puts>:
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <puts+0xc>)
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	f7ff bfa7 	b.w	8003e70 <_puts_r>
 8003f22:	bf00      	nop
 8003f24:	20000068 	.word	0x20000068

08003f28 <__sread>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	f000 f952 	bl	80041d8 <_read_r>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	bfab      	itete	ge
 8003f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f3c:	181b      	addge	r3, r3, r0
 8003f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f42:	bfac      	ite	ge
 8003f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f46:	81a3      	strhlt	r3, [r4, #12]
 8003f48:	bd10      	pop	{r4, pc}

08003f4a <__swrite>:
 8003f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4e:	461f      	mov	r7, r3
 8003f50:	898b      	ldrh	r3, [r1, #12]
 8003f52:	05db      	lsls	r3, r3, #23
 8003f54:	4605      	mov	r5, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	4616      	mov	r6, r2
 8003f5a:	d505      	bpl.n	8003f68 <__swrite+0x1e>
 8003f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f60:	2302      	movs	r3, #2
 8003f62:	2200      	movs	r2, #0
 8003f64:	f000 f926 	bl	80041b4 <_lseek_r>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	4632      	mov	r2, r6
 8003f76:	463b      	mov	r3, r7
 8003f78:	4628      	mov	r0, r5
 8003f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7e:	f000 b93d 	b.w	80041fc <_write_r>

08003f82 <__sseek>:
 8003f82:	b510      	push	{r4, lr}
 8003f84:	460c      	mov	r4, r1
 8003f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8a:	f000 f913 	bl	80041b4 <_lseek_r>
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	bf15      	itete	ne
 8003f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f9e:	81a3      	strheq	r3, [r4, #12]
 8003fa0:	bf18      	it	ne
 8003fa2:	81a3      	strhne	r3, [r4, #12]
 8003fa4:	bd10      	pop	{r4, pc}

08003fa6 <__sclose>:
 8003fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003faa:	f000 b89d 	b.w	80040e8 <_close_r>

08003fae <__swbuf_r>:
 8003fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb0:	460e      	mov	r6, r1
 8003fb2:	4614      	mov	r4, r2
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	b118      	cbz	r0, 8003fc0 <__swbuf_r+0x12>
 8003fb8:	6a03      	ldr	r3, [r0, #32]
 8003fba:	b90b      	cbnz	r3, 8003fc0 <__swbuf_r+0x12>
 8003fbc:	f7ff ff10 	bl	8003de0 <__sinit>
 8003fc0:	69a3      	ldr	r3, [r4, #24]
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	071a      	lsls	r2, r3, #28
 8003fc8:	d525      	bpl.n	8004016 <__swbuf_r+0x68>
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	b31b      	cbz	r3, 8004016 <__swbuf_r+0x68>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	6922      	ldr	r2, [r4, #16]
 8003fd2:	1a98      	subs	r0, r3, r2
 8003fd4:	6963      	ldr	r3, [r4, #20]
 8003fd6:	b2f6      	uxtb	r6, r6
 8003fd8:	4283      	cmp	r3, r0
 8003fda:	4637      	mov	r7, r6
 8003fdc:	dc04      	bgt.n	8003fe8 <__swbuf_r+0x3a>
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 fd9b 	bl	8004b1c <_fflush_r>
 8003fe6:	b9e0      	cbnz	r0, 8004022 <__swbuf_r+0x74>
 8003fe8:	68a3      	ldr	r3, [r4, #8]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	6022      	str	r2, [r4, #0]
 8003ff4:	701e      	strb	r6, [r3, #0]
 8003ff6:	6962      	ldr	r2, [r4, #20]
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d004      	beq.n	8004008 <__swbuf_r+0x5a>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	07db      	lsls	r3, r3, #31
 8004002:	d506      	bpl.n	8004012 <__swbuf_r+0x64>
 8004004:	2e0a      	cmp	r6, #10
 8004006:	d104      	bne.n	8004012 <__swbuf_r+0x64>
 8004008:	4621      	mov	r1, r4
 800400a:	4628      	mov	r0, r5
 800400c:	f000 fd86 	bl	8004b1c <_fflush_r>
 8004010:	b938      	cbnz	r0, 8004022 <__swbuf_r+0x74>
 8004012:	4638      	mov	r0, r7
 8004014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004016:	4621      	mov	r1, r4
 8004018:	4628      	mov	r0, r5
 800401a:	f000 f805 	bl	8004028 <__swsetup_r>
 800401e:	2800      	cmp	r0, #0
 8004020:	d0d5      	beq.n	8003fce <__swbuf_r+0x20>
 8004022:	f04f 37ff 	mov.w	r7, #4294967295
 8004026:	e7f4      	b.n	8004012 <__swbuf_r+0x64>

08004028 <__swsetup_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <__swsetup_r+0xac>)
 800402c:	4605      	mov	r5, r0
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	460c      	mov	r4, r1
 8004032:	b118      	cbz	r0, 800403c <__swsetup_r+0x14>
 8004034:	6a03      	ldr	r3, [r0, #32]
 8004036:	b90b      	cbnz	r3, 800403c <__swsetup_r+0x14>
 8004038:	f7ff fed2 	bl	8003de0 <__sinit>
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004042:	0718      	lsls	r0, r3, #28
 8004044:	d422      	bmi.n	800408c <__swsetup_r+0x64>
 8004046:	06d9      	lsls	r1, r3, #27
 8004048:	d407      	bmi.n	800405a <__swsetup_r+0x32>
 800404a:	2309      	movs	r3, #9
 800404c:	602b      	str	r3, [r5, #0]
 800404e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e034      	b.n	80040c4 <__swsetup_r+0x9c>
 800405a:	0758      	lsls	r0, r3, #29
 800405c:	d512      	bpl.n	8004084 <__swsetup_r+0x5c>
 800405e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004060:	b141      	cbz	r1, 8004074 <__swsetup_r+0x4c>
 8004062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004066:	4299      	cmp	r1, r3
 8004068:	d002      	beq.n	8004070 <__swsetup_r+0x48>
 800406a:	4628      	mov	r0, r5
 800406c:	f000 f904 	bl	8004278 <_free_r>
 8004070:	2300      	movs	r3, #0
 8004072:	6363      	str	r3, [r4, #52]	; 0x34
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	2300      	movs	r3, #0
 800407e:	6063      	str	r3, [r4, #4]
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f043 0308 	orr.w	r3, r3, #8
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	b94b      	cbnz	r3, 80040a4 <__swsetup_r+0x7c>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409a:	d003      	beq.n	80040a4 <__swsetup_r+0x7c>
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 fd8a 	bl	8004bb8 <__smakebuf_r>
 80040a4:	89a0      	ldrh	r0, [r4, #12]
 80040a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040aa:	f010 0301 	ands.w	r3, r0, #1
 80040ae:	d00a      	beq.n	80040c6 <__swsetup_r+0x9e>
 80040b0:	2300      	movs	r3, #0
 80040b2:	60a3      	str	r3, [r4, #8]
 80040b4:	6963      	ldr	r3, [r4, #20]
 80040b6:	425b      	negs	r3, r3
 80040b8:	61a3      	str	r3, [r4, #24]
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	b943      	cbnz	r3, 80040d0 <__swsetup_r+0xa8>
 80040be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040c2:	d1c4      	bne.n	800404e <__swsetup_r+0x26>
 80040c4:	bd38      	pop	{r3, r4, r5, pc}
 80040c6:	0781      	lsls	r1, r0, #30
 80040c8:	bf58      	it	pl
 80040ca:	6963      	ldrpl	r3, [r4, #20]
 80040cc:	60a3      	str	r3, [r4, #8]
 80040ce:	e7f4      	b.n	80040ba <__swsetup_r+0x92>
 80040d0:	2000      	movs	r0, #0
 80040d2:	e7f7      	b.n	80040c4 <__swsetup_r+0x9c>
 80040d4:	20000068 	.word	0x20000068

080040d8 <memset>:
 80040d8:	4402      	add	r2, r0
 80040da:	4603      	mov	r3, r0
 80040dc:	4293      	cmp	r3, r2
 80040de:	d100      	bne.n	80040e2 <memset+0xa>
 80040e0:	4770      	bx	lr
 80040e2:	f803 1b01 	strb.w	r1, [r3], #1
 80040e6:	e7f9      	b.n	80040dc <memset+0x4>

080040e8 <_close_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d06      	ldr	r5, [pc, #24]	; (8004104 <_close_r+0x1c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7fc fd0b 	bl	8000b0e <_close>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_close_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_close_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	20004258 	.word	0x20004258

08004108 <_reclaim_reent>:
 8004108:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <_reclaim_reent+0xa8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4283      	cmp	r3, r0
 800410e:	b570      	push	{r4, r5, r6, lr}
 8004110:	4604      	mov	r4, r0
 8004112:	d04b      	beq.n	80041ac <_reclaim_reent+0xa4>
 8004114:	69c3      	ldr	r3, [r0, #28]
 8004116:	b143      	cbz	r3, 800412a <_reclaim_reent+0x22>
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d144      	bne.n	80041a8 <_reclaim_reent+0xa0>
 800411e:	69e3      	ldr	r3, [r4, #28]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	b111      	cbz	r1, 800412a <_reclaim_reent+0x22>
 8004124:	4620      	mov	r0, r4
 8004126:	f000 f8a7 	bl	8004278 <_free_r>
 800412a:	6961      	ldr	r1, [r4, #20]
 800412c:	b111      	cbz	r1, 8004134 <_reclaim_reent+0x2c>
 800412e:	4620      	mov	r0, r4
 8004130:	f000 f8a2 	bl	8004278 <_free_r>
 8004134:	69e1      	ldr	r1, [r4, #28]
 8004136:	b111      	cbz	r1, 800413e <_reclaim_reent+0x36>
 8004138:	4620      	mov	r0, r4
 800413a:	f000 f89d 	bl	8004278 <_free_r>
 800413e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004140:	b111      	cbz	r1, 8004148 <_reclaim_reent+0x40>
 8004142:	4620      	mov	r0, r4
 8004144:	f000 f898 	bl	8004278 <_free_r>
 8004148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414a:	b111      	cbz	r1, 8004152 <_reclaim_reent+0x4a>
 800414c:	4620      	mov	r0, r4
 800414e:	f000 f893 	bl	8004278 <_free_r>
 8004152:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004154:	b111      	cbz	r1, 800415c <_reclaim_reent+0x54>
 8004156:	4620      	mov	r0, r4
 8004158:	f000 f88e 	bl	8004278 <_free_r>
 800415c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800415e:	b111      	cbz	r1, 8004166 <_reclaim_reent+0x5e>
 8004160:	4620      	mov	r0, r4
 8004162:	f000 f889 	bl	8004278 <_free_r>
 8004166:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004168:	b111      	cbz	r1, 8004170 <_reclaim_reent+0x68>
 800416a:	4620      	mov	r0, r4
 800416c:	f000 f884 	bl	8004278 <_free_r>
 8004170:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004172:	b111      	cbz	r1, 800417a <_reclaim_reent+0x72>
 8004174:	4620      	mov	r0, r4
 8004176:	f000 f87f 	bl	8004278 <_free_r>
 800417a:	6a23      	ldr	r3, [r4, #32]
 800417c:	b1b3      	cbz	r3, 80041ac <_reclaim_reent+0xa4>
 800417e:	4620      	mov	r0, r4
 8004180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004184:	4718      	bx	r3
 8004186:	5949      	ldr	r1, [r1, r5]
 8004188:	b941      	cbnz	r1, 800419c <_reclaim_reent+0x94>
 800418a:	3504      	adds	r5, #4
 800418c:	69e3      	ldr	r3, [r4, #28]
 800418e:	2d80      	cmp	r5, #128	; 0x80
 8004190:	68d9      	ldr	r1, [r3, #12]
 8004192:	d1f8      	bne.n	8004186 <_reclaim_reent+0x7e>
 8004194:	4620      	mov	r0, r4
 8004196:	f000 f86f 	bl	8004278 <_free_r>
 800419a:	e7c0      	b.n	800411e <_reclaim_reent+0x16>
 800419c:	680e      	ldr	r6, [r1, #0]
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 f86a 	bl	8004278 <_free_r>
 80041a4:	4631      	mov	r1, r6
 80041a6:	e7ef      	b.n	8004188 <_reclaim_reent+0x80>
 80041a8:	2500      	movs	r5, #0
 80041aa:	e7ef      	b.n	800418c <_reclaim_reent+0x84>
 80041ac:	bd70      	pop	{r4, r5, r6, pc}
 80041ae:	bf00      	nop
 80041b0:	20000068 	.word	0x20000068

080041b4 <_lseek_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d07      	ldr	r5, [pc, #28]	; (80041d4 <_lseek_r+0x20>)
 80041b8:	4604      	mov	r4, r0
 80041ba:	4608      	mov	r0, r1
 80041bc:	4611      	mov	r1, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	602a      	str	r2, [r5, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7fc fcca 	bl	8000b5c <_lseek>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_lseek_r+0x1e>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_lseek_r+0x1e>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20004258 	.word	0x20004258

080041d8 <_read_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	; (80041f8 <_read_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fc fc74 	bl	8000ad4 <_read>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_read_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_read_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20004258 	.word	0x20004258

080041fc <_write_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d07      	ldr	r5, [pc, #28]	; (800421c <_write_r+0x20>)
 8004200:	4604      	mov	r4, r0
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	2200      	movs	r2, #0
 8004208:	602a      	str	r2, [r5, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f7fc f9ef 	bl	80005ee <_write>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_write_r+0x1e>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_write_r+0x1e>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	20004258 	.word	0x20004258

08004220 <__errno>:
 8004220:	4b01      	ldr	r3, [pc, #4]	; (8004228 <__errno+0x8>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000068 	.word	0x20000068

0800422c <__libc_init_array>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4d0d      	ldr	r5, [pc, #52]	; (8004264 <__libc_init_array+0x38>)
 8004230:	4c0d      	ldr	r4, [pc, #52]	; (8004268 <__libc_init_array+0x3c>)
 8004232:	1b64      	subs	r4, r4, r5
 8004234:	10a4      	asrs	r4, r4, #2
 8004236:	2600      	movs	r6, #0
 8004238:	42a6      	cmp	r6, r4
 800423a:	d109      	bne.n	8004250 <__libc_init_array+0x24>
 800423c:	4d0b      	ldr	r5, [pc, #44]	; (800426c <__libc_init_array+0x40>)
 800423e:	4c0c      	ldr	r4, [pc, #48]	; (8004270 <__libc_init_array+0x44>)
 8004240:	f000 fd28 	bl	8004c94 <_init>
 8004244:	1b64      	subs	r4, r4, r5
 8004246:	10a4      	asrs	r4, r4, #2
 8004248:	2600      	movs	r6, #0
 800424a:	42a6      	cmp	r6, r4
 800424c:	d105      	bne.n	800425a <__libc_init_array+0x2e>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	f855 3b04 	ldr.w	r3, [r5], #4
 8004254:	4798      	blx	r3
 8004256:	3601      	adds	r6, #1
 8004258:	e7ee      	b.n	8004238 <__libc_init_array+0xc>
 800425a:	f855 3b04 	ldr.w	r3, [r5], #4
 800425e:	4798      	blx	r3
 8004260:	3601      	adds	r6, #1
 8004262:	e7f2      	b.n	800424a <__libc_init_array+0x1e>
 8004264:	08004da0 	.word	0x08004da0
 8004268:	08004da0 	.word	0x08004da0
 800426c:	08004da0 	.word	0x08004da0
 8004270:	08004da4 	.word	0x08004da4

08004274 <__retarget_lock_acquire_recursive>:
 8004274:	4770      	bx	lr

08004276 <__retarget_lock_release_recursive>:
 8004276:	4770      	bx	lr

08004278 <_free_r>:
 8004278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800427a:	2900      	cmp	r1, #0
 800427c:	d044      	beq.n	8004308 <_free_r+0x90>
 800427e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004282:	9001      	str	r0, [sp, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f1a1 0404 	sub.w	r4, r1, #4
 800428a:	bfb8      	it	lt
 800428c:	18e4      	addlt	r4, r4, r3
 800428e:	f000 f8df 	bl	8004450 <__malloc_lock>
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <_free_r+0x94>)
 8004294:	9801      	ldr	r0, [sp, #4]
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	b933      	cbnz	r3, 80042a8 <_free_r+0x30>
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	6014      	str	r4, [r2, #0]
 800429e:	b003      	add	sp, #12
 80042a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042a4:	f000 b8da 	b.w	800445c <__malloc_unlock>
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d908      	bls.n	80042be <_free_r+0x46>
 80042ac:	6825      	ldr	r5, [r4, #0]
 80042ae:	1961      	adds	r1, r4, r5
 80042b0:	428b      	cmp	r3, r1
 80042b2:	bf01      	itttt	eq
 80042b4:	6819      	ldreq	r1, [r3, #0]
 80042b6:	685b      	ldreq	r3, [r3, #4]
 80042b8:	1949      	addeq	r1, r1, r5
 80042ba:	6021      	streq	r1, [r4, #0]
 80042bc:	e7ed      	b.n	800429a <_free_r+0x22>
 80042be:	461a      	mov	r2, r3
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b10b      	cbz	r3, 80042c8 <_free_r+0x50>
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d9fa      	bls.n	80042be <_free_r+0x46>
 80042c8:	6811      	ldr	r1, [r2, #0]
 80042ca:	1855      	adds	r5, r2, r1
 80042cc:	42a5      	cmp	r5, r4
 80042ce:	d10b      	bne.n	80042e8 <_free_r+0x70>
 80042d0:	6824      	ldr	r4, [r4, #0]
 80042d2:	4421      	add	r1, r4
 80042d4:	1854      	adds	r4, r2, r1
 80042d6:	42a3      	cmp	r3, r4
 80042d8:	6011      	str	r1, [r2, #0]
 80042da:	d1e0      	bne.n	800429e <_free_r+0x26>
 80042dc:	681c      	ldr	r4, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	6053      	str	r3, [r2, #4]
 80042e2:	440c      	add	r4, r1
 80042e4:	6014      	str	r4, [r2, #0]
 80042e6:	e7da      	b.n	800429e <_free_r+0x26>
 80042e8:	d902      	bls.n	80042f0 <_free_r+0x78>
 80042ea:	230c      	movs	r3, #12
 80042ec:	6003      	str	r3, [r0, #0]
 80042ee:	e7d6      	b.n	800429e <_free_r+0x26>
 80042f0:	6825      	ldr	r5, [r4, #0]
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	428b      	cmp	r3, r1
 80042f6:	bf04      	itt	eq
 80042f8:	6819      	ldreq	r1, [r3, #0]
 80042fa:	685b      	ldreq	r3, [r3, #4]
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	bf04      	itt	eq
 8004300:	1949      	addeq	r1, r1, r5
 8004302:	6021      	streq	r1, [r4, #0]
 8004304:	6054      	str	r4, [r2, #4]
 8004306:	e7ca      	b.n	800429e <_free_r+0x26>
 8004308:	b003      	add	sp, #12
 800430a:	bd30      	pop	{r4, r5, pc}
 800430c:	20004260 	.word	0x20004260

08004310 <sbrk_aligned>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4e0e      	ldr	r6, [pc, #56]	; (800434c <sbrk_aligned+0x3c>)
 8004314:	460c      	mov	r4, r1
 8004316:	6831      	ldr	r1, [r6, #0]
 8004318:	4605      	mov	r5, r0
 800431a:	b911      	cbnz	r1, 8004322 <sbrk_aligned+0x12>
 800431c:	f000 fcaa 	bl	8004c74 <_sbrk_r>
 8004320:	6030      	str	r0, [r6, #0]
 8004322:	4621      	mov	r1, r4
 8004324:	4628      	mov	r0, r5
 8004326:	f000 fca5 	bl	8004c74 <_sbrk_r>
 800432a:	1c43      	adds	r3, r0, #1
 800432c:	d00a      	beq.n	8004344 <sbrk_aligned+0x34>
 800432e:	1cc4      	adds	r4, r0, #3
 8004330:	f024 0403 	bic.w	r4, r4, #3
 8004334:	42a0      	cmp	r0, r4
 8004336:	d007      	beq.n	8004348 <sbrk_aligned+0x38>
 8004338:	1a21      	subs	r1, r4, r0
 800433a:	4628      	mov	r0, r5
 800433c:	f000 fc9a 	bl	8004c74 <_sbrk_r>
 8004340:	3001      	adds	r0, #1
 8004342:	d101      	bne.n	8004348 <sbrk_aligned+0x38>
 8004344:	f04f 34ff 	mov.w	r4, #4294967295
 8004348:	4620      	mov	r0, r4
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	20004264 	.word	0x20004264

08004350 <_malloc_r>:
 8004350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004354:	1ccd      	adds	r5, r1, #3
 8004356:	f025 0503 	bic.w	r5, r5, #3
 800435a:	3508      	adds	r5, #8
 800435c:	2d0c      	cmp	r5, #12
 800435e:	bf38      	it	cc
 8004360:	250c      	movcc	r5, #12
 8004362:	2d00      	cmp	r5, #0
 8004364:	4607      	mov	r7, r0
 8004366:	db01      	blt.n	800436c <_malloc_r+0x1c>
 8004368:	42a9      	cmp	r1, r5
 800436a:	d905      	bls.n	8004378 <_malloc_r+0x28>
 800436c:	230c      	movs	r3, #12
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	2600      	movs	r6, #0
 8004372:	4630      	mov	r0, r6
 8004374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800444c <_malloc_r+0xfc>
 800437c:	f000 f868 	bl	8004450 <__malloc_lock>
 8004380:	f8d8 3000 	ldr.w	r3, [r8]
 8004384:	461c      	mov	r4, r3
 8004386:	bb5c      	cbnz	r4, 80043e0 <_malloc_r+0x90>
 8004388:	4629      	mov	r1, r5
 800438a:	4638      	mov	r0, r7
 800438c:	f7ff ffc0 	bl	8004310 <sbrk_aligned>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	4604      	mov	r4, r0
 8004394:	d155      	bne.n	8004442 <_malloc_r+0xf2>
 8004396:	f8d8 4000 	ldr.w	r4, [r8]
 800439a:	4626      	mov	r6, r4
 800439c:	2e00      	cmp	r6, #0
 800439e:	d145      	bne.n	800442c <_malloc_r+0xdc>
 80043a0:	2c00      	cmp	r4, #0
 80043a2:	d048      	beq.n	8004436 <_malloc_r+0xe6>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	4631      	mov	r1, r6
 80043a8:	4638      	mov	r0, r7
 80043aa:	eb04 0903 	add.w	r9, r4, r3
 80043ae:	f000 fc61 	bl	8004c74 <_sbrk_r>
 80043b2:	4581      	cmp	r9, r0
 80043b4:	d13f      	bne.n	8004436 <_malloc_r+0xe6>
 80043b6:	6821      	ldr	r1, [r4, #0]
 80043b8:	1a6d      	subs	r5, r5, r1
 80043ba:	4629      	mov	r1, r5
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff ffa7 	bl	8004310 <sbrk_aligned>
 80043c2:	3001      	adds	r0, #1
 80043c4:	d037      	beq.n	8004436 <_malloc_r+0xe6>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	442b      	add	r3, r5
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	f8d8 3000 	ldr.w	r3, [r8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d038      	beq.n	8004446 <_malloc_r+0xf6>
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	42a2      	cmp	r2, r4
 80043d8:	d12b      	bne.n	8004432 <_malloc_r+0xe2>
 80043da:	2200      	movs	r2, #0
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	e00f      	b.n	8004400 <_malloc_r+0xb0>
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	1b52      	subs	r2, r2, r5
 80043e4:	d41f      	bmi.n	8004426 <_malloc_r+0xd6>
 80043e6:	2a0b      	cmp	r2, #11
 80043e8:	d917      	bls.n	800441a <_malloc_r+0xca>
 80043ea:	1961      	adds	r1, r4, r5
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	6025      	str	r5, [r4, #0]
 80043f0:	bf18      	it	ne
 80043f2:	6059      	strne	r1, [r3, #4]
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	bf08      	it	eq
 80043f8:	f8c8 1000 	streq.w	r1, [r8]
 80043fc:	5162      	str	r2, [r4, r5]
 80043fe:	604b      	str	r3, [r1, #4]
 8004400:	4638      	mov	r0, r7
 8004402:	f104 060b 	add.w	r6, r4, #11
 8004406:	f000 f829 	bl	800445c <__malloc_unlock>
 800440a:	f026 0607 	bic.w	r6, r6, #7
 800440e:	1d23      	adds	r3, r4, #4
 8004410:	1af2      	subs	r2, r6, r3
 8004412:	d0ae      	beq.n	8004372 <_malloc_r+0x22>
 8004414:	1b9b      	subs	r3, r3, r6
 8004416:	50a3      	str	r3, [r4, r2]
 8004418:	e7ab      	b.n	8004372 <_malloc_r+0x22>
 800441a:	42a3      	cmp	r3, r4
 800441c:	6862      	ldr	r2, [r4, #4]
 800441e:	d1dd      	bne.n	80043dc <_malloc_r+0x8c>
 8004420:	f8c8 2000 	str.w	r2, [r8]
 8004424:	e7ec      	b.n	8004400 <_malloc_r+0xb0>
 8004426:	4623      	mov	r3, r4
 8004428:	6864      	ldr	r4, [r4, #4]
 800442a:	e7ac      	b.n	8004386 <_malloc_r+0x36>
 800442c:	4634      	mov	r4, r6
 800442e:	6876      	ldr	r6, [r6, #4]
 8004430:	e7b4      	b.n	800439c <_malloc_r+0x4c>
 8004432:	4613      	mov	r3, r2
 8004434:	e7cc      	b.n	80043d0 <_malloc_r+0x80>
 8004436:	230c      	movs	r3, #12
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4638      	mov	r0, r7
 800443c:	f000 f80e 	bl	800445c <__malloc_unlock>
 8004440:	e797      	b.n	8004372 <_malloc_r+0x22>
 8004442:	6025      	str	r5, [r4, #0]
 8004444:	e7dc      	b.n	8004400 <_malloc_r+0xb0>
 8004446:	605b      	str	r3, [r3, #4]
 8004448:	deff      	udf	#255	; 0xff
 800444a:	bf00      	nop
 800444c:	20004260 	.word	0x20004260

08004450 <__malloc_lock>:
 8004450:	4801      	ldr	r0, [pc, #4]	; (8004458 <__malloc_lock+0x8>)
 8004452:	f7ff bf0f 	b.w	8004274 <__retarget_lock_acquire_recursive>
 8004456:	bf00      	nop
 8004458:	2000425c 	.word	0x2000425c

0800445c <__malloc_unlock>:
 800445c:	4801      	ldr	r0, [pc, #4]	; (8004464 <__malloc_unlock+0x8>)
 800445e:	f7ff bf0a 	b.w	8004276 <__retarget_lock_release_recursive>
 8004462:	bf00      	nop
 8004464:	2000425c 	.word	0x2000425c

08004468 <__sfputc_r>:
 8004468:	6893      	ldr	r3, [r2, #8]
 800446a:	3b01      	subs	r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	b410      	push	{r4}
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	da08      	bge.n	8004486 <__sfputc_r+0x1e>
 8004474:	6994      	ldr	r4, [r2, #24]
 8004476:	42a3      	cmp	r3, r4
 8004478:	db01      	blt.n	800447e <__sfputc_r+0x16>
 800447a:	290a      	cmp	r1, #10
 800447c:	d103      	bne.n	8004486 <__sfputc_r+0x1e>
 800447e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004482:	f7ff bd94 	b.w	8003fae <__swbuf_r>
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	1c58      	adds	r0, r3, #1
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	7019      	strb	r1, [r3, #0]
 800448e:	4608      	mov	r0, r1
 8004490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004494:	4770      	bx	lr

08004496 <__sfputs_r>:
 8004496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004498:	4606      	mov	r6, r0
 800449a:	460f      	mov	r7, r1
 800449c:	4614      	mov	r4, r2
 800449e:	18d5      	adds	r5, r2, r3
 80044a0:	42ac      	cmp	r4, r5
 80044a2:	d101      	bne.n	80044a8 <__sfputs_r+0x12>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e007      	b.n	80044b8 <__sfputs_r+0x22>
 80044a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ac:	463a      	mov	r2, r7
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff ffda 	bl	8004468 <__sfputc_r>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d1f3      	bne.n	80044a0 <__sfputs_r+0xa>
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044bc <_vfiprintf_r>:
 80044bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	460d      	mov	r5, r1
 80044c2:	b09d      	sub	sp, #116	; 0x74
 80044c4:	4614      	mov	r4, r2
 80044c6:	4698      	mov	r8, r3
 80044c8:	4606      	mov	r6, r0
 80044ca:	b118      	cbz	r0, 80044d4 <_vfiprintf_r+0x18>
 80044cc:	6a03      	ldr	r3, [r0, #32]
 80044ce:	b90b      	cbnz	r3, 80044d4 <_vfiprintf_r+0x18>
 80044d0:	f7ff fc86 	bl	8003de0 <__sinit>
 80044d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044d6:	07d9      	lsls	r1, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_vfiprintf_r+0x2a>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	059a      	lsls	r2, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_vfiprintf_r+0x2a>
 80044e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e2:	f7ff fec7 	bl	8004274 <__retarget_lock_acquire_recursive>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	d501      	bpl.n	80044f0 <_vfiprintf_r+0x34>
 80044ec:	692b      	ldr	r3, [r5, #16]
 80044ee:	b99b      	cbnz	r3, 8004518 <_vfiprintf_r+0x5c>
 80044f0:	4629      	mov	r1, r5
 80044f2:	4630      	mov	r0, r6
 80044f4:	f7ff fd98 	bl	8004028 <__swsetup_r>
 80044f8:	b170      	cbz	r0, 8004518 <_vfiprintf_r+0x5c>
 80044fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044fc:	07dc      	lsls	r4, r3, #31
 80044fe:	d504      	bpl.n	800450a <_vfiprintf_r+0x4e>
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	b01d      	add	sp, #116	; 0x74
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	0598      	lsls	r0, r3, #22
 800450e:	d4f7      	bmi.n	8004500 <_vfiprintf_r+0x44>
 8004510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004512:	f7ff feb0 	bl	8004276 <__retarget_lock_release_recursive>
 8004516:	e7f3      	b.n	8004500 <_vfiprintf_r+0x44>
 8004518:	2300      	movs	r3, #0
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
 800451c:	2320      	movs	r3, #32
 800451e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004522:	f8cd 800c 	str.w	r8, [sp, #12]
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80046dc <_vfiprintf_r+0x220>
 800452c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004530:	f04f 0901 	mov.w	r9, #1
 8004534:	4623      	mov	r3, r4
 8004536:	469a      	mov	sl, r3
 8004538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453c:	b10a      	cbz	r2, 8004542 <_vfiprintf_r+0x86>
 800453e:	2a25      	cmp	r2, #37	; 0x25
 8004540:	d1f9      	bne.n	8004536 <_vfiprintf_r+0x7a>
 8004542:	ebba 0b04 	subs.w	fp, sl, r4
 8004546:	d00b      	beq.n	8004560 <_vfiprintf_r+0xa4>
 8004548:	465b      	mov	r3, fp
 800454a:	4622      	mov	r2, r4
 800454c:	4629      	mov	r1, r5
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff ffa1 	bl	8004496 <__sfputs_r>
 8004554:	3001      	adds	r0, #1
 8004556:	f000 80a9 	beq.w	80046ac <_vfiprintf_r+0x1f0>
 800455a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455c:	445a      	add	r2, fp
 800455e:	9209      	str	r2, [sp, #36]	; 0x24
 8004560:	f89a 3000 	ldrb.w	r3, [sl]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a1 	beq.w	80046ac <_vfiprintf_r+0x1f0>
 800456a:	2300      	movs	r3, #0
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004574:	f10a 0a01 	add.w	sl, sl, #1
 8004578:	9304      	str	r3, [sp, #16]
 800457a:	9307      	str	r3, [sp, #28]
 800457c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004580:	931a      	str	r3, [sp, #104]	; 0x68
 8004582:	4654      	mov	r4, sl
 8004584:	2205      	movs	r2, #5
 8004586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458a:	4854      	ldr	r0, [pc, #336]	; (80046dc <_vfiprintf_r+0x220>)
 800458c:	f7fb fe20 	bl	80001d0 <memchr>
 8004590:	9a04      	ldr	r2, [sp, #16]
 8004592:	b9d8      	cbnz	r0, 80045cc <_vfiprintf_r+0x110>
 8004594:	06d1      	lsls	r1, r2, #27
 8004596:	bf44      	itt	mi
 8004598:	2320      	movmi	r3, #32
 800459a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459e:	0713      	lsls	r3, r2, #28
 80045a0:	bf44      	itt	mi
 80045a2:	232b      	movmi	r3, #43	; 0x2b
 80045a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d015      	beq.n	80045dc <_vfiprintf_r+0x120>
 80045b0:	9a07      	ldr	r2, [sp, #28]
 80045b2:	4654      	mov	r4, sl
 80045b4:	2000      	movs	r0, #0
 80045b6:	f04f 0c0a 	mov.w	ip, #10
 80045ba:	4621      	mov	r1, r4
 80045bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c0:	3b30      	subs	r3, #48	; 0x30
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	d94d      	bls.n	8004662 <_vfiprintf_r+0x1a6>
 80045c6:	b1b0      	cbz	r0, 80045f6 <_vfiprintf_r+0x13a>
 80045c8:	9207      	str	r2, [sp, #28]
 80045ca:	e014      	b.n	80045f6 <_vfiprintf_r+0x13a>
 80045cc:	eba0 0308 	sub.w	r3, r0, r8
 80045d0:	fa09 f303 	lsl.w	r3, r9, r3
 80045d4:	4313      	orrs	r3, r2
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	46a2      	mov	sl, r4
 80045da:	e7d2      	b.n	8004582 <_vfiprintf_r+0xc6>
 80045dc:	9b03      	ldr	r3, [sp, #12]
 80045de:	1d19      	adds	r1, r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	9103      	str	r1, [sp, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bfbb      	ittet	lt
 80045e8:	425b      	neglt	r3, r3
 80045ea:	f042 0202 	orrlt.w	r2, r2, #2
 80045ee:	9307      	strge	r3, [sp, #28]
 80045f0:	9307      	strlt	r3, [sp, #28]
 80045f2:	bfb8      	it	lt
 80045f4:	9204      	strlt	r2, [sp, #16]
 80045f6:	7823      	ldrb	r3, [r4, #0]
 80045f8:	2b2e      	cmp	r3, #46	; 0x2e
 80045fa:	d10c      	bne.n	8004616 <_vfiprintf_r+0x15a>
 80045fc:	7863      	ldrb	r3, [r4, #1]
 80045fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004600:	d134      	bne.n	800466c <_vfiprintf_r+0x1b0>
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	1d1a      	adds	r2, r3, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	9203      	str	r2, [sp, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	bfb8      	it	lt
 800460e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004612:	3402      	adds	r4, #2
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80046ec <_vfiprintf_r+0x230>
 800461a:	7821      	ldrb	r1, [r4, #0]
 800461c:	2203      	movs	r2, #3
 800461e:	4650      	mov	r0, sl
 8004620:	f7fb fdd6 	bl	80001d0 <memchr>
 8004624:	b138      	cbz	r0, 8004636 <_vfiprintf_r+0x17a>
 8004626:	9b04      	ldr	r3, [sp, #16]
 8004628:	eba0 000a 	sub.w	r0, r0, sl
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	4082      	lsls	r2, r0
 8004630:	4313      	orrs	r3, r2
 8004632:	3401      	adds	r4, #1
 8004634:	9304      	str	r3, [sp, #16]
 8004636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463a:	4829      	ldr	r0, [pc, #164]	; (80046e0 <_vfiprintf_r+0x224>)
 800463c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004640:	2206      	movs	r2, #6
 8004642:	f7fb fdc5 	bl	80001d0 <memchr>
 8004646:	2800      	cmp	r0, #0
 8004648:	d03f      	beq.n	80046ca <_vfiprintf_r+0x20e>
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <_vfiprintf_r+0x228>)
 800464c:	bb1b      	cbnz	r3, 8004696 <_vfiprintf_r+0x1da>
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	3307      	adds	r3, #7
 8004652:	f023 0307 	bic.w	r3, r3, #7
 8004656:	3308      	adds	r3, #8
 8004658:	9303      	str	r3, [sp, #12]
 800465a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465c:	443b      	add	r3, r7
 800465e:	9309      	str	r3, [sp, #36]	; 0x24
 8004660:	e768      	b.n	8004534 <_vfiprintf_r+0x78>
 8004662:	fb0c 3202 	mla	r2, ip, r2, r3
 8004666:	460c      	mov	r4, r1
 8004668:	2001      	movs	r0, #1
 800466a:	e7a6      	b.n	80045ba <_vfiprintf_r+0xfe>
 800466c:	2300      	movs	r3, #0
 800466e:	3401      	adds	r4, #1
 8004670:	9305      	str	r3, [sp, #20]
 8004672:	4619      	mov	r1, r3
 8004674:	f04f 0c0a 	mov.w	ip, #10
 8004678:	4620      	mov	r0, r4
 800467a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800467e:	3a30      	subs	r2, #48	; 0x30
 8004680:	2a09      	cmp	r2, #9
 8004682:	d903      	bls.n	800468c <_vfiprintf_r+0x1d0>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0c6      	beq.n	8004616 <_vfiprintf_r+0x15a>
 8004688:	9105      	str	r1, [sp, #20]
 800468a:	e7c4      	b.n	8004616 <_vfiprintf_r+0x15a>
 800468c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004690:	4604      	mov	r4, r0
 8004692:	2301      	movs	r3, #1
 8004694:	e7f0      	b.n	8004678 <_vfiprintf_r+0x1bc>
 8004696:	ab03      	add	r3, sp, #12
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	462a      	mov	r2, r5
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <_vfiprintf_r+0x22c>)
 800469e:	a904      	add	r1, sp, #16
 80046a0:	4630      	mov	r0, r6
 80046a2:	f3af 8000 	nop.w
 80046a6:	4607      	mov	r7, r0
 80046a8:	1c78      	adds	r0, r7, #1
 80046aa:	d1d6      	bne.n	800465a <_vfiprintf_r+0x19e>
 80046ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	d405      	bmi.n	80046be <_vfiprintf_r+0x202>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	059a      	lsls	r2, r3, #22
 80046b6:	d402      	bmi.n	80046be <_vfiprintf_r+0x202>
 80046b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ba:	f7ff fddc 	bl	8004276 <__retarget_lock_release_recursive>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	065b      	lsls	r3, r3, #25
 80046c2:	f53f af1d 	bmi.w	8004500 <_vfiprintf_r+0x44>
 80046c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046c8:	e71c      	b.n	8004504 <_vfiprintf_r+0x48>
 80046ca:	ab03      	add	r3, sp, #12
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	462a      	mov	r2, r5
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <_vfiprintf_r+0x22c>)
 80046d2:	a904      	add	r1, sp, #16
 80046d4:	4630      	mov	r0, r6
 80046d6:	f000 f879 	bl	80047cc <_printf_i>
 80046da:	e7e4      	b.n	80046a6 <_vfiprintf_r+0x1ea>
 80046dc:	08004d64 	.word	0x08004d64
 80046e0:	08004d6e 	.word	0x08004d6e
 80046e4:	00000000 	.word	0x00000000
 80046e8:	08004497 	.word	0x08004497
 80046ec:	08004d6a 	.word	0x08004d6a

080046f0 <_printf_common>:
 80046f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	4616      	mov	r6, r2
 80046f6:	4699      	mov	r9, r3
 80046f8:	688a      	ldr	r2, [r1, #8]
 80046fa:	690b      	ldr	r3, [r1, #16]
 80046fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004700:	4293      	cmp	r3, r2
 8004702:	bfb8      	it	lt
 8004704:	4613      	movlt	r3, r2
 8004706:	6033      	str	r3, [r6, #0]
 8004708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800470c:	4607      	mov	r7, r0
 800470e:	460c      	mov	r4, r1
 8004710:	b10a      	cbz	r2, 8004716 <_printf_common+0x26>
 8004712:	3301      	adds	r3, #1
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	0699      	lsls	r1, r3, #26
 800471a:	bf42      	ittt	mi
 800471c:	6833      	ldrmi	r3, [r6, #0]
 800471e:	3302      	addmi	r3, #2
 8004720:	6033      	strmi	r3, [r6, #0]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	f015 0506 	ands.w	r5, r5, #6
 8004728:	d106      	bne.n	8004738 <_printf_common+0x48>
 800472a:	f104 0a19 	add.w	sl, r4, #25
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	6832      	ldr	r2, [r6, #0]
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	42ab      	cmp	r3, r5
 8004736:	dc26      	bgt.n	8004786 <_printf_common+0x96>
 8004738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800473c:	1e13      	subs	r3, r2, #0
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	2301      	movne	r3, #1
 8004744:	0692      	lsls	r2, r2, #26
 8004746:	d42b      	bmi.n	80047a0 <_printf_common+0xb0>
 8004748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474c:	4649      	mov	r1, r9
 800474e:	4638      	mov	r0, r7
 8004750:	47c0      	blx	r8
 8004752:	3001      	adds	r0, #1
 8004754:	d01e      	beq.n	8004794 <_printf_common+0xa4>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	6922      	ldr	r2, [r4, #16]
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf02      	ittt	eq
 8004762:	68e5      	ldreq	r5, [r4, #12]
 8004764:	6833      	ldreq	r3, [r6, #0]
 8004766:	1aed      	subeq	r5, r5, r3
 8004768:	68a3      	ldr	r3, [r4, #8]
 800476a:	bf0c      	ite	eq
 800476c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004770:	2500      	movne	r5, #0
 8004772:	4293      	cmp	r3, r2
 8004774:	bfc4      	itt	gt
 8004776:	1a9b      	subgt	r3, r3, r2
 8004778:	18ed      	addgt	r5, r5, r3
 800477a:	2600      	movs	r6, #0
 800477c:	341a      	adds	r4, #26
 800477e:	42b5      	cmp	r5, r6
 8004780:	d11a      	bne.n	80047b8 <_printf_common+0xc8>
 8004782:	2000      	movs	r0, #0
 8004784:	e008      	b.n	8004798 <_printf_common+0xa8>
 8004786:	2301      	movs	r3, #1
 8004788:	4652      	mov	r2, sl
 800478a:	4649      	mov	r1, r9
 800478c:	4638      	mov	r0, r7
 800478e:	47c0      	blx	r8
 8004790:	3001      	adds	r0, #1
 8004792:	d103      	bne.n	800479c <_printf_common+0xac>
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479c:	3501      	adds	r5, #1
 800479e:	e7c6      	b.n	800472e <_printf_common+0x3e>
 80047a0:	18e1      	adds	r1, r4, r3
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	2030      	movs	r0, #48	; 0x30
 80047a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047aa:	4422      	add	r2, r4
 80047ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b4:	3302      	adds	r3, #2
 80047b6:	e7c7      	b.n	8004748 <_printf_common+0x58>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4622      	mov	r2, r4
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d0e6      	beq.n	8004794 <_printf_common+0xa4>
 80047c6:	3601      	adds	r6, #1
 80047c8:	e7d9      	b.n	800477e <_printf_common+0x8e>
	...

080047cc <_printf_i>:
 80047cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	7e0f      	ldrb	r7, [r1, #24]
 80047d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047d4:	2f78      	cmp	r7, #120	; 0x78
 80047d6:	4691      	mov	r9, r2
 80047d8:	4680      	mov	r8, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	469a      	mov	sl, r3
 80047de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047e2:	d807      	bhi.n	80047f4 <_printf_i+0x28>
 80047e4:	2f62      	cmp	r7, #98	; 0x62
 80047e6:	d80a      	bhi.n	80047fe <_printf_i+0x32>
 80047e8:	2f00      	cmp	r7, #0
 80047ea:	f000 80d4 	beq.w	8004996 <_printf_i+0x1ca>
 80047ee:	2f58      	cmp	r7, #88	; 0x58
 80047f0:	f000 80c0 	beq.w	8004974 <_printf_i+0x1a8>
 80047f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047fc:	e03a      	b.n	8004874 <_printf_i+0xa8>
 80047fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004802:	2b15      	cmp	r3, #21
 8004804:	d8f6      	bhi.n	80047f4 <_printf_i+0x28>
 8004806:	a101      	add	r1, pc, #4	; (adr r1, 800480c <_printf_i+0x40>)
 8004808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800480c:	08004865 	.word	0x08004865
 8004810:	08004879 	.word	0x08004879
 8004814:	080047f5 	.word	0x080047f5
 8004818:	080047f5 	.word	0x080047f5
 800481c:	080047f5 	.word	0x080047f5
 8004820:	080047f5 	.word	0x080047f5
 8004824:	08004879 	.word	0x08004879
 8004828:	080047f5 	.word	0x080047f5
 800482c:	080047f5 	.word	0x080047f5
 8004830:	080047f5 	.word	0x080047f5
 8004834:	080047f5 	.word	0x080047f5
 8004838:	0800497d 	.word	0x0800497d
 800483c:	080048a5 	.word	0x080048a5
 8004840:	08004937 	.word	0x08004937
 8004844:	080047f5 	.word	0x080047f5
 8004848:	080047f5 	.word	0x080047f5
 800484c:	0800499f 	.word	0x0800499f
 8004850:	080047f5 	.word	0x080047f5
 8004854:	080048a5 	.word	0x080048a5
 8004858:	080047f5 	.word	0x080047f5
 800485c:	080047f5 	.word	0x080047f5
 8004860:	0800493f 	.word	0x0800493f
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	602a      	str	r2, [r5, #0]
 800486c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004874:	2301      	movs	r3, #1
 8004876:	e09f      	b.n	80049b8 <_printf_i+0x1ec>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	0607      	lsls	r7, r0, #24
 800487e:	f103 0104 	add.w	r1, r3, #4
 8004882:	6029      	str	r1, [r5, #0]
 8004884:	d501      	bpl.n	800488a <_printf_i+0xbe>
 8004886:	681e      	ldr	r6, [r3, #0]
 8004888:	e003      	b.n	8004892 <_printf_i+0xc6>
 800488a:	0646      	lsls	r6, r0, #25
 800488c:	d5fb      	bpl.n	8004886 <_printf_i+0xba>
 800488e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004892:	2e00      	cmp	r6, #0
 8004894:	da03      	bge.n	800489e <_printf_i+0xd2>
 8004896:	232d      	movs	r3, #45	; 0x2d
 8004898:	4276      	negs	r6, r6
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489e:	485a      	ldr	r0, [pc, #360]	; (8004a08 <_printf_i+0x23c>)
 80048a0:	230a      	movs	r3, #10
 80048a2:	e012      	b.n	80048ca <_printf_i+0xfe>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	1d19      	adds	r1, r3, #4
 80048aa:	6029      	str	r1, [r5, #0]
 80048ac:	0605      	lsls	r5, r0, #24
 80048ae:	d501      	bpl.n	80048b4 <_printf_i+0xe8>
 80048b0:	681e      	ldr	r6, [r3, #0]
 80048b2:	e002      	b.n	80048ba <_printf_i+0xee>
 80048b4:	0641      	lsls	r1, r0, #25
 80048b6:	d5fb      	bpl.n	80048b0 <_printf_i+0xe4>
 80048b8:	881e      	ldrh	r6, [r3, #0]
 80048ba:	4853      	ldr	r0, [pc, #332]	; (8004a08 <_printf_i+0x23c>)
 80048bc:	2f6f      	cmp	r7, #111	; 0x6f
 80048be:	bf0c      	ite	eq
 80048c0:	2308      	moveq	r3, #8
 80048c2:	230a      	movne	r3, #10
 80048c4:	2100      	movs	r1, #0
 80048c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ca:	6865      	ldr	r5, [r4, #4]
 80048cc:	60a5      	str	r5, [r4, #8]
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	bfa2      	ittt	ge
 80048d2:	6821      	ldrge	r1, [r4, #0]
 80048d4:	f021 0104 	bicge.w	r1, r1, #4
 80048d8:	6021      	strge	r1, [r4, #0]
 80048da:	b90e      	cbnz	r6, 80048e0 <_printf_i+0x114>
 80048dc:	2d00      	cmp	r5, #0
 80048de:	d04b      	beq.n	8004978 <_printf_i+0x1ac>
 80048e0:	4615      	mov	r5, r2
 80048e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048e6:	fb03 6711 	mls	r7, r3, r1, r6
 80048ea:	5dc7      	ldrb	r7, [r0, r7]
 80048ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048f0:	4637      	mov	r7, r6
 80048f2:	42bb      	cmp	r3, r7
 80048f4:	460e      	mov	r6, r1
 80048f6:	d9f4      	bls.n	80048e2 <_printf_i+0x116>
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d10b      	bne.n	8004914 <_printf_i+0x148>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	07de      	lsls	r6, r3, #31
 8004900:	d508      	bpl.n	8004914 <_printf_i+0x148>
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	6861      	ldr	r1, [r4, #4]
 8004906:	4299      	cmp	r1, r3
 8004908:	bfde      	ittt	le
 800490a:	2330      	movle	r3, #48	; 0x30
 800490c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004910:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004914:	1b52      	subs	r2, r2, r5
 8004916:	6122      	str	r2, [r4, #16]
 8004918:	f8cd a000 	str.w	sl, [sp]
 800491c:	464b      	mov	r3, r9
 800491e:	aa03      	add	r2, sp, #12
 8004920:	4621      	mov	r1, r4
 8004922:	4640      	mov	r0, r8
 8004924:	f7ff fee4 	bl	80046f0 <_printf_common>
 8004928:	3001      	adds	r0, #1
 800492a:	d14a      	bne.n	80049c2 <_printf_i+0x1f6>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	b004      	add	sp, #16
 8004932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f043 0320 	orr.w	r3, r3, #32
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	4833      	ldr	r0, [pc, #204]	; (8004a0c <_printf_i+0x240>)
 8004940:	2778      	movs	r7, #120	; 0x78
 8004942:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	6829      	ldr	r1, [r5, #0]
 800494a:	061f      	lsls	r7, r3, #24
 800494c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004950:	d402      	bmi.n	8004958 <_printf_i+0x18c>
 8004952:	065f      	lsls	r7, r3, #25
 8004954:	bf48      	it	mi
 8004956:	b2b6      	uxthmi	r6, r6
 8004958:	07df      	lsls	r7, r3, #31
 800495a:	bf48      	it	mi
 800495c:	f043 0320 	orrmi.w	r3, r3, #32
 8004960:	6029      	str	r1, [r5, #0]
 8004962:	bf48      	it	mi
 8004964:	6023      	strmi	r3, [r4, #0]
 8004966:	b91e      	cbnz	r6, 8004970 <_printf_i+0x1a4>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f023 0320 	bic.w	r3, r3, #32
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	2310      	movs	r3, #16
 8004972:	e7a7      	b.n	80048c4 <_printf_i+0xf8>
 8004974:	4824      	ldr	r0, [pc, #144]	; (8004a08 <_printf_i+0x23c>)
 8004976:	e7e4      	b.n	8004942 <_printf_i+0x176>
 8004978:	4615      	mov	r5, r2
 800497a:	e7bd      	b.n	80048f8 <_printf_i+0x12c>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	6826      	ldr	r6, [r4, #0]
 8004980:	6961      	ldr	r1, [r4, #20]
 8004982:	1d18      	adds	r0, r3, #4
 8004984:	6028      	str	r0, [r5, #0]
 8004986:	0635      	lsls	r5, r6, #24
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	d501      	bpl.n	8004990 <_printf_i+0x1c4>
 800498c:	6019      	str	r1, [r3, #0]
 800498e:	e002      	b.n	8004996 <_printf_i+0x1ca>
 8004990:	0670      	lsls	r0, r6, #25
 8004992:	d5fb      	bpl.n	800498c <_printf_i+0x1c0>
 8004994:	8019      	strh	r1, [r3, #0]
 8004996:	2300      	movs	r3, #0
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	4615      	mov	r5, r2
 800499c:	e7bc      	b.n	8004918 <_printf_i+0x14c>
 800499e:	682b      	ldr	r3, [r5, #0]
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	602a      	str	r2, [r5, #0]
 80049a4:	681d      	ldr	r5, [r3, #0]
 80049a6:	6862      	ldr	r2, [r4, #4]
 80049a8:	2100      	movs	r1, #0
 80049aa:	4628      	mov	r0, r5
 80049ac:	f7fb fc10 	bl	80001d0 <memchr>
 80049b0:	b108      	cbz	r0, 80049b6 <_printf_i+0x1ea>
 80049b2:	1b40      	subs	r0, r0, r5
 80049b4:	6060      	str	r0, [r4, #4]
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	2300      	movs	r3, #0
 80049bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c0:	e7aa      	b.n	8004918 <_printf_i+0x14c>
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	462a      	mov	r2, r5
 80049c6:	4649      	mov	r1, r9
 80049c8:	4640      	mov	r0, r8
 80049ca:	47d0      	blx	sl
 80049cc:	3001      	adds	r0, #1
 80049ce:	d0ad      	beq.n	800492c <_printf_i+0x160>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	079b      	lsls	r3, r3, #30
 80049d4:	d413      	bmi.n	80049fe <_printf_i+0x232>
 80049d6:	68e0      	ldr	r0, [r4, #12]
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	4298      	cmp	r0, r3
 80049dc:	bfb8      	it	lt
 80049de:	4618      	movlt	r0, r3
 80049e0:	e7a6      	b.n	8004930 <_printf_i+0x164>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4632      	mov	r2, r6
 80049e6:	4649      	mov	r1, r9
 80049e8:	4640      	mov	r0, r8
 80049ea:	47d0      	blx	sl
 80049ec:	3001      	adds	r0, #1
 80049ee:	d09d      	beq.n	800492c <_printf_i+0x160>
 80049f0:	3501      	adds	r5, #1
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	9903      	ldr	r1, [sp, #12]
 80049f6:	1a5b      	subs	r3, r3, r1
 80049f8:	42ab      	cmp	r3, r5
 80049fa:	dcf2      	bgt.n	80049e2 <_printf_i+0x216>
 80049fc:	e7eb      	b.n	80049d6 <_printf_i+0x20a>
 80049fe:	2500      	movs	r5, #0
 8004a00:	f104 0619 	add.w	r6, r4, #25
 8004a04:	e7f5      	b.n	80049f2 <_printf_i+0x226>
 8004a06:	bf00      	nop
 8004a08:	08004d75 	.word	0x08004d75
 8004a0c:	08004d86 	.word	0x08004d86

08004a10 <__sflush_r>:
 8004a10:	898a      	ldrh	r2, [r1, #12]
 8004a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a16:	4605      	mov	r5, r0
 8004a18:	0710      	lsls	r0, r2, #28
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	d458      	bmi.n	8004ad0 <__sflush_r+0xc0>
 8004a1e:	684b      	ldr	r3, [r1, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dc05      	bgt.n	8004a30 <__sflush_r+0x20>
 8004a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	dc02      	bgt.n	8004a30 <__sflush_r+0x20>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d0f9      	beq.n	8004a2a <__sflush_r+0x1a>
 8004a36:	2300      	movs	r3, #0
 8004a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a3c:	682f      	ldr	r7, [r5, #0]
 8004a3e:	6a21      	ldr	r1, [r4, #32]
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	d032      	beq.n	8004aaa <__sflush_r+0x9a>
 8004a44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	075a      	lsls	r2, r3, #29
 8004a4a:	d505      	bpl.n	8004a58 <__sflush_r+0x48>
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	1ac0      	subs	r0, r0, r3
 8004a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a52:	b10b      	cbz	r3, 8004a58 <__sflush_r+0x48>
 8004a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a56:	1ac0      	subs	r0, r0, r3
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a5e:	6a21      	ldr	r1, [r4, #32]
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b0      	blx	r6
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	d106      	bne.n	8004a78 <__sflush_r+0x68>
 8004a6a:	6829      	ldr	r1, [r5, #0]
 8004a6c:	291d      	cmp	r1, #29
 8004a6e:	d82b      	bhi.n	8004ac8 <__sflush_r+0xb8>
 8004a70:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <__sflush_r+0x108>)
 8004a72:	410a      	asrs	r2, r1
 8004a74:	07d6      	lsls	r6, r2, #31
 8004a76:	d427      	bmi.n	8004ac8 <__sflush_r+0xb8>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	6062      	str	r2, [r4, #4]
 8004a7c:	04d9      	lsls	r1, r3, #19
 8004a7e:	6922      	ldr	r2, [r4, #16]
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	d504      	bpl.n	8004a8e <__sflush_r+0x7e>
 8004a84:	1c42      	adds	r2, r0, #1
 8004a86:	d101      	bne.n	8004a8c <__sflush_r+0x7c>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	b903      	cbnz	r3, 8004a8e <__sflush_r+0x7e>
 8004a8c:	6560      	str	r0, [r4, #84]	; 0x54
 8004a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a90:	602f      	str	r7, [r5, #0]
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d0c9      	beq.n	8004a2a <__sflush_r+0x1a>
 8004a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9a:	4299      	cmp	r1, r3
 8004a9c:	d002      	beq.n	8004aa4 <__sflush_r+0x94>
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7ff fbea 	bl	8004278 <_free_r>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	6360      	str	r0, [r4, #52]	; 0x34
 8004aa8:	e7c0      	b.n	8004a2c <__sflush_r+0x1c>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b0      	blx	r6
 8004ab0:	1c41      	adds	r1, r0, #1
 8004ab2:	d1c8      	bne.n	8004a46 <__sflush_r+0x36>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0c5      	beq.n	8004a46 <__sflush_r+0x36>
 8004aba:	2b1d      	cmp	r3, #29
 8004abc:	d001      	beq.n	8004ac2 <__sflush_r+0xb2>
 8004abe:	2b16      	cmp	r3, #22
 8004ac0:	d101      	bne.n	8004ac6 <__sflush_r+0xb6>
 8004ac2:	602f      	str	r7, [r5, #0]
 8004ac4:	e7b1      	b.n	8004a2a <__sflush_r+0x1a>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	e7ad      	b.n	8004a2c <__sflush_r+0x1c>
 8004ad0:	690f      	ldr	r7, [r1, #16]
 8004ad2:	2f00      	cmp	r7, #0
 8004ad4:	d0a9      	beq.n	8004a2a <__sflush_r+0x1a>
 8004ad6:	0793      	lsls	r3, r2, #30
 8004ad8:	680e      	ldr	r6, [r1, #0]
 8004ada:	bf08      	it	eq
 8004adc:	694b      	ldreq	r3, [r1, #20]
 8004ade:	600f      	str	r7, [r1, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	eba6 0807 	sub.w	r8, r6, r7
 8004ae8:	608b      	str	r3, [r1, #8]
 8004aea:	f1b8 0f00 	cmp.w	r8, #0
 8004aee:	dd9c      	ble.n	8004a2a <__sflush_r+0x1a>
 8004af0:	6a21      	ldr	r1, [r4, #32]
 8004af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004af4:	4643      	mov	r3, r8
 8004af6:	463a      	mov	r2, r7
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b0      	blx	r6
 8004afc:	2800      	cmp	r0, #0
 8004afe:	dc06      	bgt.n	8004b0e <__sflush_r+0xfe>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e78e      	b.n	8004a2c <__sflush_r+0x1c>
 8004b0e:	4407      	add	r7, r0
 8004b10:	eba8 0800 	sub.w	r8, r8, r0
 8004b14:	e7e9      	b.n	8004aea <__sflush_r+0xda>
 8004b16:	bf00      	nop
 8004b18:	dfbffffe 	.word	0xdfbffffe

08004b1c <_fflush_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b913      	cbnz	r3, 8004b2c <_fflush_r+0x10>
 8004b26:	2500      	movs	r5, #0
 8004b28:	4628      	mov	r0, r5
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	b118      	cbz	r0, 8004b36 <_fflush_r+0x1a>
 8004b2e:	6a03      	ldr	r3, [r0, #32]
 8004b30:	b90b      	cbnz	r3, 8004b36 <_fflush_r+0x1a>
 8004b32:	f7ff f955 	bl	8003de0 <__sinit>
 8004b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f3      	beq.n	8004b26 <_fflush_r+0xa>
 8004b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b40:	07d0      	lsls	r0, r2, #31
 8004b42:	d404      	bmi.n	8004b4e <_fflush_r+0x32>
 8004b44:	0599      	lsls	r1, r3, #22
 8004b46:	d402      	bmi.n	8004b4e <_fflush_r+0x32>
 8004b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b4a:	f7ff fb93 	bl	8004274 <__retarget_lock_acquire_recursive>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	4621      	mov	r1, r4
 8004b52:	f7ff ff5d 	bl	8004a10 <__sflush_r>
 8004b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b58:	07da      	lsls	r2, r3, #31
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	d4e4      	bmi.n	8004b28 <_fflush_r+0xc>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	059b      	lsls	r3, r3, #22
 8004b62:	d4e1      	bmi.n	8004b28 <_fflush_r+0xc>
 8004b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b66:	f7ff fb86 	bl	8004276 <__retarget_lock_release_recursive>
 8004b6a:	e7dd      	b.n	8004b28 <_fflush_r+0xc>

08004b6c <__swhatbuf_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460c      	mov	r4, r1
 8004b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b74:	2900      	cmp	r1, #0
 8004b76:	b096      	sub	sp, #88	; 0x58
 8004b78:	4615      	mov	r5, r2
 8004b7a:	461e      	mov	r6, r3
 8004b7c:	da0d      	bge.n	8004b9a <__swhatbuf_r+0x2e>
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	bf0c      	ite	eq
 8004b8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b8e:	2340      	movne	r3, #64	; 0x40
 8004b90:	2000      	movs	r0, #0
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	b016      	add	sp, #88	; 0x58
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	466a      	mov	r2, sp
 8004b9c:	f000 f848 	bl	8004c30 <_fstat_r>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dbec      	blt.n	8004b7e <__swhatbuf_r+0x12>
 8004ba4:	9901      	ldr	r1, [sp, #4]
 8004ba6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004baa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004bae:	4259      	negs	r1, r3
 8004bb0:	4159      	adcs	r1, r3
 8004bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb6:	e7eb      	b.n	8004b90 <__swhatbuf_r+0x24>

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffc8 	bl	8004b6c <__swhatbuf_r>
 8004bdc:	9900      	ldr	r1, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f7ff fbb5 	bl	8004350 <_malloc_r>
 8004be6:	b948      	cbnz	r0, 8004bfc <__smakebuf_r+0x44>
 8004be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ef      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	e7e3      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	6020      	str	r0, [r4, #0]
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	9b00      	ldr	r3, [sp, #0]
 8004c08:	6163      	str	r3, [r4, #20]
 8004c0a:	9b01      	ldr	r3, [sp, #4]
 8004c0c:	6120      	str	r0, [r4, #16]
 8004c0e:	b15b      	cbz	r3, 8004c28 <__smakebuf_r+0x70>
 8004c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 f81d 	bl	8004c54 <_isatty_r>
 8004c1a:	b128      	cbz	r0, 8004c28 <__smakebuf_r+0x70>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	431d      	orrs	r5, r3
 8004c2c:	81a5      	strh	r5, [r4, #12]
 8004c2e:	e7cf      	b.n	8004bd0 <__smakebuf_r+0x18>

08004c30 <_fstat_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_fstat_r+0x20>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	f7fb ff72 	bl	8000b26 <_fstat>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d102      	bne.n	8004c4c <_fstat_r+0x1c>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	b103      	cbz	r3, 8004c4c <_fstat_r+0x1c>
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	bf00      	nop
 8004c50:	20004258 	.word	0x20004258

08004c54 <_isatty_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_isatty_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fb ff71 	bl	8000b46 <_isatty>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_isatty_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_isatty_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	20004258 	.word	0x20004258

08004c74 <_sbrk_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	; (8004c90 <_sbrk_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fb ff7a 	bl	8000b78 <_sbrk>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_sbrk_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_sbrk_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	20004258 	.word	0x20004258

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr
