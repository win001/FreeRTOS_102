
Counting_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005458  08005458  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005460  08005460  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005464  08005464  00015464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041fc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004268  20004268  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011c28  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002997  00000000  00000000  00031d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f98  00000000  00000000  000346a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c2d  00000000  00000000  00035638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022597  00000000  00000000  00036265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012be9  00000000  00000000  000587fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d229c  00000000  00000000  0006b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004470  00000000  00000000  0013d684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00141af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051f8 	.word	0x080051f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080051f8 	.word	0x080051f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000088 	.word	0x20000088
 800050c:	20000128 	.word	0x20000128

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fd67 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f86f 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8f5 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8c9 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	4923      	ldr	r1, [pc, #140]	; (80005b8 <main+0xa8>)
 800052a:	4824      	ldr	r0, [pc, #144]	; (80005bc <main+0xac>)
 800052c:	f002 f84d 	bl	80025ca <HAL_UART_Receive_IT>

  CountingSem = xSemaphoreCreateCounting(3, 0);
 8000530:	2100      	movs	r1, #0
 8000532:	2003      	movs	r0, #3
 8000534:	f002 fd0f 	bl	8002f56 <xQueueCreateCountingSemaphore>
 8000538:	4603      	mov	r3, r0
 800053a:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <main+0xb0>)
 800053c:	6013      	str	r3, [r2, #0]
  if(CountingSem == NULL) HAL_UART_Transmit(&huart2, (uint8_t *)"Unable to create Semaphore\n", 28, 100);
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <main+0xb0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d106      	bne.n	8000554 <main+0x44>
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	221c      	movs	r2, #28
 800054a:	491e      	ldr	r1, [pc, #120]	; (80005c4 <main+0xb4>)
 800054c:	481b      	ldr	r0, [pc, #108]	; (80005bc <main+0xac>)
 800054e:	f001 ffaa 	bl	80024a6 <HAL_UART_Transmit>
 8000552:	e005      	b.n	8000560 <main+0x50>
  else HAL_UART_Transmit(&huart2, (uint8_t *)"Semaphore created successfully\n", 41, 100);
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	2229      	movs	r2, #41	; 0x29
 8000558:	491b      	ldr	r1, [pc, #108]	; (80005c8 <main+0xb8>)
 800055a:	4818      	ldr	r0, [pc, #96]	; (80005bc <main+0xac>)
 800055c:	f001 ffa3 	bl	80024a6 <HAL_UART_Transmit>

  xTaskCreate(HPT_Task, "HPT", 128, NULL, 3, &HPThandler);
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <main+0xbc>)
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2303      	movs	r3, #3
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	4918      	ldr	r1, [pc, #96]	; (80005d0 <main+0xc0>)
 800056e:	4819      	ldr	r0, [pc, #100]	; (80005d4 <main+0xc4>)
 8000570:	f003 f8ab 	bl	80036ca <xTaskCreate>
  xTaskCreate(LPT_Task, "LPT", 128, NULL, 1, &LPThandler);
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <main+0xc8>)
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	2301      	movs	r3, #1
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	4916      	ldr	r1, [pc, #88]	; (80005dc <main+0xcc>)
 8000582:	4817      	ldr	r0, [pc, #92]	; (80005e0 <main+0xd0>)
 8000584:	f003 f8a1 	bl	80036ca <xTaskCreate>
  xTaskCreate(MPT_Task, "MPT", 128, NULL, 2, &MPThandler);
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <main+0xd4>)
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2302      	movs	r3, #2
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	4914      	ldr	r1, [pc, #80]	; (80005e8 <main+0xd8>)
 8000596:	4815      	ldr	r0, [pc, #84]	; (80005ec <main+0xdc>)
 8000598:	f003 f897 	bl	80036ca <xTaskCreate>
  xTaskCreate(VLPT_Task, "VLPT", 128, NULL, 0, &VLPThandler);
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <main+0xe0>)
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2300      	movs	r3, #0
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2300      	movs	r3, #0
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	4912      	ldr	r1, [pc, #72]	; (80005f4 <main+0xe4>)
 80005aa:	4813      	ldr	r0, [pc, #76]	; (80005f8 <main+0xe8>)
 80005ac:	f003 f88d 	bl	80036ca <xTaskCreate>
  /* USER CODE END 2 */

  vTaskStartScheduler();
 80005b0:	f003 fa9c 	bl	8003aec <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0xa4>
 80005b6:	bf00      	nop
 80005b8:	20000384 	.word	0x20000384
 80005bc:	20000328 	.word	0x20000328
 80005c0:	2000037c 	.word	0x2000037c
 80005c4:	08005210 	.word	0x08005210
 80005c8:	0800522c 	.word	0x0800522c
 80005cc:	2000036c 	.word	0x2000036c
 80005d0:	0800524c 	.word	0x0800524c
 80005d4:	080007cd 	.word	0x080007cd
 80005d8:	20000370 	.word	0x20000370
 80005dc:	08005250 	.word	0x08005250
 80005e0:	080009b1 	.word	0x080009b1
 80005e4:	20000374 	.word	0x20000374
 80005e8:	08005254 	.word	0x08005254
 80005ec:	08000add 	.word	0x08000add
 80005f0:	20000378 	.word	0x20000378
 80005f4:	08005258 	.word	0x08005258
 80005f8:	08000c09 	.word	0x08000c09

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fcfa 	bl	8005004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xb4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xb4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xb4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <SystemClock_Config+0xb8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <SystemClock_Config+0xb8>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <SystemClock_Config+0xb8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff95 	bl	800159c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000678:	f000 fb6e 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f9f8 	bl	8001a8c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a2:	f000 fb59 	bl	8000d58 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fe8c 	bl	800240c <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 fb2d 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000328 	.word	0x20000328
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <MX_GPIO_Init+0xb4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <MX_GPIO_Init+0xb4>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_GPIO_Init+0xb4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_GPIO_Init+0xb8>)
 800077e:	f000 fef3 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000782:	2301      	movs	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_GPIO_Init+0xbc>)
 8000796:	f000 fd4b 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800079a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_GPIO_Init+0xb8>)
 80007b4:	f000 fd3c 	bl	8001230 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40020000 	.word	0x40020000

080007cc <HPT_Task>:

/* USER CODE BEGIN 4 */
void HPT_Task (void *pvParameters)
{
 80007cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ce:	b0ad      	sub	sp, #180	; 0xb4
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	char sresource[3];
	int semcount = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char ssemcount[2];

	// Give 3 semaphores at the beginning..
	xSemaphoreGive(CountingSem);
 80007da:	4b6c      	ldr	r3, [pc, #432]	; (800098c <HPT_Task+0x1c0>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	f002 fbea 	bl	8002fbc <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 80007e8:	4b68      	ldr	r3, [pc, #416]	; (800098c <HPT_Task+0x1c0>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	f002 fbe3 	bl	8002fbc <xQueueGenericSend>
	xSemaphoreGive(CountingSem);
 80007f6:	4b65      	ldr	r3, [pc, #404]	; (800098c <HPT_Task+0x1c0>)
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	2300      	movs	r3, #0
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	f002 fbdc 	bl	8002fbc <xQueueGenericSend>

	while (1)
	{
		char str[150];
		strcpy(str, "Entered HPT Task\n About to ACQUIRE the Semaphore\n ");
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4a61      	ldr	r2, [pc, #388]	; (8000990 <HPT_Task+0x1c4>)
 800080a:	461c      	mov	r4, r3
 800080c:	4615      	mov	r5, r2
 800080e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	682b      	ldr	r3, [r5, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	8022      	strh	r2, [r4, #0]
 8000820:	3402      	adds	r4, #2
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	7023      	strb	r3, [r4, #0]
		semcount = uxSemaphoreGetCount(CountingSem);
 8000826:	4b59      	ldr	r3, [pc, #356]	; (800098c <HPT_Task+0x1c0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fdd0 	bl	80033d0 <uxQueueMessagesWaiting>
 8000830:	4603      	mov	r3, r0
 8000832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		itoa (semcount, ssemcount, 10);
 8000836:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800083a:	220a      	movs	r2, #10
 800083c:	4619      	mov	r1, r3
 800083e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000842:	f004 fb9b 	bl	8004f7c <itoa>
		strcat (str, "Tokens available are: ");
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fcc0 	bl	80001d0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4413      	add	r3, r2
 800085a:	4a4e      	ldr	r2, [pc, #312]	; (8000994 <HPT_Task+0x1c8>)
 800085c:	461c      	mov	r4, r3
 800085e:	4615      	mov	r5, r2
 8000860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000862:	6020      	str	r0, [r4, #0]
 8000864:	6061      	str	r1, [r4, #4]
 8000866:	60a2      	str	r2, [r4, #8]
 8000868:	60e3      	str	r3, [r4, #12]
 800086a:	6828      	ldr	r0, [r5, #0]
 800086c:	6120      	str	r0, [r4, #16]
 800086e:	88ab      	ldrh	r3, [r5, #4]
 8000870:	79aa      	ldrb	r2, [r5, #6]
 8000872:	82a3      	strh	r3, [r4, #20]
 8000874:	4613      	mov	r3, r2
 8000876:	75a3      	strb	r3, [r4, #22]
		strcat (str, ssemcount);
 8000878:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fbc6 	bl	8005014 <strcat>
		strcat (str, "\n\n");
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fc9f 	bl	80001d0 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4413      	add	r3, r2
 800089c:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HPT_Task+0x1cc>)
 800089e:	8811      	ldrh	r1, [r2, #0]
 80008a0:	7892      	ldrb	r2, [r2, #2]
 80008a2:	8019      	strh	r1, [r3, #0]
 80008a4:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fc90 	bl	80001d0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f107 010c 	add.w	r1, r7, #12
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	4837      	ldr	r0, [pc, #220]	; (800099c <HPT_Task+0x1d0>)
 80008be:	f001 fdf2 	bl	80024a6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <HPT_Task+0x1c0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f04f 31ff 	mov.w	r1, #4294967295
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fc74 	bl	80031b8 <xQueueSemaphoreTake>

		itoa (resource[_index], sresource, 10);
 80008d0:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <HPT_Task+0x1d4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <HPT_Task+0x1d8>)
 80008d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008da:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80008de:	220a      	movs	r2, #10
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 fb4b 	bl	8004f7c <itoa>
		strcpy (str, "Leaving HPT Task\n Data ACCESSED is:: ");
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <HPT_Task+0x1dc>)
 80008ec:	461c      	mov	r4, r3
 80008ee:	4615      	mov	r5, r2
 80008f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008fc:	6020      	str	r0, [r4, #0]
 80008fe:	3404      	adds	r4, #4
 8000900:	8021      	strh	r1, [r4, #0]
		strcat (str, sresource);
 8000902:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fb81 	bl	8005014 <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc5a 	bl	80001d0 <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4413      	add	r3, r2
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HPT_Task+0x1e0>)
 8000928:	4614      	mov	r4, r2
 800092a:	469c      	mov	ip, r3
 800092c:	f104 0e20 	add.w	lr, r4, #32
 8000930:	4665      	mov	r5, ip
 8000932:	4626      	mov	r6, r4
 8000934:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000936:	6028      	str	r0, [r5, #0]
 8000938:	6069      	str	r1, [r5, #4]
 800093a:	60aa      	str	r2, [r5, #8]
 800093c:	60eb      	str	r3, [r5, #12]
 800093e:	3410      	adds	r4, #16
 8000940:	f10c 0c10 	add.w	ip, ip, #16
 8000944:	4574      	cmp	r4, lr
 8000946:	d1f3      	bne.n	8000930 <HPT_Task+0x164>
 8000948:	4663      	mov	r3, ip
 800094a:	4622      	mov	r2, r4
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fc3b 	bl	80001d0 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	f107 010c 	add.w	r1, r7, #12
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <HPT_Task+0x1d0>)
 8000968:	f001 fd9d 	bl	80024a6 <HAL_UART_Transmit>

		_index++;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HPT_Task+0x1d4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HPT_Task+0x1d4>)
 8000974:	6013      	str	r3, [r2, #0]
		if (_index>2) _index=0;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HPT_Task+0x1d4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	dd02      	ble.n	8000984 <HPT_Task+0x1b8>
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HPT_Task+0x1d4>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]

//		vTaskDelay(3000);
		vTaskDelete(NULL);
 8000984:	2000      	movs	r0, #0
 8000986:	f002 ffed 	bl	8003964 <vTaskDelete>
	{
 800098a:	e73b      	b.n	8000804 <HPT_Task+0x38>
 800098c:	2000037c 	.word	0x2000037c
 8000990:	08005260 	.word	0x08005260
 8000994:	08005294 	.word	0x08005294
 8000998:	080052ac 	.word	0x080052ac
 800099c:	20000328 	.word	0x20000328
 80009a0:	20000380 	.word	0x20000380
 80009a4:	20000000 	.word	0x20000000
 80009a8:	080052b0 	.word	0x080052b0
 80009ac:	080052d8 	.word	0x080052d8

080009b0 <LPT_Task>:
	}
}

void LPT_Task (void *pvParameters)
{
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	b0ab      	sub	sp, #172	; 0xac
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while (1)
	{
		char str[150];
		strcpy(str, "Entered LPT Task\n About to ACQUIRE the Semaphore\n ");
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4a40      	ldr	r2, [pc, #256]	; (8000ac0 <LPT_Task+0x110>)
 80009be:	461c      	mov	r4, r3
 80009c0:	4615      	mov	r5, r2
 80009c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	8022      	strh	r2, [r4, #0]
 80009d4:	3402      	adds	r4, #2
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fbf6 	bl	80001d0 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f107 010c 	add.w	r1, r7, #12
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	4834      	ldr	r0, [pc, #208]	; (8000ac4 <LPT_Task+0x114>)
 80009f2:	f001 fd58 	bl	80024a6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 80009f6:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <LPT_Task+0x118>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f04f 31ff 	mov.w	r1, #4294967295
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fbda 	bl	80031b8 <xQueueSemaphoreTake>

		itoa (resource[_index], sresource, 10);
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <LPT_Task+0x11c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <LPT_Task+0x120>)
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000a12:	220a      	movs	r2, #10
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 fab1 	bl	8004f7c <itoa>
		strcpy (str, "Leaving LPT Task\n Data ACCESSED is:: ");
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <LPT_Task+0x124>)
 8000a20:	461c      	mov	r4, r3
 8000a22:	4615      	mov	r5, r2
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a30:	6020      	str	r0, [r4, #0]
 8000a32:	3404      	adds	r4, #4
 8000a34:	8021      	strh	r1, [r4, #0]
		strcat (str, sresource);
 8000a36:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 fae7 	bl	8005014 <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fbc0 	bl	80001d0 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <LPT_Task+0x128>)
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	469c      	mov	ip, r3
 8000a60:	f104 0e20 	add.w	lr, r4, #32
 8000a64:	4665      	mov	r5, ip
 8000a66:	4626      	mov	r6, r4
 8000a68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a6a:	6028      	str	r0, [r5, #0]
 8000a6c:	6069      	str	r1, [r5, #4]
 8000a6e:	60aa      	str	r2, [r5, #8]
 8000a70:	60eb      	str	r3, [r5, #12]
 8000a72:	3410      	adds	r4, #16
 8000a74:	f10c 0c10 	add.w	ip, ip, #16
 8000a78:	4574      	cmp	r4, lr
 8000a7a:	d1f3      	bne.n	8000a64 <LPT_Task+0xb4>
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	4622      	mov	r2, r4
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fba1 	bl	80001d0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f107 010c 	add.w	r1, r7, #12
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <LPT_Task+0x114>)
 8000a9c:	f001 fd03 	bl	80024a6 <HAL_UART_Transmit>

		_index++;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <LPT_Task+0x11c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <LPT_Task+0x11c>)
 8000aa8:	6013      	str	r3, [r2, #0]
		if (_index>2) _index=0;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <LPT_Task+0x11c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	dd02      	ble.n	8000ab8 <LPT_Task+0x108>
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <LPT_Task+0x11c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]

//		vTaskDelay(3000);
		vTaskDelete(NULL);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f002 ff53 	bl	8003964 <vTaskDelete>
	{
 8000abe:	e77b      	b.n	80009b8 <LPT_Task+0x8>
 8000ac0:	080052fc 	.word	0x080052fc
 8000ac4:	20000328 	.word	0x20000328
 8000ac8:	2000037c 	.word	0x2000037c
 8000acc:	20000380 	.word	0x20000380
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08005330 	.word	0x08005330
 8000ad8:	080052d8 	.word	0x080052d8

08000adc <MPT_Task>:
	}
}

void MPT_Task (void *pvParameters)
{
 8000adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ade:	b0ab      	sub	sp, #172	; 0xac
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while (1)
	{
		char str[150];
		strcpy(str, "Entered MPT Task\n About to ACQUIRE the Semaphore\n ");
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4a40      	ldr	r2, [pc, #256]	; (8000bec <MPT_Task+0x110>)
 8000aea:	461c      	mov	r4, r3
 8000aec:	4615      	mov	r5, r2
 8000aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	8022      	strh	r2, [r4, #0]
 8000b00:	3402      	adds	r4, #2
 8000b02:	0c1b      	lsrs	r3, r3, #16
 8000b04:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb60 	bl	80001d0 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	f107 010c 	add.w	r1, r7, #12
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	4834      	ldr	r0, [pc, #208]	; (8000bf0 <MPT_Task+0x114>)
 8000b1e:	f001 fcc2 	bl	80024a6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <MPT_Task+0x118>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 fb44 	bl	80031b8 <xQueueSemaphoreTake>

		itoa (resource[_index], sresource, 10);
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <MPT_Task+0x11c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <MPT_Task+0x120>)
 8000b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000b3e:	220a      	movs	r2, #10
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 fa1b 	bl	8004f7c <itoa>
		strcpy (str, "Leaving MPT Task\n Data ACCESSED is:: ");
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <MPT_Task+0x124>)
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	4615      	mov	r5, r2
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	6020      	str	r0, [r4, #0]
 8000b5e:	3404      	adds	r4, #4
 8000b60:	8021      	strh	r1, [r4, #0]
		strcat (str, sresource);
 8000b62:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fa51 	bl	8005014 <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb2a 	bl	80001d0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	4413      	add	r3, r2
 8000b86:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <MPT_Task+0x128>)
 8000b88:	4614      	mov	r4, r2
 8000b8a:	469c      	mov	ip, r3
 8000b8c:	f104 0e20 	add.w	lr, r4, #32
 8000b90:	4665      	mov	r5, ip
 8000b92:	4626      	mov	r6, r4
 8000b94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b96:	6028      	str	r0, [r5, #0]
 8000b98:	6069      	str	r1, [r5, #4]
 8000b9a:	60aa      	str	r2, [r5, #8]
 8000b9c:	60eb      	str	r3, [r5, #12]
 8000b9e:	3410      	adds	r4, #16
 8000ba0:	f10c 0c10 	add.w	ip, ip, #16
 8000ba4:	4574      	cmp	r4, lr
 8000ba6:	d1f3      	bne.n	8000b90 <MPT_Task+0xb4>
 8000ba8:	4663      	mov	r3, ip
 8000baa:	4622      	mov	r2, r4
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb0b 	bl	80001d0 <strlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f107 010c 	add.w	r1, r7, #12
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <MPT_Task+0x114>)
 8000bc8:	f001 fc6d 	bl	80024a6 <HAL_UART_Transmit>

		_index++;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MPT_Task+0x11c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <MPT_Task+0x11c>)
 8000bd4:	6013      	str	r3, [r2, #0]
		if (_index>2) _index=0;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MPT_Task+0x11c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dd02      	ble.n	8000be4 <MPT_Task+0x108>
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MPT_Task+0x11c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

//		vTaskDelay(3000);
		vTaskDelete(NULL);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f002 febd 	bl	8003964 <vTaskDelete>
	{
 8000bea:	e77b      	b.n	8000ae4 <MPT_Task+0x8>
 8000bec:	08005358 	.word	0x08005358
 8000bf0:	20000328 	.word	0x20000328
 8000bf4:	2000037c 	.word	0x2000037c
 8000bf8:	20000380 	.word	0x20000380
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	0800538c 	.word	0x0800538c
 8000c04:	080052d8 	.word	0x080052d8

08000c08 <VLPT_Task>:
	}
}

void VLPT_Task (void *pvParameters)
{
 8000c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0a:	b0ab      	sub	sp, #172	; 0xac
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	char sresource[3];

	while (1)
	{
		char str[150];
		strcpy(str, "Entered VLPT Task\n About to ACQUIRE the Semaphore\n ");
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	4a40      	ldr	r2, [pc, #256]	; (8000d18 <VLPT_Task+0x110>)
 8000c16:	461c      	mov	r4, r3
 8000c18:	4615      	mov	r5, r2
 8000c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff face 	bl	80001d0 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	f107 010c 	add.w	r1, r7, #12
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	4836      	ldr	r0, [pc, #216]	; (8000d1c <VLPT_Task+0x114>)
 8000c42:	f001 fc30 	bl	80024a6 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSem, portMAX_DELAY);
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <VLPT_Task+0x118>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fab2 	bl	80031b8 <xQueueSemaphoreTake>

		itoa (resource[_index], sresource, 10);
 8000c54:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <VLPT_Task+0x11c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <VLPT_Task+0x120>)
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000c62:	220a      	movs	r2, #10
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f989 	bl	8004f7c <itoa>
		strcpy (str, "Leaving VLPT Task\n Data ACCESSED is:: ");
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <VLPT_Task+0x124>)
 8000c70:	461c      	mov	r4, r3
 8000c72:	4615      	mov	r5, r2
 8000c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c80:	6020      	str	r0, [r4, #0]
 8000c82:	3404      	adds	r4, #4
 8000c84:	8021      	strh	r1, [r4, #0]
 8000c86:	3402      	adds	r4, #2
 8000c88:	0c0b      	lsrs	r3, r1, #16
 8000c8a:	7023      	strb	r3, [r4, #0]
		strcat (str, sresource);
 8000c8c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 f9bc 	bl	8005014 <strcat>
		strcat (str, "\n Not releasing the Semaphore\n\n\n");
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fa95 	bl	80001d0 <strlen>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <VLPT_Task+0x128>)
 8000cb2:	4614      	mov	r4, r2
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	f104 0e20 	add.w	lr, r4, #32
 8000cba:	4665      	mov	r5, ip
 8000cbc:	4626      	mov	r6, r4
 8000cbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cc0:	6028      	str	r0, [r5, #0]
 8000cc2:	6069      	str	r1, [r5, #4]
 8000cc4:	60aa      	str	r2, [r5, #8]
 8000cc6:	60eb      	str	r3, [r5, #12]
 8000cc8:	3410      	adds	r4, #16
 8000cca:	f10c 0c10 	add.w	ip, ip, #16
 8000cce:	4574      	cmp	r4, lr
 8000cd0:	d1f3      	bne.n	8000cba <VLPT_Task+0xb2>
 8000cd2:	4663      	mov	r3, ip
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	7812      	ldrb	r2, [r2, #0]
 8000cd8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fa76 	bl	80001d0 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	f107 010c 	add.w	r1, r7, #12
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <VLPT_Task+0x114>)
 8000cf2:	f001 fbd8 	bl	80024a6 <HAL_UART_Transmit>

		_index++;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <VLPT_Task+0x11c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <VLPT_Task+0x11c>)
 8000cfe:	6013      	str	r3, [r2, #0]
		if (_index>2) _index=0;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <VLPT_Task+0x11c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	dd02      	ble.n	8000d0e <VLPT_Task+0x106>
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <VLPT_Task+0x11c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]

		vTaskDelay(3000);
 8000d0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d12:	f002 feb7 	bl	8003a84 <vTaskDelay>
	{
 8000d16:	e77b      	b.n	8000c10 <VLPT_Task+0x8>
 8000d18:	080053b4 	.word	0x080053b4
 8000d1c:	20000328 	.word	0x20000328
 8000d20:	2000037c 	.word	0x2000037c
 8000d24:	20000380 	.word	0x20000380
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	080053e8 	.word	0x080053e8
 8000d30:	080052d8 	.word	0x080052d8

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d46:	f000 f971 	bl	800102c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010000 	.word	0x40010000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_MspInit+0x54>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_MspInit+0x54>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_MspInit+0x54>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_MspInit+0x54>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_MspInit+0x54>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_MspInit+0x54>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	f06f 0001 	mvn.w	r0, #1
 8000daa:	f000 fa17 	bl	80011dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12b      	bne.n	8000e36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e16:	230c      	movs	r3, #12
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_UART_MspInit+0x8c>)
 8000e32:	f000 f9fd 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <HAL_InitTick+0xd0>)
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <HAL_InitTick+0xd0>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_InitTick+0xd0>)
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e78:	f107 020c 	add.w	r2, r7, #12
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 ffe2 	bl	8001e4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e88:	f000 ffcc 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8000e8c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e90:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_InitTick+0xd4>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9b      	lsrs	r3, r3, #18
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_InitTick+0xd8>)
 8000e9e:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <HAL_InitTick+0xdc>)
 8000ea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_InitTick+0xd8>)
 8000ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_InitTick+0xd8>)
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_InitTick+0xd8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_InitTick+0xd8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_InitTick+0xd8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ec2:	4818      	ldr	r0, [pc, #96]	; (8000f24 <HAL_InitTick+0xd8>)
 8000ec4:	f000 fff4 	bl	8001eb0 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d11b      	bne.n	8000f0e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <HAL_InitTick+0xd8>)
 8000ed8:	f001 f844 	bl	8001f64 <HAL_TIM_Base_Start_IT>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d111      	bne.n	8000f0e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000eea:	2019      	movs	r0, #25
 8000eec:	f000 f992 	bl	8001214 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d808      	bhi.n	8000f08 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	2019      	movs	r0, #25
 8000efc:	f000 f96e 	bl	80011dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_InitTick+0xe0>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e002      	b.n	8000f0e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	20000388 	.word	0x20000388
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	20000010 	.word	0x20000010

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f62:	f001 f86f 	bl	8002044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000388 	.word	0x20000388

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff ffd7 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f004 f88d 	bl	80050e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff faa3 	bl	8000510 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fd8:	08005468 	.word	0x08005468
  ldr r2, =_sbss
 8000fdc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fe0:	20004268 	.word	0x20004268

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f8d8 	bl	80011c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f7ff ff18 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fea2 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000014 	.word	0x20000014
 8001050:	200003d0 	.word	0x200003d0

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200003d0 	.word	0x200003d0

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff4c 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ee:	f7ff ff61 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7ff ffb1 	bl	8001160 <NVIC_EncodePriority>
 80011fe:	4602      	mov	r2, r0
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff80 	bl	800110c <__NVIC_SetPriority>
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff54 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e16b      	b.n	8001524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 815a 	bne.w	800151e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	2b02      	cmp	r3, #2
 8001280:	d130      	bne.n	80012e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d017      	beq.n	8001320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80b4 	beq.w	800151e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b60      	ldr	r3, [pc, #384]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a5f      	ldr	r2, [pc, #380]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <HAL_GPIO_Init+0x310>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_GPIO_Init+0x314>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <HAL_GPIO_Init+0x318>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a50      	ldr	r2, [pc, #320]	; (800154c <HAL_GPIO_Init+0x31c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <HAL_GPIO_Init+0x320>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4e      	ldr	r2, [pc, #312]	; (8001554 <HAL_GPIO_Init+0x324>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x216>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4d      	ldr	r2, [pc, #308]	; (8001558 <HAL_GPIO_Init+0x328>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x212>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_GPIO_Init+0x32c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4b      	ldr	r2, [pc, #300]	; (8001560 <HAL_GPIO_Init+0x330>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x20a>
 8001436:	2307      	movs	r3, #7
 8001438:	e00e      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143a:	2308      	movs	r3, #8
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143e:	2306      	movs	r3, #6
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x310>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <HAL_GPIO_Init+0x334>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <HAL_GPIO_Init+0x334>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f ae90 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40021400 	.word	0x40021400
 800155c:	40021800 	.word	0x40021800
 8001560:	40021c00 	.word	0x40021c00
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001584:	e003      	b.n	800158e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	041a      	lsls	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e267      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d00c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4b85      	ldr	r3, [pc, #532]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d112      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b82      	ldr	r3, [pc, #520]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b7e      	ldr	r3, [pc, #504]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d157      	bne.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e242      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x74>
 8001602:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a75      	ldr	r2, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b70      	ldr	r3, [pc, #448]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6f      	ldr	r2, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6c      	ldr	r2, [pc, #432]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a68      	ldr	r2, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a65      	ldr	r2, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fcfe 	bl	8001054 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fcfa 	bl	8001054 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e207      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0xc0>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fcea 	bl	8001054 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fce6 	bl	8001054 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1f3      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0xe8>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d11c      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d116      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1c7      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e03a      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fc9f 	bl	8001054 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fc9b 	bl	8001054 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1a8      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4925      	ldr	r1, [pc, #148]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_OscConfig+0x244>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fc7e 	bl	8001054 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fc7a 	bl	8001054 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e187      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d036      	beq.n	80017f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d016      	beq.n	80017bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fc5e 	bl	8001054 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fc5a 	bl	8001054 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e167      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x240>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
 80017ba:	e01b      	b.n	80017f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x248>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fc47 	bl	8001054 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e00e      	b.n	80017e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fc43 	bl	8001054 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d907      	bls.n	80017e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e150      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470000 	.word	0x42470000
 80017e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ea      	bne.n	80017ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8097 	beq.w	8001930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a73      	ldr	r2, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fc03 	bl	8001054 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff fbff 	bl	8001054 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e10c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_OscConfig+0x474>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x2ea>
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x30c>
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x324>
 80018a8:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fbc4 	bl	8001054 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fbc0 	bl	8001054 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0cb      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0ee      	beq.n	80018d0 <HAL_RCC_OscConfig+0x334>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fbae 	bl	8001054 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff fbaa 	bl	8001054 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0b5      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ee      	bne.n	80018fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a1 	beq.w	8001a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d05c      	beq.n	8001a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d141      	bne.n	80019d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fb7e 	bl	8001054 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fb7a 	bl	8001054 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e087      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	3b01      	subs	r3, #1
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	491b      	ldr	r1, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fb53 	bl	8001054 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fb4f 	bl	8001054 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e05c      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x416>
 80019d0:	e054      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_OscConfig+0x478>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fb3c 	bl	8001054 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fb38 	bl	8001054 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e045      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x470>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x444>
 80019fe:	e03d      	b.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e038      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000
 8001a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4ec>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d028      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d121      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d11a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d111      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0cc      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d90c      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b8      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af8:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	494d      	ldr	r1, [pc, #308]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d044      	beq.n	8001bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e07f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e067      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4934      	ldr	r1, [pc, #208]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff fa6a 	bl	8001054 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff fa66 	bl	8001054 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e04f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d20c      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e032      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4916      	ldr	r1, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c12:	f000 f821 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f90a 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	08005418 	.word	0x08005418
 8001c50:	2000000c 	.word	0x2000000c
 8001c54:	20000010 	.word	0x20000010

08001c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c5c:	b090      	sub	sp, #64	; 0x40
 8001c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d00d      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x40>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	f200 80a1 	bhi.w	8001dc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x34>
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c8a:	e09b      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x184>)
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c90:	e09b      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c96:	e098      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c98:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca2:	4b4d      	ldr	r3, [pc, #308]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d028      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cae:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	627a      	str	r2, [r7, #36]	; 0x24
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cc4:	fb03 f201 	mul.w	r2, r3, r1
 8001cc8:	2300      	movs	r3, #0
 8001cca:	fb00 f303 	mul.w	r3, r0, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd2:	fba0 1202 	umull	r1, r2, r0, r2
 8001cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd8:	460a      	mov	r2, r1
 8001cda:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cde:	4413      	add	r3, r2
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	61fa      	str	r2, [r7, #28]
 8001cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cf2:	f7fe fa75 	bl	80001e0 <__aeabi_uldivmod>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cfe:	e053      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	2200      	movs	r2, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	617a      	str	r2, [r7, #20]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d12:	f04f 0b00 	mov.w	fp, #0
 8001d16:	4652      	mov	r2, sl
 8001d18:	465b      	mov	r3, fp
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	0159      	lsls	r1, r3, #5
 8001d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d28:	0150      	lsls	r0, r2, #5
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	ebb2 080a 	subs.w	r8, r2, sl
 8001d32:	eb63 090b 	sbc.w	r9, r3, fp
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d4a:	ebb2 0408 	subs.w	r4, r2, r8
 8001d4e:	eb63 0509 	sbc.w	r5, r3, r9
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	00eb      	lsls	r3, r5, #3
 8001d5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d60:	00e2      	lsls	r2, r4, #3
 8001d62:	4614      	mov	r4, r2
 8001d64:	461d      	mov	r5, r3
 8001d66:	eb14 030a 	adds.w	r3, r4, sl
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	eb45 030b 	adc.w	r3, r5, fp
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7e:	4629      	mov	r1, r5
 8001d80:	028b      	lsls	r3, r1, #10
 8001d82:	4621      	mov	r1, r4
 8001d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d88:	4621      	mov	r1, r4
 8001d8a:	028a      	lsls	r2, r1, #10
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	2200      	movs	r2, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	60fa      	str	r2, [r7, #12]
 8001d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d9c:	f7fe fa20 	bl	80001e0 <__aeabi_uldivmod>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4613      	mov	r3, r2
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x184>)
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3740      	adds	r7, #64	; 0x40
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	017d7840 	.word	0x017d7840

08001de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e00:	f7ff fff0 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0a9b      	lsrs	r3, r3, #10
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4903      	ldr	r1, [pc, #12]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08005428 	.word	0x08005428

08001e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e28:	f7ff ffdc 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	0b5b      	lsrs	r3, r3, #13
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4903      	ldr	r1, [pc, #12]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	08005428 	.word	0x08005428

08001e4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	220f      	movs	r2, #15
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCC_GetClockConfig+0x60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0207 	and.w	r2, r3, #7
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e041      	b.n	8001f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f839 	bl	8001f4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f000 f9d8 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d001      	beq.n	8001f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e04e      	b.n	800201a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d022      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa6:	d01d      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d018      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x80>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x80>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x80>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x80>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a18      	ldr	r2, [pc, #96]	; (8002040 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d010      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002006:	e007      	b.n	8002018 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40010400 	.word	0x40010400
 800203c:	40014000 	.word	0x40014000
 8002040:	40001800 	.word	0x40001800

08002044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d122      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b02      	cmp	r3, #2
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0202 	mvn.w	r2, #2
 8002070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8ee 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8e0 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8f1 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0204 	mvn.w	r2, #4
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8c4 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8b6 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f8c7 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d122      	bne.n	8002148 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b08      	cmp	r3, #8
 800210e:	d11b      	bne.n	8002148 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0208 	mvn.w	r2, #8
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2204      	movs	r2, #4
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f89a 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f88c 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f89d 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b10      	cmp	r3, #16
 8002154:	d122      	bne.n	800219c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b10      	cmp	r3, #16
 8002162:	d11b      	bne.n	800219c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0210 	mvn.w	r2, #16
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2208      	movs	r2, #8
 8002172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f870 	bl	8002268 <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f862 	bl	8002254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f873 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0201 	mvn.w	r2, #1
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fdb6 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b80      	cmp	r3, #128	; 0x80
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f902 	bl	80023f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f838 	bl	8002290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b20      	cmp	r3, #32
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b20      	cmp	r3, #32
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0220 	mvn.w	r2, #32
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f8cc 	bl	80023e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <TIM_Base_SetConfig+0x114>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d00f      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <TIM_Base_SetConfig+0x118>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00b      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3c      	ldr	r2, [pc, #240]	; (80023c0 <TIM_Base_SetConfig+0x11c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d007      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3b      	ldr	r2, [pc, #236]	; (80023c4 <TIM_Base_SetConfig+0x120>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <TIM_Base_SetConfig+0x40>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <TIM_Base_SetConfig+0x124>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d108      	bne.n	80022f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <TIM_Base_SetConfig+0x114>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d027      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <TIM_Base_SetConfig+0x118>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d023      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <TIM_Base_SetConfig+0x11c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <TIM_Base_SetConfig+0x120>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <TIM_Base_SetConfig+0x124>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d017      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <TIM_Base_SetConfig+0x128>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <TIM_Base_SetConfig+0x12c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00f      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <TIM_Base_SetConfig+0x130>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00b      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <TIM_Base_SetConfig+0x134>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a24      	ldr	r2, [pc, #144]	; (80023dc <TIM_Base_SetConfig+0x138>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <TIM_Base_SetConfig+0x13c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d108      	bne.n	8002368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <TIM_Base_SetConfig+0x114>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0xf8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <TIM_Base_SetConfig+0x124>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	615a      	str	r2, [r3, #20]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40010400 	.word	0x40010400
 80023cc:	40014000 	.word	0x40014000
 80023d0:	40014400 	.word	0x40014400
 80023d4:	40014800 	.word	0x40014800
 80023d8:	40001800 	.word	0x40001800
 80023dc:	40001c00 	.word	0x40001c00
 80023e0:	40002000 	.word	0x40002000

080023e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e03f      	b.n	800249e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe fcc2 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800244e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f997 	bl	8002784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b08a      	sub	sp, #40	; 0x28
 80024aa:	af02      	add	r7, sp, #8
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d17c      	bne.n	80025c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_UART_Transmit+0x2c>
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e075      	b.n	80025c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_UART_Transmit+0x3e>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e06e      	b.n	80025c2 <HAL_UART_Transmit+0x11c>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2221      	movs	r2, #33	; 0x21
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024fa:	f7fe fdab 	bl	8001054 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	88fa      	ldrh	r2, [r7, #6]
 800250a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002514:	d108      	bne.n	8002528 <HAL_UART_Transmit+0x82>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d104      	bne.n	8002528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	e003      	b.n	8002530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002538:	e02a      	b.n	8002590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f870 	bl	800262a <UART_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e036      	b.n	80025c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	3302      	adds	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	e007      	b.n	8002582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1cf      	bne.n	800253a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2200      	movs	r2, #0
 80025a2:	2140      	movs	r1, #64	; 0x40
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f840 	bl	800262a <UART_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e006      	b.n	80025c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d11d      	bne.n	8002620 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Receive_IT+0x26>
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e016      	b.n	8002622 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Receive_IT+0x38>
 80025fe:	2302      	movs	r3, #2
 8002600:	e00f      	b.n	8002622 <HAL_UART_Receive_IT+0x58>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	461a      	mov	r2, r3
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f875 	bl	8002706 <UART_Start_Receive_IT>
 800261c:	4603      	mov	r3, r0
 800261e:	e000      	b.n	8002622 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b090      	sub	sp, #64	; 0x40
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800263a:	e050      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d04c      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <UART_WaitOnFlagUntilTimeout+0x30>
 800264a:	f7fe fd03 	bl	8001054 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002656:	429a      	cmp	r2, r3
 8002658:	d241      	bcs.n	80026de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800267a:	637a      	str	r2, [r7, #52]	; 0x34
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e5      	bne.n	800265a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3314      	adds	r3, #20
 8002694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	e853 3f00 	ldrex	r3, [r3]
 800269c:	613b      	str	r3, [r7, #16]
   return(result);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3314      	adds	r3, #20
 80026ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ae:	623a      	str	r2, [r7, #32]
 80026b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	69f9      	ldr	r1, [r7, #28]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e5      	bne.n	800268e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e00f      	b.n	80026fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4013      	ands	r3, r2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d09f      	beq.n	800263c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3740      	adds	r7, #64	; 0x40
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	4613      	mov	r3, r2
 8002712:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2222      	movs	r2, #34	; 0x22
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b0c0      	sub	sp, #256	; 0x100
 800278a:	af00      	add	r7, sp, #0
 800278c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	68d9      	ldr	r1, [r3, #12]
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	ea40 0301 	orr.w	r3, r0, r1
 80027ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027dc:	f021 010c 	bic.w	r1, r1, #12
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fe:	6999      	ldr	r1, [r3, #24]
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	ea40 0301 	orr.w	r3, r0, r1
 800280a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b8f      	ldr	r3, [pc, #572]	; (8002a50 <UART_SetConfig+0x2cc>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d005      	beq.n	8002824 <UART_SetConfig+0xa0>
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <UART_SetConfig+0x2d0>)
 8002820:	429a      	cmp	r2, r3
 8002822:	d104      	bne.n	800282e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002824:	f7ff fafe 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8002828:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800282c:	e003      	b.n	8002836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800282e:	f7ff fae5 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8002832:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002840:	f040 810c 	bne.w	8002a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002848:	2200      	movs	r2, #0
 800284a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800284e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002856:	4622      	mov	r2, r4
 8002858:	462b      	mov	r3, r5
 800285a:	1891      	adds	r1, r2, r2
 800285c:	65b9      	str	r1, [r7, #88]	; 0x58
 800285e:	415b      	adcs	r3, r3
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002866:	4621      	mov	r1, r4
 8002868:	eb12 0801 	adds.w	r8, r2, r1
 800286c:	4629      	mov	r1, r5
 800286e:	eb43 0901 	adc.w	r9, r3, r1
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800287e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002886:	4690      	mov	r8, r2
 8002888:	4699      	mov	r9, r3
 800288a:	4623      	mov	r3, r4
 800288c:	eb18 0303 	adds.w	r3, r8, r3
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002894:	462b      	mov	r3, r5
 8002896:	eb49 0303 	adc.w	r3, r9, r3
 800289a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028b2:	460b      	mov	r3, r1
 80028b4:	18db      	adds	r3, r3, r3
 80028b6:	653b      	str	r3, [r7, #80]	; 0x50
 80028b8:	4613      	mov	r3, r2
 80028ba:	eb42 0303 	adc.w	r3, r2, r3
 80028be:	657b      	str	r3, [r7, #84]	; 0x54
 80028c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028c8:	f7fd fc8a 	bl	80001e0 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <UART_SetConfig+0x2d4>)
 80028d2:	fba3 2302 	umull	r2, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	011c      	lsls	r4, r3, #4
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	1891      	adds	r1, r2, r2
 80028f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80028f4:	415b      	adcs	r3, r3
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028fc:	4641      	mov	r1, r8
 80028fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002902:	4649      	mov	r1, r9
 8002904:	eb43 0b01 	adc.w	fp, r3, r1
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291c:	4692      	mov	sl, r2
 800291e:	469b      	mov	fp, r3
 8002920:	4643      	mov	r3, r8
 8002922:	eb1a 0303 	adds.w	r3, sl, r3
 8002926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800292a:	464b      	mov	r3, r9
 800292c:	eb4b 0303 	adc.w	r3, fp, r3
 8002930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002940:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002948:	460b      	mov	r3, r1
 800294a:	18db      	adds	r3, r3, r3
 800294c:	643b      	str	r3, [r7, #64]	; 0x40
 800294e:	4613      	mov	r3, r2
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
 8002956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800295a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800295e:	f7fd fc3f 	bl	80001e0 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4611      	mov	r1, r2
 8002968:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <UART_SetConfig+0x2d4>)
 800296a:	fba3 2301 	umull	r2, r3, r3, r1
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2264      	movs	r2, #100	; 0x64
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	1acb      	subs	r3, r1, r3
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002980:	fba3 2302 	umull	r2, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800298c:	441c      	add	r4, r3
 800298e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002998:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800299c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029a0:	4642      	mov	r2, r8
 80029a2:	464b      	mov	r3, r9
 80029a4:	1891      	adds	r1, r2, r2
 80029a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80029a8:	415b      	adcs	r3, r3
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029b0:	4641      	mov	r1, r8
 80029b2:	1851      	adds	r1, r2, r1
 80029b4:	6339      	str	r1, [r7, #48]	; 0x30
 80029b6:	4649      	mov	r1, r9
 80029b8:	414b      	adcs	r3, r1
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029c8:	4659      	mov	r1, fp
 80029ca:	00cb      	lsls	r3, r1, #3
 80029cc:	4651      	mov	r1, sl
 80029ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d2:	4651      	mov	r1, sl
 80029d4:	00ca      	lsls	r2, r1, #3
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	4642      	mov	r2, r8
 80029de:	189b      	adds	r3, r3, r2
 80029e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029e4:	464b      	mov	r3, r9
 80029e6:	460a      	mov	r2, r1
 80029e8:	eb42 0303 	adc.w	r3, r2, r3
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a04:	460b      	mov	r3, r1
 8002a06:	18db      	adds	r3, r3, r3
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	eb42 0303 	adc.w	r3, r2, r3
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a1a:	f7fd fbe1 	bl	80001e0 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 0207 	and.w	r2, r3, #7
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4422      	add	r2, r4
 8002a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a4c:	e106      	b.n	8002c5c <UART_SetConfig+0x4d8>
 8002a4e:	bf00      	nop
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40011400 	.word	0x40011400
 8002a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a6e:	4642      	mov	r2, r8
 8002a70:	464b      	mov	r3, r9
 8002a72:	1891      	adds	r1, r2, r2
 8002a74:	6239      	str	r1, [r7, #32]
 8002a76:	415b      	adcs	r3, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a7e:	4641      	mov	r1, r8
 8002a80:	1854      	adds	r4, r2, r1
 8002a82:	4649      	mov	r1, r9
 8002a84:	eb43 0501 	adc.w	r5, r3, r1
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	00eb      	lsls	r3, r5, #3
 8002a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	4643      	mov	r3, r8
 8002a9e:	18e3      	adds	r3, r4, r3
 8002aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	eb45 0303 	adc.w	r3, r5, r3
 8002aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002aca:	4629      	mov	r1, r5
 8002acc:	008b      	lsls	r3, r1, #2
 8002ace:	4621      	mov	r1, r4
 8002ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	008a      	lsls	r2, r1, #2
 8002ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002adc:	f7fd fb80 	bl	80001e0 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	61b9      	str	r1, [r7, #24]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6139      	str	r1, [r7, #16]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b44:	464b      	mov	r3, r9
 8002b46:	460a      	mov	r2, r1
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b68:	4649      	mov	r1, r9
 8002b6a:	008b      	lsls	r3, r1, #2
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b72:	4641      	mov	r1, r8
 8002b74:	008a      	lsls	r2, r1, #2
 8002b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b7a:	f7fd fb31 	bl	80001e0 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002b86:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2264      	movs	r2, #100	; 0x64
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	1acb      	subs	r3, r1, r3
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	3332      	adds	r3, #50	; 0x32
 8002b98:	4a33      	ldr	r2, [pc, #204]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	441c      	add	r4, r3
 8002ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002baa:	2200      	movs	r2, #0
 8002bac:	673b      	str	r3, [r7, #112]	; 0x70
 8002bae:	677a      	str	r2, [r7, #116]	; 0x74
 8002bb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	eb42 0303 	adc.w	r3, r2, r3
 8002bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
 8002c0a:	667a      	str	r2, [r7, #100]	; 0x64
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c18:	4649      	mov	r1, r9
 8002c1a:	008b      	lsls	r3, r1, #2
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c22:	4641      	mov	r1, r8
 8002c24:	008a      	lsls	r2, r1, #2
 8002c26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c2a:	f7fd fad9 	bl	80001e0 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	2164      	movs	r1, #100	; 0x64
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	3332      	adds	r3, #50	; 0x32
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4422      	add	r2, r4
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c68:	51eb851f 	.word	0x51eb851f

08002c6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f103 0208 	add.w	r2, r3, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f103 0208 	add.w	r2, r3, #8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f103 0208 	add.w	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d103      	bne.n	8002d2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e00c      	b.n	8002d48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3308      	adds	r3, #8
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e002      	b.n	8002d3c <vListInsert+0x2e>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d2f6      	bcs.n	8002d36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6892      	ldr	r2, [r2, #8]
 8002d96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6852      	ldr	r2, [r2, #4]
 8002da0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d103      	bne.n	8002db4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dfe:	f001 fdd9 	bl	80049b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	441a      	add	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d114      	bne.n	8002e7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01a      	beq.n	8002e92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3310      	adds	r3, #16
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f895 	bl	8003f90 <xTaskRemoveFromEventList>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d012      	beq.n	8002e92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <xQueueGenericReset+0xcc>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	e009      	b.n	8002e92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3310      	adds	r3, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fef2 	bl	8002c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3324      	adds	r3, #36	; 0x24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff feed 	bl	8002c6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e92:	f001 fdbf 	bl	8004a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	e000ed04 	.word	0xe000ed04

08002ea4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xQueueGenericCreate+0x2a>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	613b      	str	r3, [r7, #16]
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3348      	adds	r3, #72	; 0x48
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fe4b 	bl	8004b78 <pvPortMalloc>
 8002ee2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d011      	beq.n	8002f0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3348      	adds	r3, #72	; 0x48
 8002ef2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002efc:	79fa      	ldrb	r2, [r7, #7]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f805 	bl	8002f18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e002      	b.n	8002f3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f46:	2101      	movs	r1, #1
 8002f48:	69b8      	ldr	r0, [r7, #24]
 8002f4a:	f7ff ff43 	bl	8002dd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	613b      	str	r3, [r7, #16]
}
 8002f78:	bf00      	nop
 8002f7a:	e7fe      	b.n	8002f7a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d90a      	bls.n	8002f9a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	60fb      	str	r3, [r7, #12]
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff80 	bl	8002ea4 <xQueueGenericCreate>
 8002fa4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002fb2:	697b      	ldr	r3, [r7, #20]
	}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <xQueueGenericSend+0x32>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <xQueueGenericSend+0x40>
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <xQueueGenericSend+0x44>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <xQueueGenericSend+0x46>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <xQueueGenericSend+0x60>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d103      	bne.n	800302a <xQueueGenericSend+0x6e>
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <xQueueGenericSend+0x72>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGenericSend+0x74>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xQueueGenericSend+0x8e>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	623b      	str	r3, [r7, #32]
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304a:	f001 f961 	bl	8004310 <xTaskGetSchedulerState>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <xQueueGenericSend+0x9e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <xQueueGenericSend+0xa2>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueGenericSend+0xa4>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueGenericSend+0xbe>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61fb      	str	r3, [r7, #28]
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800307a:	f001 fc9b 	bl	80049b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <xQueueGenericSend+0xd4>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d129      	bne.n	80030e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003096:	f000 f9d1 	bl	800343c <prvCopyDataToQueue>
 800309a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	3324      	adds	r3, #36	; 0x24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 ff71 	bl	8003f90 <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030b4:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <xQueueGenericSend+0x1f8>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	e00a      	b.n	80030dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030cc:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <xQueueGenericSend+0x1f8>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030dc:	f001 fc9a 	bl	8004a14 <vPortExitCritical>
				return pdPASS;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e063      	b.n	80031ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ea:	f001 fc93 	bl	8004a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e05c      	b.n	80031ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 ffa9 	bl	8004054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003102:	2301      	movs	r3, #1
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003106:	f001 fc85 	bl	8004a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310a:	f000 fd59 	bl	8003bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800310e:	f001 fc51 	bl	80049b4 <vPortEnterCritical>
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003118:	b25b      	sxtb	r3, r3
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d103      	bne.n	8003128 <xQueueGenericSend+0x16c>
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800312e:	b25b      	sxtb	r3, r3
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d103      	bne.n	800313e <xQueueGenericSend+0x182>
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800313e:	f001 fc69 	bl	8004a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003142:	1d3a      	adds	r2, r7, #4
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ff98 	bl	8004080 <xTaskCheckForTimeOut>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d124      	bne.n	80031a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003158:	f000 fa42 	bl	80035e0 <prvIsQueueFull>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	3310      	adds	r3, #16
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f000 feec 	bl	8003f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003172:	f000 f9cd 	bl	8003510 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003176:	f000 fd31 	bl	8003bdc <xTaskResumeAll>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	f47f af7c 	bne.w	800307a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <xQueueGenericSend+0x1f8>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	e772      	b.n	800307a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003196:	f000 f9bb 	bl	8003510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800319a:	f000 fd1f 	bl	8003bdc <xTaskResumeAll>
 800319e:	e76c      	b.n	800307a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031a2:	f000 f9b5 	bl	8003510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a6:	f000 fd19 	bl	8003bdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3738      	adds	r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08e      	sub	sp, #56	; 0x38
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	623b      	str	r3, [r7, #32]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	61fb      	str	r3, [r7, #28]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003208:	f001 f882 	bl	8004310 <xTaskGetSchedulerState>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <xQueueSemaphoreTake+0x60>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <xQueueSemaphoreTake+0x64>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <xQueueSemaphoreTake+0x66>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	61bb      	str	r3, [r7, #24]
}
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003238:	f001 fbbc 	bl	80049b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	d024      	beq.n	8003292 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	1e5a      	subs	r2, r3, #1
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003258:	f001 fa02 	bl	8004660 <pvTaskIncrementMutexHeldCount>
 800325c:	4602      	mov	r2, r0
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00f      	beq.n	800328a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	3310      	adds	r3, #16
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fe8e 	bl	8003f90 <xTaskRemoveFromEventList>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800327a:	4b54      	ldr	r3, [pc, #336]	; (80033cc <xQueueSemaphoreTake+0x214>)
 800327c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800328a:	f001 fbc3 	bl	8004a14 <vPortExitCritical>
				return pdPASS;
 800328e:	2301      	movs	r3, #1
 8003290:	e097      	b.n	80033c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	617b      	str	r3, [r7, #20]
}
 80032b0:	bf00      	nop
 80032b2:	e7fe      	b.n	80032b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80032b4:	f001 fbae 	bl	8004a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e082      	b.n	80033c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fec4 	bl	8004054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032d0:	f001 fba0 	bl	8004a14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032d4:	f000 fc74 	bl	8003bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032d8:	f001 fb6c 	bl	80049b4 <vPortEnterCritical>
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032e2:	b25b      	sxtb	r3, r3
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d103      	bne.n	80032f2 <xQueueSemaphoreTake+0x13a>
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d103      	bne.n	8003308 <xQueueSemaphoreTake+0x150>
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003308:	f001 fb84 	bl	8004a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800330c:	463a      	mov	r2, r7
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 feb3 	bl	8004080 <xTaskCheckForTimeOut>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d132      	bne.n	8003386 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003322:	f000 f947 	bl	80035b4 <prvIsQueueEmpty>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d026      	beq.n	800337a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003334:	f001 fb3e 	bl	80049b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f001 f805 	bl	800434c <xTaskPriorityInherit>
 8003342:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003344:	f001 fb66 	bl	8004a14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	3324      	adds	r3, #36	; 0x24
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fdf9 	bl	8003f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003358:	f000 f8da 	bl	8003510 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800335c:	f000 fc3e 	bl	8003bdc <xTaskResumeAll>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	f47f af68 	bne.w	8003238 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <xQueueSemaphoreTake+0x214>)
 800336a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	e75e      	b.n	8003238 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800337a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800337c:	f000 f8c8 	bl	8003510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003380:	f000 fc2c 	bl	8003bdc <xTaskResumeAll>
 8003384:	e758      	b.n	8003238 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003388:	f000 f8c2 	bl	8003510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800338c:	f000 fc26 	bl	8003bdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003392:	f000 f90f 	bl	80035b4 <prvIsQueueEmpty>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	f43f af4d 	beq.w	8003238 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80033a4:	f001 fb06 	bl	80049b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80033a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033aa:	f000 f82f 	bl	800340c <prvGetDisinheritPriorityAfterTimeout>
 80033ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 f8c4 	bl	8004544 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80033bc:	f001 fb2a 	bl	8004a14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3738      	adds	r7, #56	; 0x38
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	60bb      	str	r3, [r7, #8]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80033f4:	f001 fade 	bl	80049b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80033fe:	f001 fb09 	bl	8004a14 <vPortExitCritical>

	return uxReturn;
 8003402:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d006      	beq.n	800342a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e001      	b.n	800342e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800342e:	68fb      	ldr	r3, [r7, #12]
	}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d14d      	bne.n	80034fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ffe6 	bl	8004438 <xTaskPriorityDisinherit>
 800346c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	e043      	b.n	80034fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d119      	bne.n	80034b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6858      	ldr	r0, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	461a      	mov	r2, r3
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	f001 fe50 	bl	800512c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	441a      	add	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d32b      	bcc.n	80034fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	e026      	b.n	80034fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68d8      	ldr	r0, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	461a      	mov	r2, r3
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	f001 fe36 	bl	800512c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	425b      	negs	r3, r3
 80034ca:	441a      	add	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d207      	bcs.n	80034ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	425b      	negs	r3, r3
 80034e6:	441a      	add	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d105      	bne.n	80034fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003506:	697b      	ldr	r3, [r7, #20]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003518:	f001 fa4c 	bl	80049b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003522:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003524:	e011      	b.n	800354a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3324      	adds	r3, #36	; 0x24
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fd2c 	bl	8003f90 <xTaskRemoveFromEventList>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800353e:	f000 fe01 	bl	8004144 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	3b01      	subs	r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800354a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	dce9      	bgt.n	8003526 <prvUnlockQueue+0x16>
 8003552:	e000      	b.n	8003556 <prvUnlockQueue+0x46>
					break;
 8003554:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800355e:	f001 fa59 	bl	8004a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003562:	f001 fa27 	bl	80049b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800356c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800356e:	e011      	b.n	8003594 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d012      	beq.n	800359e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3310      	adds	r3, #16
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fd07 	bl	8003f90 <xTaskRemoveFromEventList>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003588:	f000 fddc 	bl	8004144 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800358c:	7bbb      	ldrb	r3, [r7, #14]
 800358e:	3b01      	subs	r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003598:	2b00      	cmp	r3, #0
 800359a:	dce9      	bgt.n	8003570 <prvUnlockQueue+0x60>
 800359c:	e000      	b.n	80035a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800359e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	22ff      	movs	r2, #255	; 0xff
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035a8:	f001 fa34 	bl	8004a14 <vPortExitCritical>
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035bc:	f001 f9fa 	bl	80049b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e001      	b.n	80035d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035d2:	f001 fa1f 	bl	8004a14 <vPortExitCritical>

	return xReturn;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035e8:	f001 f9e4 	bl	80049b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d102      	bne.n	80035fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e001      	b.n	8003602 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003602:	f001 fa07 	bl	8004a14 <vPortExitCritical>

	return xReturn;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	; 0x38
 8003614:	af04      	add	r7, sp, #16
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	623b      	str	r3, [r7, #32]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xTaskCreateStatic+0x46>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61fb      	str	r3, [r7, #28]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003656:	23a0      	movs	r3, #160	; 0xa0
 8003658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2ba0      	cmp	r3, #160	; 0xa0
 800365e:	d00a      	beq.n	8003676 <xTaskCreateStatic+0x66>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	61bb      	str	r3, [r7, #24]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003676:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01e      	beq.n	80036bc <xTaskCreateStatic+0xac>
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01b      	beq.n	80036bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800368c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	2202      	movs	r2, #2
 8003692:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003696:	2300      	movs	r3, #0
 8003698:	9303      	str	r3, [sp, #12]
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f850 	bl	8003754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036b6:	f000 f8eb 	bl	8003890 <prvAddNewTaskToReadyList>
 80036ba:	e001      	b.n	80036c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036c0:	697b      	ldr	r3, [r7, #20]
	}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b08c      	sub	sp, #48	; 0x30
 80036ce:	af04      	add	r7, sp, #16
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036da:	88fb      	ldrh	r3, [r7, #6]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fa4a 	bl	8004b78 <pvPortMalloc>
 80036e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036ec:	20a0      	movs	r0, #160	; 0xa0
 80036ee:	f001 fa43 	bl	8004b78 <pvPortMalloc>
 80036f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003700:	e005      	b.n	800370e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003702:	6978      	ldr	r0, [r7, #20]
 8003704:	f001 fb04 	bl	8004d10 <vPortFree>
 8003708:	e001      	b.n	800370e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d017      	beq.n	8003744 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800371c:	88fa      	ldrh	r2, [r7, #6]
 800371e:	2300      	movs	r3, #0
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f80e 	bl	8003754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003738:	69f8      	ldr	r0, [r7, #28]
 800373a:	f000 f8a9 	bl	8003890 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e002      	b.n	800374a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800374a:	69bb      	ldr	r3, [r7, #24]
	}
 800374c:	4618      	mov	r0, r3
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800376c:	3b01      	subs	r3, #1
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f023 0307 	bic.w	r3, r3, #7
 800377a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	617b      	str	r3, [r7, #20]
}
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01f      	beq.n	80037e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	e012      	b.n	80037ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	7819      	ldrb	r1, [r3, #0]
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	3334      	adds	r3, #52	; 0x34
 80037b8:	460a      	mov	r2, r1
 80037ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d9e9      	bls.n	80037a8 <prvInitialiseNewTask+0x54>
 80037d4:	e000      	b.n	80037d8 <prvInitialiseNewTask+0x84>
			{
				break;
 80037d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e0:	e003      	b.n	80037ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	2b06      	cmp	r3, #6
 80037ee:	d901      	bls.n	80037f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037f0:	2306      	movs	r3, #6
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	3304      	adds	r3, #4
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fa4e 	bl	8002cac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	3318      	adds	r3, #24
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fa49 	bl	8002cac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	f1c3 0207 	rsb	r2, r3, #7
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	2200      	movs	r2, #0
 8003834:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	2200      	movs	r2, #0
 800383c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	334c      	adds	r3, #76	; 0x4c
 8003844:	224c      	movs	r2, #76	; 0x4c
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fbdb 	bl	8005004 <memset>
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <prvInitialiseNewTask+0x130>)
 8003852:	651a      	str	r2, [r3, #80]	; 0x50
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <prvInitialiseNewTask+0x134>)
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <prvInitialiseNewTask+0x138>)
 800385e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	69b8      	ldr	r0, [r7, #24]
 8003866:	f000 ff75 	bl	8004754 <pxPortInitialiseStack>
 800386a:	4602      	mov	r2, r0
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800387c:	bf00      	nop
 800387e:	3720      	adds	r7, #32
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20004128 	.word	0x20004128
 8003888:	20004190 	.word	0x20004190
 800388c:	200041f8 	.word	0x200041f8

08003890 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003898:	f001 f88c 	bl	80049b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <prvAddNewTaskToReadyList+0xb8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <prvAddNewTaskToReadyList+0xb8>)
 80038a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <prvAddNewTaskToReadyList+0xbc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038ae:	4a27      	ldr	r2, [pc, #156]	; (800394c <prvAddNewTaskToReadyList+0xbc>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <prvAddNewTaskToReadyList+0xb8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d110      	bne.n	80038de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038bc:	f000 fc66 	bl	800418c <prvInitialiseTaskLists>
 80038c0:	e00d      	b.n	80038de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <prvAddNewTaskToReadyList+0xc0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <prvAddNewTaskToReadyList+0xbc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d802      	bhi.n	80038de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038d8:	4a1c      	ldr	r2, [pc, #112]	; (800394c <prvAddNewTaskToReadyList+0xbc>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <prvAddNewTaskToReadyList+0xc4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3301      	adds	r3, #1
 80038e4:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <prvAddNewTaskToReadyList+0xc4>)
 80038e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	2201      	movs	r2, #1
 80038ee:	409a      	lsls	r2, r3
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <prvAddNewTaskToReadyList+0xc8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <prvAddNewTaskToReadyList+0xc8>)
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4a15      	ldr	r2, [pc, #84]	; (800395c <prvAddNewTaskToReadyList+0xcc>)
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f7ff f9d8 	bl	8002cc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003916:	f001 f87d 	bl	8004a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <prvAddNewTaskToReadyList+0xc0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <prvAddNewTaskToReadyList+0xbc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	429a      	cmp	r2, r3
 800392e:	d207      	bcs.n	8003940 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <prvAddNewTaskToReadyList+0xd0>)
 8003932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200004d4 	.word	0x200004d4
 800394c:	200003d4 	.word	0x200003d4
 8003950:	200004e0 	.word	0x200004e0
 8003954:	200004f0 	.word	0x200004f0
 8003958:	200004dc 	.word	0x200004dc
 800395c:	200003d8 	.word	0x200003d8
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800396c:	f001 f822 	bl	80049b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <vTaskDelete+0x18>
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <vTaskDelete+0xf8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e000      	b.n	800397e <vTaskDelete+0x1a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3304      	adds	r3, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff f9fb 	bl	8002d80 <uxListRemove>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d115      	bne.n	80039bc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003994:	4932      	ldr	r1, [pc, #200]	; (8003a60 <vTaskDelete+0xfc>)
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <vTaskDelete+0x58>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	2201      	movs	r2, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43da      	mvns	r2, r3
 80039b2:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <vTaskDelete+0x100>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4013      	ands	r3, r2
 80039b8:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <vTaskDelete+0x100>)
 80039ba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3318      	adds	r3, #24
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f9d9 	bl	8002d80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <vTaskDelete+0x104>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a24      	ldr	r2, [pc, #144]	; (8003a68 <vTaskDelete+0x104>)
 80039d6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80039d8:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <vTaskDelete+0xf8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10b      	bne.n	80039fa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4619      	mov	r1, r3
 80039e8:	4820      	ldr	r0, [pc, #128]	; (8003a6c <vTaskDelete+0x108>)
 80039ea:	f7ff f96c 	bl	8002cc6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <vTaskDelete+0x10c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <vTaskDelete+0x10c>)
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e009      	b.n	8003a0e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <vTaskDelete+0x110>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <vTaskDelete+0x110>)
 8003a02:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fc2f 	bl	8004268 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003a0a:	f000 fc61 	bl	80042d0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003a0e:	f001 f801 	bl	8004a14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <vTaskDelete+0x114>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01b      	beq.n	8003a52 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <vTaskDelete+0xf8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d116      	bne.n	8003a52 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <vTaskDelete+0x118>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <vTaskDelete+0xde>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60bb      	str	r3, [r7, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <vTaskDelete+0x11c>)
 8003a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200003d4 	.word	0x200003d4
 8003a60:	200003d8 	.word	0x200003d8
 8003a64:	200004dc 	.word	0x200004dc
 8003a68:	200004f0 	.word	0x200004f0
 8003a6c:	200004a8 	.word	0x200004a8
 8003a70:	200004bc 	.word	0x200004bc
 8003a74:	200004d4 	.word	0x200004d4
 8003a78:	200004e0 	.word	0x200004e0
 8003a7c:	200004fc 	.word	0x200004fc
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a96:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <vTaskDelay+0x60>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <vTaskDelay+0x30>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60bb      	str	r3, [r7, #8]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ab4:	f000 f884 	bl	8003bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ab8:	2100      	movs	r1, #0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fde4 	bl	8004688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ac0:	f000 f88c 	bl	8003bdc <xTaskResumeAll>
 8003ac4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <vTaskDelay+0x64>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	200004fc 	.word	0x200004fc
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003afa:	463a      	mov	r2, r7
 8003afc:	1d39      	adds	r1, r7, #4
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fcea 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b08:	6839      	ldr	r1, [r7, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	9202      	str	r2, [sp, #8]
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	460a      	mov	r2, r1
 8003b1a:	4921      	ldr	r1, [pc, #132]	; (8003ba0 <vTaskStartScheduler+0xb4>)
 8003b1c:	4821      	ldr	r0, [pc, #132]	; (8003ba4 <vTaskStartScheduler+0xb8>)
 8003b1e:	f7ff fd77 	bl	8003610 <xTaskCreateStatic>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <vTaskStartScheduler+0xbc>)
 8003b26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <vTaskStartScheduler+0xbc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b30:	2301      	movs	r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e001      	b.n	8003b3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d11b      	bne.n	8003b78 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	613b      	str	r3, [r7, #16]
}
 8003b52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b54:	4b15      	ldr	r3, [pc, #84]	; (8003bac <vTaskStartScheduler+0xc0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	334c      	adds	r3, #76	; 0x4c
 8003b5a:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <vTaskStartScheduler+0xc4>)
 8003b5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <vTaskStartScheduler+0xc8>)
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <vTaskStartScheduler+0xcc>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <vTaskStartScheduler+0xd0>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b72:	f000 fe7d 	bl	8004870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b76:	e00e      	b.n	8003b96 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d10a      	bne.n	8003b96 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	60fb      	str	r3, [r7, #12]
}
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <vTaskStartScheduler+0xa8>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	08005410 	.word	0x08005410
 8003ba4:	0800415d 	.word	0x0800415d
 8003ba8:	200004f8 	.word	0x200004f8
 8003bac:	200003d4 	.word	0x200003d4
 8003bb0:	20000068 	.word	0x20000068
 8003bb4:	200004f4 	.word	0x200004f4
 8003bb8:	200004e0 	.word	0x200004e0
 8003bbc:	200004d8 	.word	0x200004d8

08003bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <vTaskSuspendAll+0x18>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	4a03      	ldr	r2, [pc, #12]	; (8003bd8 <vTaskSuspendAll+0x18>)
 8003bcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	200004fc 	.word	0x200004fc

08003bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <xTaskResumeAll+0x114>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	603b      	str	r3, [r7, #0]
}
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c08:	f000 fed4 	bl	80049b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <xTaskResumeAll+0x114>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	4a37      	ldr	r2, [pc, #220]	; (8003cf0 <xTaskResumeAll+0x114>)
 8003c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <xTaskResumeAll+0x114>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d161      	bne.n	8003ce2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c1e:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <xTaskResumeAll+0x118>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d05d      	beq.n	8003ce2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c26:	e02e      	b.n	8003c86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c28:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <xTaskResumeAll+0x11c>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3318      	adds	r3, #24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f8a3 	bl	8002d80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff f89e 	bl	8002d80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2201      	movs	r2, #1
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <xTaskResumeAll+0x120>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <xTaskResumeAll+0x120>)
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <xTaskResumeAll+0x124>)
 8003c64:	441a      	add	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7ff f82a 	bl	8002cc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <xTaskResumeAll+0x128>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d302      	bcc.n	8003c86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <xTaskResumeAll+0x12c>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <xTaskResumeAll+0x11c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1cc      	bne.n	8003c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c94:	f000 fb1c 	bl	80042d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c98:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <xTaskResumeAll+0x130>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ca4:	f000 f836 	bl	8003d14 <xTaskIncrementTick>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <xTaskResumeAll+0x12c>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f1      	bne.n	8003ca4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <xTaskResumeAll+0x130>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <xTaskResumeAll+0x12c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <xTaskResumeAll+0x134>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ce2:	f000 fe97 	bl	8004a14 <vPortExitCritical>

	return xAlreadyYielded;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200004fc 	.word	0x200004fc
 8003cf4:	200004d4 	.word	0x200004d4
 8003cf8:	20000494 	.word	0x20000494
 8003cfc:	200004dc 	.word	0x200004dc
 8003d00:	200003d8 	.word	0x200003d8
 8003d04:	200003d4 	.word	0x200003d4
 8003d08:	200004e8 	.word	0x200004e8
 8003d0c:	200004e4 	.word	0x200004e4
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <xTaskIncrementTick+0x144>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 808e 	bne.w	8003e44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d28:	4b4c      	ldr	r3, [pc, #304]	; (8003e5c <xTaskIncrementTick+0x148>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d30:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <xTaskIncrementTick+0x148>)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d120      	bne.n	8003d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d3c:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <xTaskIncrementTick+0x14c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	603b      	str	r3, [r7, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <xTaskIncrementTick+0x46>
 8003d5c:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <xTaskIncrementTick+0x14c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <xTaskIncrementTick+0x150>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a3e      	ldr	r2, [pc, #248]	; (8003e60 <xTaskIncrementTick+0x14c>)
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	; (8003e64 <xTaskIncrementTick+0x150>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <xTaskIncrementTick+0x154>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <xTaskIncrementTick+0x154>)
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	f000 faa9 	bl	80042d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <xTaskIncrementTick+0x158>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d348      	bcc.n	8003e1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d88:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <xTaskIncrementTick+0x14c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d92:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <xTaskIncrementTick+0x158>)
 8003d94:	f04f 32ff 	mov.w	r2, #4294967295
 8003d98:	601a      	str	r2, [r3, #0]
					break;
 8003d9a:	e03e      	b.n	8003e1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <xTaskIncrementTick+0x14c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d203      	bcs.n	8003dbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003db4:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <xTaskIncrementTick+0x158>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dba:	e02e      	b.n	8003e1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe ffdd 	bl	8002d80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe ffd4 	bl	8002d80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <xTaskIncrementTick+0x15c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <xTaskIncrementTick+0x15c>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <xTaskIncrementTick+0x160>)
 8003df8:	441a      	add	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7fe ff60 	bl	8002cc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <xTaskIncrementTick+0x164>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d3b9      	bcc.n	8003d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e18:	e7b6      	b.n	8003d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <xTaskIncrementTick+0x164>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	4914      	ldr	r1, [pc, #80]	; (8003e74 <xTaskIncrementTick+0x160>)
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d901      	bls.n	8003e36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <xTaskIncrementTick+0x168>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	e004      	b.n	8003e4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <xTaskIncrementTick+0x16c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <xTaskIncrementTick+0x16c>)
 8003e4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e4e:	697b      	ldr	r3, [r7, #20]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	200004fc 	.word	0x200004fc
 8003e5c:	200004d8 	.word	0x200004d8
 8003e60:	2000048c 	.word	0x2000048c
 8003e64:	20000490 	.word	0x20000490
 8003e68:	200004ec 	.word	0x200004ec
 8003e6c:	200004f4 	.word	0x200004f4
 8003e70:	200004dc 	.word	0x200004dc
 8003e74:	200003d8 	.word	0x200003d8
 8003e78:	200003d4 	.word	0x200003d4
 8003e7c:	200004e8 	.word	0x200004e8
 8003e80:	200004e4 	.word	0x200004e4

08003e84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e8a:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <vTaskSwitchContext+0xac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e92:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <vTaskSwitchContext+0xb0>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e98:	e044      	b.n	8003f24 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <vTaskSwitchContext+0xb0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <vTaskSwitchContext+0xb4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	fab3 f383 	clz	r3, r3
 8003eac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003eae:	7afb      	ldrb	r3, [r7, #11]
 8003eb0:	f1c3 031f 	rsb	r3, r3, #31
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	4921      	ldr	r1, [pc, #132]	; (8003f3c <vTaskSwitchContext+0xb8>)
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	607b      	str	r3, [r7, #4]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <vTaskSwitchContext+0x5a>
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <vTaskSwitchContext+0xb8>)
 8003eec:	4413      	add	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	3308      	adds	r3, #8
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d104      	bne.n	8003f10 <vTaskSwitchContext+0x8c>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <vTaskSwitchContext+0xbc>)
 8003f18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <vTaskSwitchContext+0xbc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	334c      	adds	r3, #76	; 0x4c
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <vTaskSwitchContext+0xc0>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	200004fc 	.word	0x200004fc
 8003f34:	200004e8 	.word	0x200004e8
 8003f38:	200004dc 	.word	0x200004dc
 8003f3c:	200003d8 	.word	0x200003d8
 8003f40:	200003d4 	.word	0x200003d4
 8003f44:	20000068 	.word	0x20000068

08003f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60fb      	str	r3, [r7, #12]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <vTaskPlaceOnEventList+0x44>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3318      	adds	r3, #24
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe fec9 	bl	8002d0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	6838      	ldr	r0, [r7, #0]
 8003f80:	f000 fb82 	bl	8004688 <prvAddCurrentTaskToDelayedList>
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200003d4 	.word	0x200003d4

08003f90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60fb      	str	r3, [r7, #12]
}
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	3318      	adds	r3, #24
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fedd 	bl	8002d80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	; (800403c <xTaskRemoveFromEventList+0xac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11c      	bne.n	8004008 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fed4 	bl	8002d80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	2201      	movs	r2, #1
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <xTaskRemoveFromEventList+0xb0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	4a16      	ldr	r2, [pc, #88]	; (8004040 <xTaskRemoveFromEventList+0xb0>)
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4a13      	ldr	r2, [pc, #76]	; (8004044 <xTaskRemoveFromEventList+0xb4>)
 8003ff8:	441a      	add	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7fe fe60 	bl	8002cc6 <vListInsertEnd>
 8004006:	e005      	b.n	8004014 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	3318      	adds	r3, #24
 800400c:	4619      	mov	r1, r3
 800400e:	480e      	ldr	r0, [pc, #56]	; (8004048 <xTaskRemoveFromEventList+0xb8>)
 8004010:	f7fe fe59 	bl	8002cc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <xTaskRemoveFromEventList+0xbc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	429a      	cmp	r2, r3
 8004020:	d905      	bls.n	800402e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <xTaskRemoveFromEventList+0xc0>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e001      	b.n	8004032 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004032:	697b      	ldr	r3, [r7, #20]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200004fc 	.word	0x200004fc
 8004040:	200004dc 	.word	0x200004dc
 8004044:	200003d8 	.word	0x200003d8
 8004048:	20000494 	.word	0x20000494
 800404c:	200003d4 	.word	0x200003d4
 8004050:	200004e8 	.word	0x200004e8

08004054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <vTaskInternalSetTimeOutState+0x24>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <vTaskInternalSetTimeOutState+0x28>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	200004ec 	.word	0x200004ec
 800407c:	200004d8 	.word	0x200004d8

08004080 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	613b      	str	r3, [r7, #16]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040c2:	f000 fc77 	bl	80049b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <xTaskCheckForTimeOut+0xbc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d102      	bne.n	80040e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e023      	b.n	800412e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <xTaskCheckForTimeOut+0xc0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d007      	beq.n	8004102 <xTaskCheckForTimeOut+0x82>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	e015      	b.n	800412e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	d20b      	bcs.n	8004124 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff9b 	bl	8004054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e004      	b.n	800412e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800412a:	2301      	movs	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800412e:	f000 fc71 	bl	8004a14 <vPortExitCritical>

	return xReturn;
 8004132:	69fb      	ldr	r3, [r7, #28]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200004d8 	.word	0x200004d8
 8004140:	200004ec 	.word	0x200004ec

08004144 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <vTaskMissedYield+0x14>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
}
 800414e:	bf00      	nop
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	200004e8 	.word	0x200004e8

0800415c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004164:	f000 f852 	bl	800420c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <prvIdleTask+0x28>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d9f9      	bls.n	8004164 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <prvIdleTask+0x2c>)
 8004172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004180:	e7f0      	b.n	8004164 <prvIdleTask+0x8>
 8004182:	bf00      	nop
 8004184:	200003d8 	.word	0x200003d8
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	e00c      	b.n	80041b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <prvInitialiseTaskLists+0x60>)
 80041a4:	4413      	add	r3, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fd60 	bl	8002c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3301      	adds	r3, #1
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d9ef      	bls.n	8004198 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041b8:	480d      	ldr	r0, [pc, #52]	; (80041f0 <prvInitialiseTaskLists+0x64>)
 80041ba:	f7fe fd57 	bl	8002c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041be:	480d      	ldr	r0, [pc, #52]	; (80041f4 <prvInitialiseTaskLists+0x68>)
 80041c0:	f7fe fd54 	bl	8002c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041c4:	480c      	ldr	r0, [pc, #48]	; (80041f8 <prvInitialiseTaskLists+0x6c>)
 80041c6:	f7fe fd51 	bl	8002c6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041ca:	480c      	ldr	r0, [pc, #48]	; (80041fc <prvInitialiseTaskLists+0x70>)
 80041cc:	f7fe fd4e 	bl	8002c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041d0:	480b      	ldr	r0, [pc, #44]	; (8004200 <prvInitialiseTaskLists+0x74>)
 80041d2:	f7fe fd4b 	bl	8002c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <prvInitialiseTaskLists+0x78>)
 80041d8:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <prvInitialiseTaskLists+0x64>)
 80041da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <prvInitialiseTaskLists+0x7c>)
 80041de:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <prvInitialiseTaskLists+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200003d8 	.word	0x200003d8
 80041f0:	20000464 	.word	0x20000464
 80041f4:	20000478 	.word	0x20000478
 80041f8:	20000494 	.word	0x20000494
 80041fc:	200004a8 	.word	0x200004a8
 8004200:	200004c0 	.word	0x200004c0
 8004204:	2000048c 	.word	0x2000048c
 8004208:	20000490 	.word	0x20000490

0800420c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004212:	e019      	b.n	8004248 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004214:	f000 fbce 	bl	80049b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <prvCheckTasksWaitingTermination+0x50>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe fdab 	bl	8002d80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <prvCheckTasksWaitingTermination+0x54>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3b01      	subs	r3, #1
 8004230:	4a0b      	ldr	r2, [pc, #44]	; (8004260 <prvCheckTasksWaitingTermination+0x54>)
 8004232:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <prvCheckTasksWaitingTermination+0x58>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3b01      	subs	r3, #1
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <prvCheckTasksWaitingTermination+0x58>)
 800423c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800423e:	f000 fbe9 	bl	8004a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f810 	bl	8004268 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <prvCheckTasksWaitingTermination+0x58>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e1      	bne.n	8004214 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200004a8 	.word	0x200004a8
 8004260:	200004d4 	.word	0x200004d4
 8004264:	200004bc 	.word	0x200004bc

08004268 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	334c      	adds	r3, #76	; 0x4c
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fedd 	bl	8005034 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fd41 	bl	8004d10 <vPortFree>
				vPortFree( pxTCB );
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fd3e 	bl	8004d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004294:	e018      	b.n	80042c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800429c:	2b01      	cmp	r3, #1
 800429e:	d103      	bne.n	80042a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fd35 	bl	8004d10 <vPortFree>
	}
 80042a6:	e00f      	b.n	80042c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d00a      	beq.n	80042c8 <prvDeleteTCB+0x60>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60fb      	str	r3, [r7, #12]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <prvDeleteTCB+0x5e>
	}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <prvResetNextTaskUnblockTime+0x38>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <prvResetNextTaskUnblockTime+0x3c>)
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042e8:	e008      	b.n	80042fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <prvResetNextTaskUnblockTime+0x38>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <prvResetNextTaskUnblockTime+0x3c>)
 80042fa:	6013      	str	r3, [r2, #0]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	2000048c 	.word	0x2000048c
 800430c:	200004f4 	.word	0x200004f4

08004310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <xTaskGetSchedulerState+0x34>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800431e:	2301      	movs	r3, #1
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	e008      	b.n	8004336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004324:	4b08      	ldr	r3, [pc, #32]	; (8004348 <xTaskGetSchedulerState+0x38>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800432c:	2302      	movs	r3, #2
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	e001      	b.n	8004336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004336:	687b      	ldr	r3, [r7, #4]
	}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	200004e0 	.word	0x200004e0
 8004348:	200004fc 	.word	0x200004fc

0800434c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d05e      	beq.n	8004420 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	4b31      	ldr	r3, [pc, #196]	; (800442c <xTaskPriorityInherit+0xe0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	429a      	cmp	r2, r3
 800436e:	d24e      	bcs.n	800440e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	db06      	blt.n	8004386 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004378:	4b2c      	ldr	r3, [pc, #176]	; (800442c <xTaskPriorityInherit+0xe0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f1c3 0207 	rsb	r2, r3, #7
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6959      	ldr	r1, [r3, #20]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4a26      	ldr	r2, [pc, #152]	; (8004430 <xTaskPriorityInherit+0xe4>)
 8004398:	4413      	add	r3, r2
 800439a:	4299      	cmp	r1, r3
 800439c:	d12f      	bne.n	80043fe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fcec 	bl	8002d80 <uxListRemove>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	2201      	movs	r2, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43da      	mvns	r2, r3
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <xTaskPriorityInherit+0xe8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4013      	ands	r3, r2
 80043c0:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <xTaskPriorityInherit+0xe8>)
 80043c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <xTaskPriorityInherit+0xe0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	2201      	movs	r2, #1
 80043d4:	409a      	lsls	r2, r3
 80043d6:	4b17      	ldr	r3, [pc, #92]	; (8004434 <xTaskPriorityInherit+0xe8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <xTaskPriorityInherit+0xe8>)
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4a10      	ldr	r2, [pc, #64]	; (8004430 <xTaskPriorityInherit+0xe4>)
 80043ee:	441a      	add	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7fe fc65 	bl	8002cc6 <vListInsertEnd>
 80043fc:	e004      	b.n	8004408 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <xTaskPriorityInherit+0xe0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e008      	b.n	8004420 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <xTaskPriorityInherit+0xe0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d201      	bcs.n	8004420 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800441c:	2301      	movs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004420:	68fb      	ldr	r3, [r7, #12]
	}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200003d4 	.word	0x200003d4
 8004430:	200003d8 	.word	0x200003d8
 8004434:	200004dc 	.word	0x200004dc

08004438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d06e      	beq.n	800452c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800444e:	4b3a      	ldr	r3, [pc, #232]	; (8004538 <xTaskPriorityDisinherit+0x100>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d00a      	beq.n	800446e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	429a      	cmp	r2, r3
 80044a0:	d044      	beq.n	800452c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d140      	bne.n	800452c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fc66 	bl	8002d80 <uxListRemove>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d115      	bne.n	80044e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	491f      	ldr	r1, [pc, #124]	; (800453c <xTaskPriorityDisinherit+0x104>)
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <xTaskPriorityDisinherit+0xae>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2201      	movs	r2, #1
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <xTaskPriorityDisinherit+0x108>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4013      	ands	r3, r2
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <xTaskPriorityDisinherit+0x108>)
 80044e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	f1c3 0207 	rsb	r2, r3, #7
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	2201      	movs	r2, #1
 8004500:	409a      	lsls	r2, r3
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <xTaskPriorityDisinherit+0x108>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <xTaskPriorityDisinherit+0x108>)
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <xTaskPriorityDisinherit+0x104>)
 800451a:	441a      	add	r2, r3
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f7fe fbcf 	bl	8002cc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800452c:	697b      	ldr	r3, [r7, #20]
	}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	200003d4 	.word	0x200003d4
 800453c:	200003d8 	.word	0x200003d8
 8004540:	200004dc 	.word	0x200004dc

08004544 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004552:	2301      	movs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d077      	beq.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60fb      	str	r3, [r7, #12]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d902      	bls.n	800458a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	e002      	b.n	8004590 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	429a      	cmp	r2, r3
 8004598:	d058      	beq.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d153      	bne.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d10a      	bne.n	80045c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	60bb      	str	r3, [r7, #8]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	db04      	blt.n	80045e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f1c3 0207 	rsb	r2, r3, #7
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	6959      	ldr	r1, [r3, #20]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4a19      	ldr	r2, [pc, #100]	; (8004658 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80045f2:	4413      	add	r3, r2
 80045f4:	4299      	cmp	r1, r3
 80045f6:	d129      	bne.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fbbf 	bl	8002d80 <uxListRemove>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	2201      	movs	r2, #1
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43da      	mvns	r2, r3
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4013      	ands	r3, r2
 800461a:	4a10      	ldr	r2, [pc, #64]	; (800465c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800461c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	2201      	movs	r2, #1
 8004624:	409a      	lsls	r2, r3
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4313      	orrs	r3, r2
 800462c:	4a0b      	ldr	r2, [pc, #44]	; (800465c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4a06      	ldr	r2, [pc, #24]	; (8004658 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800463e:	441a      	add	r2, r3
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f7fe fb3d 	bl	8002cc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800464c:	bf00      	nop
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	200003d4 	.word	0x200003d4
 8004658:	200003d8 	.word	0x200003d8
 800465c:	200004dc 	.word	0x200004dc

08004660 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004664:	4b07      	ldr	r3, [pc, #28]	; (8004684 <pvTaskIncrementMutexHeldCount+0x24>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <pvTaskIncrementMutexHeldCount+0x24>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004672:	3201      	adds	r2, #1
 8004674:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004676:	4b03      	ldr	r3, [pc, #12]	; (8004684 <pvTaskIncrementMutexHeldCount+0x24>)
 8004678:	681b      	ldr	r3, [r3, #0]
	}
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	200003d4 	.word	0x200003d4

08004688 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004692:	4b29      	ldr	r3, [pc, #164]	; (8004738 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fb6e 	bl	8002d80 <uxListRemove>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	2201      	movs	r2, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43da      	mvns	r2, r3
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4013      	ands	r3, r2
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d10a      	bne.n	80046e0 <prvAddCurrentTaskToDelayedList+0x58>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	481a      	ldr	r0, [pc, #104]	; (8004744 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046da:	f7fe faf4 	bl	8002cc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046de:	e026      	b.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d209      	bcs.n	800470c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3304      	adds	r3, #4
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fe fb02 	bl	8002d0e <vListInsert>
}
 800470a:	e010      	b.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <prvAddCurrentTaskToDelayedList+0xc4>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fe faf8 	bl	8002d0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d202      	bcs.n	800472e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6013      	str	r3, [r2, #0]
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200004d8 	.word	0x200004d8
 800473c:	200003d4 	.word	0x200003d4
 8004740:	200004dc 	.word	0x200004dc
 8004744:	200004c0 	.word	0x200004c0
 8004748:	20000490 	.word	0x20000490
 800474c:	2000048c 	.word	0x2000048c
 8004750:	200004f4 	.word	0x200004f4

08004754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3b04      	subs	r3, #4
 8004764:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800476c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3b04      	subs	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b04      	subs	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004784:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <pxPortInitialiseStack+0x64>)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b14      	subs	r3, #20
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b04      	subs	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f06f 0202 	mvn.w	r2, #2
 80047a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3b20      	subs	r3, #32
 80047a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	080047bd 	.word	0x080047bd

080047bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <prvTaskExitError+0x54>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d00a      	beq.n	80047e6 <prvTaskExitError+0x2a>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <prvTaskExitError+0x28>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	60bb      	str	r3, [r7, #8]
}
 80047f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047fa:	bf00      	nop
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0fc      	beq.n	80047fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20000018 	.word	0x20000018
	...

08004820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <pxCurrentTCBConst2>)
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	6808      	ldr	r0, [r1, #0]
 8004826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	f380 8809 	msr	PSP, r0
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8811 	msr	BASEPRI, r0
 800483a:	4770      	bx	lr
 800483c:	f3af 8000 	nop.w

08004840 <pxCurrentTCBConst2>:
 8004840:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop

08004848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004848:	4808      	ldr	r0, [pc, #32]	; (800486c <prvPortStartFirstTask+0x24>)
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f380 8808 	msr	MSP, r0
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8814 	msr	CONTROL, r0
 800485a:	b662      	cpsie	i
 800485c:	b661      	cpsie	f
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	df00      	svc	0
 8004868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800486a:	bf00      	nop
 800486c:	e000ed08 	.word	0xe000ed08

08004870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <xPortStartScheduler+0x120>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a46      	ldr	r2, [pc, #280]	; (8004994 <xPortStartScheduler+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10a      	bne.n	8004896 <xPortStartScheduler+0x26>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004896:	4b3e      	ldr	r3, [pc, #248]	; (8004990 <xPortStartScheduler+0x120>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <xPortStartScheduler+0x128>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10a      	bne.n	80048b6 <xPortStartScheduler+0x46>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60fb      	str	r3, [r7, #12]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048b6:	4b39      	ldr	r3, [pc, #228]	; (800499c <xPortStartScheduler+0x12c>)
 80048b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	22ff      	movs	r2, #255	; 0xff
 80048c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <xPortStartScheduler+0x130>)
 80048dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <xPortStartScheduler+0x134>)
 80048e0:	2207      	movs	r2, #7
 80048e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048e4:	e009      	b.n	80048fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <xPortStartScheduler+0x134>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <xPortStartScheduler+0x134>)
 80048ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d0ef      	beq.n	80048e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004906:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <xPortStartScheduler+0x134>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1c3 0307 	rsb	r3, r3, #7
 800490e:	2b04      	cmp	r3, #4
 8004910:	d00a      	beq.n	8004928 <xPortStartScheduler+0xb8>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <xPortStartScheduler+0x134>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <xPortStartScheduler+0x134>)
 8004930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <xPortStartScheduler+0x134>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800493a:	4a1a      	ldr	r2, [pc, #104]	; (80049a4 <xPortStartScheduler+0x134>)
 800493c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <xPortStartScheduler+0x138>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <xPortStartScheduler+0x138>)
 800494c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <xPortStartScheduler+0x138>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <xPortStartScheduler+0x138>)
 8004958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800495c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800495e:	f000 f8dd 	bl	8004b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <xPortStartScheduler+0x13c>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004968:	f000 f8fc 	bl	8004b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <xPortStartScheduler+0x140>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <xPortStartScheduler+0x140>)
 8004972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004978:	f7ff ff66 	bl	8004848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800497c:	f7ff fa82 	bl	8003e84 <vTaskSwitchContext>
	prvTaskExitError();
 8004980:	f7ff ff1c 	bl	80047bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00
 8004994:	410fc271 	.word	0x410fc271
 8004998:	410fc270 	.word	0x410fc270
 800499c:	e000e400 	.word	0xe000e400
 80049a0:	20000500 	.word	0x20000500
 80049a4:	20000504 	.word	0x20000504
 80049a8:	e000ed20 	.word	0xe000ed20
 80049ac:	20000018 	.word	0x20000018
 80049b0:	e000ef34 	.word	0xe000ef34

080049b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	607b      	str	r3, [r7, #4]
}
 80049cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <vPortEnterCritical+0x58>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <vPortEnterCritical+0x58>)
 80049d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <vPortEnterCritical+0x58>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10f      	bne.n	8004a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <vPortEnterCritical+0x5c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	603b      	str	r3, [r7, #0]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <vPortEnterCritical+0x4a>
	}
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	20000018 	.word	0x20000018
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <vPortExitCritical+0x50>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <vPortExitCritical+0x24>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	607b      	str	r3, [r7, #4]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vPortExitCritical+0x50>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <vPortExitCritical+0x50>)
 8004a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <vPortExitCritical+0x50>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d105      	bne.n	8004a56 <vPortExitCritical+0x42>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000018 	.word	0x20000018
	...

08004a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a70:	f3ef 8009 	mrs	r0, PSP
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <pxCurrentTCBConst>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f01e 0f10 	tst.w	lr, #16
 8004a80:	bf08      	it	eq
 8004a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a94:	f380 8811 	msr	BASEPRI, r0
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f7ff f9f0 	bl	8003e84 <vTaskSwitchContext>
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f380 8811 	msr	BASEPRI, r0
 8004aac:	bc09      	pop	{r0, r3}
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab6:	f01e 0f10 	tst.w	lr, #16
 8004aba:	bf08      	it	eq
 8004abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ac0:	f380 8809 	msr	PSP, r0
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst>:
 8004ad0:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
}
 8004af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004af2:	f7ff f90f 	bl	8003d14 <xTaskIncrementTick>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <SysTick_Handler+0x40>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f383 8811 	msr	BASEPRI, r3
}
 8004b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vPortSetupTimerInterrupt+0x34>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <vPortSetupTimerInterrupt+0x38>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <vPortSetupTimerInterrupt+0x3c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <vPortSetupTimerInterrupt+0x40>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <vPortSetupTimerInterrupt+0x44>)
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <vPortSetupTimerInterrupt+0x34>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	e000e010 	.word	0xe000e010
 8004b54:	e000e018 	.word	0xe000e018
 8004b58:	2000000c 	.word	0x2000000c
 8004b5c:	10624dd3 	.word	0x10624dd3
 8004b60:	e000e014 	.word	0xe000e014

08004b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b74 <vPortEnableVFP+0x10>
 8004b68:	6801      	ldr	r1, [r0, #0]
 8004b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b6e:	6001      	str	r1, [r0, #0]
 8004b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b72:	bf00      	nop
 8004b74:	e000ed88 	.word	0xe000ed88

08004b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b84:	f7ff f81c 	bl	8003bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b88:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <pvPortMalloc+0x180>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b90:	f000 f920 	bl	8004dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b94:	4b59      	ldr	r3, [pc, #356]	; (8004cfc <pvPortMalloc+0x184>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 8093 	bne.w	8004cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01d      	beq.n	8004be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ba8:	2208      	movs	r2, #8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f023 0307 	bic.w	r3, r3, #7
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <pvPortMalloc+0x6c>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	617b      	str	r3, [r7, #20]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d06e      	beq.n	8004cc8 <pvPortMalloc+0x150>
 8004bea:	4b45      	ldr	r3, [pc, #276]	; (8004d00 <pvPortMalloc+0x188>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d869      	bhi.n	8004cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bf4:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <pvPortMalloc+0x18c>)
 8004bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bf8:	4b42      	ldr	r3, [pc, #264]	; (8004d04 <pvPortMalloc+0x18c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bfe:	e004      	b.n	8004c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d903      	bls.n	8004c1c <pvPortMalloc+0xa4>
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f1      	bne.n	8004c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <pvPortMalloc+0x180>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d050      	beq.n	8004cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	4413      	add	r3, r2
 8004c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	2308      	movs	r3, #8
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d91f      	bls.n	8004c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <pvPortMalloc+0xf8>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	613b      	str	r3, [r7, #16]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1ad2      	subs	r2, r2, r3
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c82:	69b8      	ldr	r0, [r7, #24]
 8004c84:	f000 f908 	bl	8004e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <pvPortMalloc+0x188>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <pvPortMalloc+0x188>)
 8004c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <pvPortMalloc+0x188>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <pvPortMalloc+0x190>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d203      	bcs.n	8004caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <pvPortMalloc+0x188>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <pvPortMalloc+0x190>)
 8004ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <pvPortMalloc+0x184>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cbe:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <pvPortMalloc+0x194>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <pvPortMalloc+0x194>)
 8004cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cc8:	f7fe ff88 	bl	8003bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <pvPortMalloc+0x174>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60fb      	str	r3, [r7, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <pvPortMalloc+0x172>
	return pvReturn;
 8004cec:	69fb      	ldr	r3, [r7, #28]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3728      	adds	r7, #40	; 0x28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20004110 	.word	0x20004110
 8004cfc:	20004124 	.word	0x20004124
 8004d00:	20004114 	.word	0x20004114
 8004d04:	20004108 	.word	0x20004108
 8004d08:	20004118 	.word	0x20004118
 8004d0c:	2000411c 	.word	0x2000411c

08004d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d04d      	beq.n	8004dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d22:	2308      	movs	r3, #8
 8004d24:	425b      	negs	r3, r3
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <vPortFree+0xb8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <vPortFree+0x44>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60fb      	str	r3, [r7, #12]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <vPortFree+0x62>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60bb      	str	r3, [r7, #8]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <vPortFree+0xb8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01e      	beq.n	8004dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11a      	bne.n	8004dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <vPortFree+0xb8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	401a      	ands	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d98:	f7fe ff12 	bl	8003bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <vPortFree+0xbc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <vPortFree+0xbc>)
 8004da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004daa:	6938      	ldr	r0, [r7, #16]
 8004dac:	f000 f874 	bl	8004e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <vPortFree+0xc0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <vPortFree+0xc0>)
 8004db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dba:	f7fe ff0f 	bl	8003bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dbe:	bf00      	nop
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20004124 	.word	0x20004124
 8004dcc:	20004114 	.word	0x20004114
 8004dd0:	20004120 	.word	0x20004120

08004dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004de0:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <prvHeapInit+0xac>)
 8004de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00c      	beq.n	8004e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3307      	adds	r3, #7
 8004df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0307 	bic.w	r3, r3, #7
 8004dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <prvHeapInit+0xac>)
 8004e04:	4413      	add	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <prvHeapInit+0xb0>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <prvHeapInit+0xb0>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e20:	2208      	movs	r2, #8
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <prvHeapInit+0xb4>)
 8004e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <prvHeapInit+0xb4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <prvHeapInit+0xb4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	1ad2      	subs	r2, r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <prvHeapInit+0xb4>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <prvHeapInit+0xb8>)
 8004e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <prvHeapInit+0xbc>)
 8004e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <prvHeapInit+0xc0>)
 8004e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	20000508 	.word	0x20000508
 8004e84:	20004108 	.word	0x20004108
 8004e88:	20004110 	.word	0x20004110
 8004e8c:	20004118 	.word	0x20004118
 8004e90:	20004114 	.word	0x20004114
 8004e94:	20004124 	.word	0x20004124

08004e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ea0:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <prvInsertBlockIntoFreeList+0xac>)
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e002      	b.n	8004eac <prvInsertBlockIntoFreeList+0x14>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d8f7      	bhi.n	8004ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d108      	bne.n	8004eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d118      	bne.n	8004f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <prvInsertBlockIntoFreeList+0xb0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d00d      	beq.n	8004f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e008      	b.n	8004f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <prvInsertBlockIntoFreeList+0xb0>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e003      	b.n	8004f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d002      	beq.n	8004f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20004108 	.word	0x20004108
 8004f48:	20004110 	.word	0x20004110

08004f4c <__itoa>:
 8004f4c:	1e93      	subs	r3, r2, #2
 8004f4e:	2b22      	cmp	r3, #34	; 0x22
 8004f50:	b510      	push	{r4, lr}
 8004f52:	460c      	mov	r4, r1
 8004f54:	d904      	bls.n	8004f60 <__itoa+0x14>
 8004f56:	2300      	movs	r3, #0
 8004f58:	700b      	strb	r3, [r1, #0]
 8004f5a:	461c      	mov	r4, r3
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	bd10      	pop	{r4, pc}
 8004f60:	2a0a      	cmp	r2, #10
 8004f62:	d109      	bne.n	8004f78 <__itoa+0x2c>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	da07      	bge.n	8004f78 <__itoa+0x2c>
 8004f68:	232d      	movs	r3, #45	; 0x2d
 8004f6a:	700b      	strb	r3, [r1, #0]
 8004f6c:	4240      	negs	r0, r0
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4421      	add	r1, r4
 8004f72:	f000 f805 	bl	8004f80 <__utoa>
 8004f76:	e7f1      	b.n	8004f5c <__itoa+0x10>
 8004f78:	2100      	movs	r1, #0
 8004f7a:	e7f9      	b.n	8004f70 <__itoa+0x24>

08004f7c <itoa>:
 8004f7c:	f7ff bfe6 	b.w	8004f4c <__itoa>

08004f80 <__utoa>:
 8004f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f82:	4c1f      	ldr	r4, [pc, #124]	; (8005000 <__utoa+0x80>)
 8004f84:	b08b      	sub	sp, #44	; 0x2c
 8004f86:	4605      	mov	r5, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	466e      	mov	r6, sp
 8004f8c:	f104 0c20 	add.w	ip, r4, #32
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	6861      	ldr	r1, [r4, #4]
 8004f94:	4637      	mov	r7, r6
 8004f96:	c703      	stmia	r7!, {r0, r1}
 8004f98:	3408      	adds	r4, #8
 8004f9a:	4564      	cmp	r4, ip
 8004f9c:	463e      	mov	r6, r7
 8004f9e:	d1f7      	bne.n	8004f90 <__utoa+0x10>
 8004fa0:	7921      	ldrb	r1, [r4, #4]
 8004fa2:	7139      	strb	r1, [r7, #4]
 8004fa4:	1e91      	subs	r1, r2, #2
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	6038      	str	r0, [r7, #0]
 8004faa:	2922      	cmp	r1, #34	; 0x22
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	d904      	bls.n	8004fbc <__utoa+0x3c>
 8004fb2:	7019      	strb	r1, [r3, #0]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	b00b      	add	sp, #44	; 0x2c
 8004fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fbc:	1e58      	subs	r0, r3, #1
 8004fbe:	4684      	mov	ip, r0
 8004fc0:	fbb5 f7f2 	udiv	r7, r5, r2
 8004fc4:	fb02 5617 	mls	r6, r2, r7, r5
 8004fc8:	3628      	adds	r6, #40	; 0x28
 8004fca:	446e      	add	r6, sp
 8004fcc:	460c      	mov	r4, r1
 8004fce:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004fd2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004fd6:	462e      	mov	r6, r5
 8004fd8:	42b2      	cmp	r2, r6
 8004fda:	f101 0101 	add.w	r1, r1, #1
 8004fde:	463d      	mov	r5, r7
 8004fe0:	d9ee      	bls.n	8004fc0 <__utoa+0x40>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	545a      	strb	r2, [r3, r1]
 8004fe6:	1919      	adds	r1, r3, r4
 8004fe8:	1aa5      	subs	r5, r4, r2
 8004fea:	42aa      	cmp	r2, r5
 8004fec:	dae3      	bge.n	8004fb6 <__utoa+0x36>
 8004fee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004ff2:	780e      	ldrb	r6, [r1, #0]
 8004ff4:	7006      	strb	r6, [r0, #0]
 8004ff6:	3201      	adds	r2, #1
 8004ff8:	f801 5901 	strb.w	r5, [r1], #-1
 8004ffc:	e7f4      	b.n	8004fe8 <__utoa+0x68>
 8004ffe:	bf00      	nop
 8005000:	08005430 	.word	0x08005430

08005004 <memset>:
 8005004:	4402      	add	r2, r0
 8005006:	4603      	mov	r3, r0
 8005008:	4293      	cmp	r3, r2
 800500a:	d100      	bne.n	800500e <memset+0xa>
 800500c:	4770      	bx	lr
 800500e:	f803 1b01 	strb.w	r1, [r3], #1
 8005012:	e7f9      	b.n	8005008 <memset+0x4>

08005014 <strcat>:
 8005014:	b510      	push	{r4, lr}
 8005016:	4602      	mov	r2, r0
 8005018:	7814      	ldrb	r4, [r2, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	3201      	adds	r2, #1
 800501e:	2c00      	cmp	r4, #0
 8005020:	d1fa      	bne.n	8005018 <strcat+0x4>
 8005022:	3b01      	subs	r3, #1
 8005024:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005028:	f803 2f01 	strb.w	r2, [r3, #1]!
 800502c:	2a00      	cmp	r2, #0
 800502e:	d1f9      	bne.n	8005024 <strcat+0x10>
 8005030:	bd10      	pop	{r4, pc}
	...

08005034 <_reclaim_reent>:
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <_reclaim_reent+0xa8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4283      	cmp	r3, r0
 800503a:	b570      	push	{r4, r5, r6, lr}
 800503c:	4604      	mov	r4, r0
 800503e:	d04b      	beq.n	80050d8 <_reclaim_reent+0xa4>
 8005040:	69c3      	ldr	r3, [r0, #28]
 8005042:	b143      	cbz	r3, 8005056 <_reclaim_reent+0x22>
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d144      	bne.n	80050d4 <_reclaim_reent+0xa0>
 800504a:	69e3      	ldr	r3, [r4, #28]
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	b111      	cbz	r1, 8005056 <_reclaim_reent+0x22>
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f879 	bl	8005148 <_free_r>
 8005056:	6961      	ldr	r1, [r4, #20]
 8005058:	b111      	cbz	r1, 8005060 <_reclaim_reent+0x2c>
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f874 	bl	8005148 <_free_r>
 8005060:	69e1      	ldr	r1, [r4, #28]
 8005062:	b111      	cbz	r1, 800506a <_reclaim_reent+0x36>
 8005064:	4620      	mov	r0, r4
 8005066:	f000 f86f 	bl	8005148 <_free_r>
 800506a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800506c:	b111      	cbz	r1, 8005074 <_reclaim_reent+0x40>
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f86a 	bl	8005148 <_free_r>
 8005074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005076:	b111      	cbz	r1, 800507e <_reclaim_reent+0x4a>
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f865 	bl	8005148 <_free_r>
 800507e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005080:	b111      	cbz	r1, 8005088 <_reclaim_reent+0x54>
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f860 	bl	8005148 <_free_r>
 8005088:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800508a:	b111      	cbz	r1, 8005092 <_reclaim_reent+0x5e>
 800508c:	4620      	mov	r0, r4
 800508e:	f000 f85b 	bl	8005148 <_free_r>
 8005092:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005094:	b111      	cbz	r1, 800509c <_reclaim_reent+0x68>
 8005096:	4620      	mov	r0, r4
 8005098:	f000 f856 	bl	8005148 <_free_r>
 800509c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800509e:	b111      	cbz	r1, 80050a6 <_reclaim_reent+0x72>
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 f851 	bl	8005148 <_free_r>
 80050a6:	6a23      	ldr	r3, [r4, #32]
 80050a8:	b1b3      	cbz	r3, 80050d8 <_reclaim_reent+0xa4>
 80050aa:	4620      	mov	r0, r4
 80050ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050b0:	4718      	bx	r3
 80050b2:	5949      	ldr	r1, [r1, r5]
 80050b4:	b941      	cbnz	r1, 80050c8 <_reclaim_reent+0x94>
 80050b6:	3504      	adds	r5, #4
 80050b8:	69e3      	ldr	r3, [r4, #28]
 80050ba:	2d80      	cmp	r5, #128	; 0x80
 80050bc:	68d9      	ldr	r1, [r3, #12]
 80050be:	d1f8      	bne.n	80050b2 <_reclaim_reent+0x7e>
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 f841 	bl	8005148 <_free_r>
 80050c6:	e7c0      	b.n	800504a <_reclaim_reent+0x16>
 80050c8:	680e      	ldr	r6, [r1, #0]
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 f83c 	bl	8005148 <_free_r>
 80050d0:	4631      	mov	r1, r6
 80050d2:	e7ef      	b.n	80050b4 <_reclaim_reent+0x80>
 80050d4:	2500      	movs	r5, #0
 80050d6:	e7ef      	b.n	80050b8 <_reclaim_reent+0x84>
 80050d8:	bd70      	pop	{r4, r5, r6, pc}
 80050da:	bf00      	nop
 80050dc:	20000068 	.word	0x20000068

080050e0 <__libc_init_array>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	4d0d      	ldr	r5, [pc, #52]	; (8005118 <__libc_init_array+0x38>)
 80050e4:	4c0d      	ldr	r4, [pc, #52]	; (800511c <__libc_init_array+0x3c>)
 80050e6:	1b64      	subs	r4, r4, r5
 80050e8:	10a4      	asrs	r4, r4, #2
 80050ea:	2600      	movs	r6, #0
 80050ec:	42a6      	cmp	r6, r4
 80050ee:	d109      	bne.n	8005104 <__libc_init_array+0x24>
 80050f0:	4d0b      	ldr	r5, [pc, #44]	; (8005120 <__libc_init_array+0x40>)
 80050f2:	4c0c      	ldr	r4, [pc, #48]	; (8005124 <__libc_init_array+0x44>)
 80050f4:	f000 f880 	bl	80051f8 <_init>
 80050f8:	1b64      	subs	r4, r4, r5
 80050fa:	10a4      	asrs	r4, r4, #2
 80050fc:	2600      	movs	r6, #0
 80050fe:	42a6      	cmp	r6, r4
 8005100:	d105      	bne.n	800510e <__libc_init_array+0x2e>
 8005102:	bd70      	pop	{r4, r5, r6, pc}
 8005104:	f855 3b04 	ldr.w	r3, [r5], #4
 8005108:	4798      	blx	r3
 800510a:	3601      	adds	r6, #1
 800510c:	e7ee      	b.n	80050ec <__libc_init_array+0xc>
 800510e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005112:	4798      	blx	r3
 8005114:	3601      	adds	r6, #1
 8005116:	e7f2      	b.n	80050fe <__libc_init_array+0x1e>
 8005118:	08005460 	.word	0x08005460
 800511c:	08005460 	.word	0x08005460
 8005120:	08005460 	.word	0x08005460
 8005124:	08005464 	.word	0x08005464

08005128 <__retarget_lock_acquire_recursive>:
 8005128:	4770      	bx	lr

0800512a <__retarget_lock_release_recursive>:
 800512a:	4770      	bx	lr

0800512c <memcpy>:
 800512c:	440a      	add	r2, r1
 800512e:	4291      	cmp	r1, r2
 8005130:	f100 33ff 	add.w	r3, r0, #4294967295
 8005134:	d100      	bne.n	8005138 <memcpy+0xc>
 8005136:	4770      	bx	lr
 8005138:	b510      	push	{r4, lr}
 800513a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800513e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005142:	4291      	cmp	r1, r2
 8005144:	d1f9      	bne.n	800513a <memcpy+0xe>
 8005146:	bd10      	pop	{r4, pc}

08005148 <_free_r>:
 8005148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800514a:	2900      	cmp	r1, #0
 800514c:	d044      	beq.n	80051d8 <_free_r+0x90>
 800514e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005152:	9001      	str	r0, [sp, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f1a1 0404 	sub.w	r4, r1, #4
 800515a:	bfb8      	it	lt
 800515c:	18e4      	addlt	r4, r4, r3
 800515e:	f000 f83f 	bl	80051e0 <__malloc_lock>
 8005162:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <_free_r+0x94>)
 8005164:	9801      	ldr	r0, [sp, #4]
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	b933      	cbnz	r3, 8005178 <_free_r+0x30>
 800516a:	6063      	str	r3, [r4, #4]
 800516c:	6014      	str	r4, [r2, #0]
 800516e:	b003      	add	sp, #12
 8005170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005174:	f000 b83a 	b.w	80051ec <__malloc_unlock>
 8005178:	42a3      	cmp	r3, r4
 800517a:	d908      	bls.n	800518e <_free_r+0x46>
 800517c:	6825      	ldr	r5, [r4, #0]
 800517e:	1961      	adds	r1, r4, r5
 8005180:	428b      	cmp	r3, r1
 8005182:	bf01      	itttt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	1949      	addeq	r1, r1, r5
 800518a:	6021      	streq	r1, [r4, #0]
 800518c:	e7ed      	b.n	800516a <_free_r+0x22>
 800518e:	461a      	mov	r2, r3
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b10b      	cbz	r3, 8005198 <_free_r+0x50>
 8005194:	42a3      	cmp	r3, r4
 8005196:	d9fa      	bls.n	800518e <_free_r+0x46>
 8005198:	6811      	ldr	r1, [r2, #0]
 800519a:	1855      	adds	r5, r2, r1
 800519c:	42a5      	cmp	r5, r4
 800519e:	d10b      	bne.n	80051b8 <_free_r+0x70>
 80051a0:	6824      	ldr	r4, [r4, #0]
 80051a2:	4421      	add	r1, r4
 80051a4:	1854      	adds	r4, r2, r1
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	6011      	str	r1, [r2, #0]
 80051aa:	d1e0      	bne.n	800516e <_free_r+0x26>
 80051ac:	681c      	ldr	r4, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	6053      	str	r3, [r2, #4]
 80051b2:	440c      	add	r4, r1
 80051b4:	6014      	str	r4, [r2, #0]
 80051b6:	e7da      	b.n	800516e <_free_r+0x26>
 80051b8:	d902      	bls.n	80051c0 <_free_r+0x78>
 80051ba:	230c      	movs	r3, #12
 80051bc:	6003      	str	r3, [r0, #0]
 80051be:	e7d6      	b.n	800516e <_free_r+0x26>
 80051c0:	6825      	ldr	r5, [r4, #0]
 80051c2:	1961      	adds	r1, r4, r5
 80051c4:	428b      	cmp	r3, r1
 80051c6:	bf04      	itt	eq
 80051c8:	6819      	ldreq	r1, [r3, #0]
 80051ca:	685b      	ldreq	r3, [r3, #4]
 80051cc:	6063      	str	r3, [r4, #4]
 80051ce:	bf04      	itt	eq
 80051d0:	1949      	addeq	r1, r1, r5
 80051d2:	6021      	streq	r1, [r4, #0]
 80051d4:	6054      	str	r4, [r2, #4]
 80051d6:	e7ca      	b.n	800516e <_free_r+0x26>
 80051d8:	b003      	add	sp, #12
 80051da:	bd30      	pop	{r4, r5, pc}
 80051dc:	20004264 	.word	0x20004264

080051e0 <__malloc_lock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	; (80051e8 <__malloc_lock+0x8>)
 80051e2:	f7ff bfa1 	b.w	8005128 <__retarget_lock_acquire_recursive>
 80051e6:	bf00      	nop
 80051e8:	20004260 	.word	0x20004260

080051ec <__malloc_unlock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	; (80051f4 <__malloc_unlock+0x8>)
 80051ee:	f7ff bf9c 	b.w	800512a <__retarget_lock_release_recursive>
 80051f2:	bf00      	nop
 80051f4:	20004260 	.word	0x20004260

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
