
SimpleQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006038  08006038  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000041fc  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000425c  2000425c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012782  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cdc  00000000  00000000  00032855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001038  00000000  00000000  00035538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ca0  00000000  00000000  00036570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022c07  00000000  00000000  00037210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014021  00000000  00000000  00059e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2eef  00000000  00000000  0006de38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000481c  00000000  00000000  00140d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00145544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e00 	.word	0x08005e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005e00 	.word	0x08005e00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	2000011c 	.word	0x2000011c

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fbd7 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f86b 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f8fd 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f8d1 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

SimpleQueue = xQueueCreate(5, sizeof (int));
 80005c6:	2200      	movs	r2, #0
 80005c8:	2104      	movs	r1, #4
 80005ca:	2005      	movs	r0, #5
 80005cc:	f003 f804 	bl	80035d8 <xQueueGenericCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a23      	ldr	r2, [pc, #140]	; (8000660 <main+0xb0>)
 80005d4:	6013      	str	r3, [r2, #0]
if (SimpleQueue == 0)  // Queue not created
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <main+0xb0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10d      	bne.n	80005fa <main+0x4a>
{
	  char *str = "Unable to create Integer Queue\n\n";
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0xb4>)
 80005e0:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005e2:	6838      	ldr	r0, [r7, #0]
 80005e4:	f7ff fdf4 	bl	80001d0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	6839      	ldr	r1, [r7, #0]
 80005f2:	481d      	ldr	r0, [pc, #116]	; (8000668 <main+0xb8>)
 80005f4:	f001 fea9 	bl	800234a <HAL_UART_Transmit>
 80005f8:	e00c      	b.n	8000614 <main+0x64>
}
else
{
	  char *str = "Integer Queue Created successfully\n\n";
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <main+0xbc>)
 80005fc:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff fde6 	bl	80001d0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4816      	ldr	r0, [pc, #88]	; (8000668 <main+0xb8>)
 8000610:	f001 fe9b 	bl	800234a <HAL_UART_Transmit>
}

xTaskCreate(Sender_HPT_Task, "Sender_HPT_Task", 128, NULL, 3, &Sender_HPT_Handler);
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <main+0xc0>)
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	2303      	movs	r3, #3
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2300      	movs	r3, #0
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	4914      	ldr	r1, [pc, #80]	; (8000674 <main+0xc4>)
 8000622:	4815      	ldr	r0, [pc, #84]	; (8000678 <main+0xc8>)
 8000624:	f003 fc19 	bl	8003e5a <xTaskCreate>
xTaskCreate(Sender_LPT_Task, "Sender_LPT_Task", 128, (void *)111, 2, &Sender_HPT_Handler);
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <main+0xc0>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	236f      	movs	r3, #111	; 0x6f
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	4911      	ldr	r1, [pc, #68]	; (800067c <main+0xcc>)
 8000636:	4812      	ldr	r0, [pc, #72]	; (8000680 <main+0xd0>)
 8000638:	f003 fc0f 	bl	8003e5a <xTaskCreate>
xTaskCreate(Receiver_Task, "Receiver_Task", 128, NULL, 1, &Receiver_Handler);
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <main+0xd4>)
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	490f      	ldr	r1, [pc, #60]	; (8000688 <main+0xd8>)
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <main+0xdc>)
 800064c:	f003 fc05 	bl	8003e5a <xTaskCreate>

HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	490f      	ldr	r1, [pc, #60]	; (8000690 <main+0xe0>)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <main+0xb8>)
 8000656:	f001 ff0a 	bl	800246e <HAL_UART_Receive_IT>

vTaskStartScheduler();
 800065a:	f003 fd7f 	bl	800415c <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0xae>
 8000660:	2000036c 	.word	0x2000036c
 8000664:	08005e18 	.word	0x08005e18
 8000668:	2000031c 	.word	0x2000031c
 800066c:	08005e3c 	.word	0x08005e3c
 8000670:	20000364 	.word	0x20000364
 8000674:	08005e64 	.word	0x08005e64
 8000678:	08000861 	.word	0x08000861
 800067c:	08005e74 	.word	0x08005e74
 8000680:	080008b9 	.word	0x080008b9
 8000684:	20000368 	.word	0x20000368
 8000688:	08005e84 	.word	0x08005e84
 800068c:	08000929 	.word	0x08000929
 8000690:	20000360 	.word	0x20000360

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 fed2 	bl	800544c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000708:	23a8      	movs	r3, #168	; 0xa8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fe91 	bl	8001440 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 f98e 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f8f2 	bl	8001930 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 f977 	bl	8000a44 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 fd86 	bl	80022b0 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f94b 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000031c 	.word	0x2000031c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <MX_GPIO_Init+0x9c>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_GPIO_Init+0x9c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_GPIO_Init+0x9c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_GPIO_Init+0x9c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_GPIO_Init+0x9c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_GPIO_Init+0x9c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <MX_GPIO_Init+0x9c>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_GPIO_Init+0x9c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0xa0>)
 800082e:	f000 fded 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000832:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0xa0>)
 800084c:	f000 fc42 	bl	80010d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020c00 	.word	0x40020c00

08000860 <Sender_HPT_Task>:

/* USER CODE BEGIN 4 */
void Sender_HPT_Task (void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	int i=222;
 8000868:	23de      	movs	r3, #222	; 0xde
 800086a:	60fb      	str	r3, [r7, #12]
	uint32_t TickDelay = pdMS_TO_TICKS(2000);
 800086c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000870:	617b      	str	r3, [r7, #20]
	while (1)
	{
		if (xQueueSend(SimpleQueue, &i, portMAX_DELAY) == pdPASS)
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <Sender_HPT_Task+0x4c>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	f107 010c 	add.w	r1, r7, #12
 800087a:	2300      	movs	r3, #0
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	f002 ff04 	bl	800368c <xQueueGenericSend>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d10c      	bne.n	80008a4 <Sender_HPT_Task+0x44>
		{
			char *str2 = " Successfully sent the number to the queue\nLeaving SENDER_HPT Task\n\n\n";
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Sender_HPT_Task+0x50>)
 800088c:	613b      	str	r3, [r7, #16]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 800088e:	6938      	ldr	r0, [r7, #16]
 8000890:	f7ff fc9e 	bl	80001d0 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	6939      	ldr	r1, [r7, #16]
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <Sender_HPT_Task+0x54>)
 80008a0:	f001 fd53 	bl	800234a <HAL_UART_Transmit>
		}
		vTaskDelay(TickDelay);
 80008a4:	6978      	ldr	r0, [r7, #20]
 80008a6:	f003 fc25 	bl	80040f4 <vTaskDelay>
		if (xQueueSend(SimpleQueue, &i, portMAX_DELAY) == pdPASS)
 80008aa:	e7e2      	b.n	8000872 <Sender_HPT_Task+0x12>
 80008ac:	2000036c 	.word	0x2000036c
 80008b0:	08005e94 	.word	0x08005e94
 80008b4:	2000031c 	.word	0x2000031c

080008b8 <Sender_LPT_Task>:
	}
}

void Sender_LPT_Task(void *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t TickDelay = pdMS_TO_TICKS(1000);
 80008c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c4:	617b      	str	r3, [r7, #20]

	while (1)
	{
		i = (int)argument;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60bb      	str	r3, [r7, #8]
		char *str = "Entered the LPT TAsk abot to send a number to queue\n\n\n";
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <Sender_LPT_Task+0x60>)
 80008cc:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80008ce:	6938      	ldr	r0, [r7, #16]
 80008d0:	f7ff fc7e 	bl	80001d0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	480f      	ldr	r0, [pc, #60]	; (800091c <Sender_LPT_Task+0x64>)
 80008e0:	f001 fd33 	bl	800234a <HAL_UART_Transmit>

		xQueueSend(SimpleQueue, &i, portMAX_DELAY);
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <Sender_LPT_Task+0x68>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	f107 0108 	add.w	r1, r7, #8
 80008ec:	2300      	movs	r3, #0
 80008ee:	f04f 32ff 	mov.w	r2, #4294967295
 80008f2:	f002 fecb 	bl	800368c <xQueueGenericSend>

		char *str2 = " Successfully sent the number to the queue\nLeaving SENDER_LPT Task\n\n\n";
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <Sender_LPT_Task+0x6c>)
 80008f8:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff fc68 	bl	80001d0 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	68f9      	ldr	r1, [r7, #12]
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <Sender_LPT_Task+0x64>)
 800090c:	f001 fd1d 	bl	800234a <HAL_UART_Transmit>

		vTaskDelay(TickDelay);
 8000910:	6978      	ldr	r0, [r7, #20]
 8000912:	f003 fbef 	bl	80040f4 <vTaskDelay>
	{
 8000916:	e7d6      	b.n	80008c6 <Sender_LPT_Task+0xe>
 8000918:	08005edc 	.word	0x08005edc
 800091c:	2000031c 	.word	0x2000031c
 8000920:	2000036c 	.word	0x2000036c
 8000924:	08005f14 	.word	0x08005f14

08000928 <Receiver_Task>:
	}
}

void Receiver_Task (void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09e      	sub	sp, #120	; 0x78
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	int received=0;
 8000930:	2300      	movs	r3, #0
 8000932:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t TickDelay = pdMS_TO_TICKS(5000);
 8000934:	f241 3388 	movw	r3, #5000	; 0x1388
 8000938:	677b      	str	r3, [r7, #116]	; 0x74
	while (1)
	{
		char str[100];
		if (xQueueReceive(SimpleQueue, &received, portMAX_DELAY) != pdTRUE)
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <Receiver_Task+0x6c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000942:	f04f 32ff 	mov.w	r2, #4294967295
 8000946:	4618      	mov	r0, r3
 8000948:	f003 f83a 	bl	80039c0 <xQueueReceive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d007      	beq.n	8000962 <Receiver_Task+0x3a>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue\n\n", 31, 1000);
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	221f      	movs	r2, #31
 8000958:	490f      	ldr	r1, [pc, #60]	; (8000998 <Receiver_Task+0x70>)
 800095a:	4810      	ldr	r0, [pc, #64]	; (800099c <Receiver_Task+0x74>)
 800095c:	f001 fcf5 	bl	800234a <HAL_UART_Transmit>
 8000960:	e014      	b.n	800098c <Receiver_Task+0x64>
		}
		else
		{
			sprintf(str, " Successfully RECEIVED the number %d to the queue\nLeaving RECEIVER Task\n\n\n",received);
 8000962:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	490d      	ldr	r1, [pc, #52]	; (80009a0 <Receiver_Task+0x78>)
 800096a:	4618      	mov	r0, r3
 800096c:	f004 fd4e 	bl	800540c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc2b 	bl	80001d0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f107 010c 	add.w	r1, r7, #12
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <Receiver_Task+0x74>)
 8000988:	f001 fcdf 	bl	800234a <HAL_UART_Transmit>
		}
		vTaskDelay(TickDelay);
 800098c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800098e:	f003 fbb1 	bl	80040f4 <vTaskDelay>
	{
 8000992:	e7d2      	b.n	800093a <Receiver_Task+0x12>
 8000994:	2000036c 	.word	0x2000036c
 8000998:	08005f5c 	.word	0x08005f5c
 800099c:	2000031c 	.word	0x2000031c
 80009a0:	08005f7c 	.word	0x08005f7c

080009a4 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &rx_data, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	4917      	ldr	r1, [pc, #92]	; (8000a0c <HAL_UART_RxCpltCallback+0x68>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f001 fd5c 	bl	800246e <HAL_UART_Receive_IT>
	int ToSend = 123456789;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_UART_RxCpltCallback+0x6c>)
 80009b8:	60fb      	str	r3, [r7, #12]
	if (rx_data == 'r')
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_RxCpltCallback+0x68>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b72      	cmp	r3, #114	; 0x72
 80009c0:	d11f      	bne.n	8000a02 <HAL_UART_RxCpltCallback+0x5e>
	{
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]

		if (xQueueSendToFrontFromISR(SimpleQueue, &ToSend, &xHigherPriorityTaskWoken) == pdPASS)
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_UART_RxCpltCallback+0x70>)
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	f107 0208 	add.w	r2, r7, #8
 80009ce:	f107 010c 	add.w	r1, r7, #12
 80009d2:	2301      	movs	r3, #1
 80009d4:	f002 ff58 	bl	8003888 <xQueueGenericSendFromISR>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d106      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x48>
		{
			HAL_UART_Transmit(huart, (uint8_t *)"\n\nSent from ISR\n\n", 17, 500);
 80009de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009e2:	2211      	movs	r2, #17
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <HAL_UART_RxCpltCallback+0x74>)
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f001 fcaf 	bl	800234a <HAL_UART_Transmit>
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d007      	beq.n	8000a02 <HAL_UART_RxCpltCallback+0x5e>
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_UART_RxCpltCallback+0x78>)
 80009f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	f3bf 8f4f 	dsb	sy
 80009fe:	f3bf 8f6f 	isb	sy
	}
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000360 	.word	0x20000360
 8000a10:	075bcd15 	.word	0x075bcd15
 8000a14:	2000036c 	.word	0x2000036c
 8000a18:	08005fc8 	.word	0x08005fc8
 8000a1c:	e000ed04 	.word	0xe000ed04

08000a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a32:	f000 f9bb 	bl	8000dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010000 	.word	0x40010000

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_MspInit+0x54>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <HAL_MspInit+0x54>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x54>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_MspInit+0x54>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_MspInit+0x54>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_MspInit+0x54>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	f06f 0001 	mvn.w	r0, #1
 8000a96:	f000 fa61 	bl	8000f5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_UART_MspInit+0x94>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d133      	bne.n	8000b32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_UART_MspInit+0x98>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <HAL_UART_MspInit+0x98>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_UART_MspInit+0x98>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0x98>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0x98>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_UART_MspInit+0x98>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_UART_MspInit+0x9c>)
 8000b1e:	f000 fad9 	bl	80010d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2105      	movs	r1, #5
 8000b26:	2026      	movs	r0, #38	; 0x26
 8000b28:	f000 fa18 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2c:	2026      	movs	r0, #38	; 0x26
 8000b2e:	f000 fa31 	bl	8000f94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HAL_InitTick+0xd4>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b60:	4a2e      	ldr	r2, [pc, #184]	; (8000c1c <HAL_InitTick+0xd4>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6453      	str	r3, [r2, #68]	; 0x44
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <HAL_InitTick+0xd4>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f8b6 	bl	8001cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b84:	f001 f8a0 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <HAL_InitTick+0xd8>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_InitTick+0xdc>)
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <HAL_InitTick+0xe0>)
 8000ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_InitTick+0xdc>)
 8000ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000baa:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <HAL_InitTick+0xdc>)
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <HAL_InitTick+0xdc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_InitTick+0xdc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_InitTick+0xdc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <HAL_InitTick+0xdc>)
 8000bc4:	f001 f8c6 	bl	8001d54 <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d11b      	bne.n	8000c0e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bd6:	4813      	ldr	r0, [pc, #76]	; (8000c24 <HAL_InitTick+0xdc>)
 8000bd8:	f001 f916 	bl	8001e08 <HAL_TIM_Base_Start_IT>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d111      	bne.n	8000c0e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bea:	2019      	movs	r0, #25
 8000bec:	f000 f9d2 	bl	8000f94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b0f      	cmp	r3, #15
 8000bf4:	d808      	bhi.n	8000c08 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	2019      	movs	r0, #25
 8000bfc:	f000 f9ae 	bl	8000f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_InitTick+0xe4>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e002      	b.n	8000c0e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3730      	adds	r7, #48	; 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	431bde83 	.word	0x431bde83
 8000c24:	20000370 	.word	0x20000370
 8000c28:	40010000 	.word	0x40010000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c62:	f001 f941 	bl	8001ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000370 	.word	0x20000370

08000c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <USART2_IRQHandler+0x10>)
 8000c76:	f001 fc2b 	bl	80024d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000031c 	.word	0x2000031c

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f004 fc28 	bl	8005508 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20020000 	.word	0x20020000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	200003b8 	.word	0x200003b8
 8000cec:	20004260 	.word	0x20004260

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d30:	4c0b      	ldr	r4, [pc, #44]	; (8000d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ffd7 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f004 fbe7 	bl	8005514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fc33 	bl	80005b0 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d58:	08006040 	.word	0x08006040
  ldr r2, =_sbss
 8000d5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d60:	2000425c 	.word	0x2000425c

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f8d8 	bl	8000f46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f7ff fed6 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fe58 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200003bc 	.word	0x200003bc

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200003bc 	.word	0x200003bc

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff4c 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6e:	f7ff ff61 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f7ff ffb1 	bl	8000ee0 <NVIC_EncodePriority>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff80 	bl	8000e8c <__NVIC_SetPriority>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff54 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fbe:	f7ff ff09 	bl	8000dd4 <HAL_GetTick>
 8000fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d008      	beq.n	8000fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e052      	b.n	8001088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0216 	bic.w	r2, r2, #22
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_DMA_Abort+0x62>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0208 	bic.w	r2, r2, #8
 8001020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001032:	e013      	b.n	800105c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001034:	f7ff fece 	bl	8000dd4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b05      	cmp	r3, #5
 8001040:	d90c      	bls.n	800105c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2220      	movs	r2, #32
 8001046:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e015      	b.n	8001088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e4      	bne.n	8001034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106e:	223f      	movs	r2, #63	; 0x3f
 8001070:	409a      	lsls	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d004      	beq.n	80010ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00c      	b.n	80010c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2205      	movs	r2, #5
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	e16b      	b.n	80013c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	429a      	cmp	r2, r3
 800110a:	f040 815a 	bne.w	80013c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b01      	cmp	r3, #1
 8001118:	d005      	beq.n	8001126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	2b02      	cmp	r3, #2
 8001124:	d130      	bne.n	8001188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 0201 	and.w	r2, r3, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b03      	cmp	r3, #3
 8001192:	d017      	beq.n	80011c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d123      	bne.n	8001218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0203 	and.w	r2, r3, #3
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80b4 	beq.w	80013c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b60      	ldr	r3, [pc, #384]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a5f      	ldr	r2, [pc, #380]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001276:	4a5b      	ldr	r2, [pc, #364]	; (80013e4 <HAL_GPIO_Init+0x310>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <HAL_GPIO_Init+0x314>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d02b      	beq.n	80012fa <HAL_GPIO_Init+0x226>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a51      	ldr	r2, [pc, #324]	; (80013ec <HAL_GPIO_Init+0x318>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d025      	beq.n	80012f6 <HAL_GPIO_Init+0x222>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <HAL_GPIO_Init+0x31c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x21e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4f      	ldr	r2, [pc, #316]	; (80013f4 <HAL_GPIO_Init+0x320>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x21a>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <HAL_GPIO_Init+0x324>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x216>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <HAL_GPIO_Init+0x328>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x212>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4c      	ldr	r2, [pc, #304]	; (8001400 <HAL_GPIO_Init+0x32c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x20e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <HAL_GPIO_Init+0x330>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x20a>
 80012da:	2307      	movs	r3, #7
 80012dc:	e00e      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012de:	2308      	movs	r3, #8
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x228>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	; (80013e4 <HAL_GPIO_Init+0x310>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HAL_GPIO_Init+0x334>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a32      	ldr	r2, [pc, #200]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_GPIO_Init+0x334>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_GPIO_Init+0x334>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_GPIO_Init+0x334>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_GPIO_Init+0x334>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae90 	bls.w	80010f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40021400 	.word	0x40021400
 8001400:	40021800 	.word	0x40021800
 8001404:	40021c00 	.word	0x40021c00
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e267      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d075      	beq.n	800154a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d00c      	beq.n	8001484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b85      	ldr	r3, [pc, #532]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	2b08      	cmp	r3, #8
 8001474:	d112      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001482:	d10b      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d05b      	beq.n	8001548 <HAL_RCC_OscConfig+0x108>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d157      	bne.n	8001548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e242      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x74>
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a75      	ldr	r2, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x98>
 80014be:	4b70      	ldr	r3, [pc, #448]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6f      	ldr	r2, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6c      	ldr	r2, [pc, #432]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014d8:	4b69      	ldr	r3, [pc, #420]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a68      	ldr	r2, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a65      	ldr	r2, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc6c 	bl	8000dd4 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fc68 	bl	8000dd4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e207      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xc0>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fc58 	bl	8000dd4 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fc54 	bl	8000dd4 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1f3      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b51      	ldr	r3, [pc, #324]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0xe8>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e1c7      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4937      	ldr	r1, [pc, #220]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_RCC_OscConfig+0x244>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fc0d 	bl	8000dd4 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fc09 	bl	8000dd4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1a8      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4925      	ldr	r1, [pc, #148]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_RCC_OscConfig+0x244>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbec 	bl	8000dd4 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fbe8 	bl	8000dd4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e187      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d036      	beq.n	8001698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d016      	beq.n	8001660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x248>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff fbcc 	bl	8000dd4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fbc8 	bl	8000dd4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e167      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x240>)
 8001654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x200>
 800165e:	e01b      	b.n	8001698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_OscConfig+0x248>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff fbb5 	bl	8000dd4 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e00e      	b.n	800168c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fbb1 	bl	8000dd4 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d907      	bls.n	800168c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e150      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 8001680:	40023800 	.word	0x40023800
 8001684:	42470000 	.word	0x42470000
 8001688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ea      	bne.n	800166e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8097 	beq.w	80017d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016aa:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b7d      	ldr	r3, [pc, #500]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a7c      	ldr	r2, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b7a      	ldr	r3, [pc, #488]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b77      	ldr	r3, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a73      	ldr	r2, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb71 	bl	8000dd4 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fb6d 	bl	8000dd4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e10c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x474>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x2ea>
 800171c:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a63      	ldr	r2, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x30c>
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a5b      	ldr	r2, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x324>
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 0304 	bic.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d015      	beq.n	8001798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fb32 	bl	8000dd4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff fb2e 	bl	8000dd4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0cb      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0ee      	beq.n	8001774 <HAL_RCC_OscConfig+0x334>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fb1c 	bl	8000dd4 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff fb18 	bl	8000dd4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0b5      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ee      	bne.n	80017a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a1 	beq.w	8001920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d05c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d141      	bne.n	8001876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff faec 	bl	8000dd4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fae8 	bl	8000dd4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e087      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	491b      	ldr	r1, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fac1 	bl	8000dd4 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff fabd 	bl	8000dd4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e05c      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x416>
 8001874:	e054      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff faaa 	bl	8000dd4 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff faa6 	bl	8000dd4 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e045      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x470>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x444>
 80018a2:	e03d      	b.n	8001920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e038      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000
 80018b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x4ec>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d028      	beq.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d121      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d11a      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d111      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0cc      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b68      	ldr	r3, [pc, #416]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d90c      	bls.n	800196c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b8      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d020      	beq.n	80019ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800198e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	494d      	ldr	r1, [pc, #308]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d044      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d119      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e07f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e06f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e067      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4934      	ldr	r1, [pc, #208]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff f9d8 	bl	8000dd4 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f9d4 	bl	8000dd4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e04f      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d20c      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e032      	b.n	8001ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	490e      	ldr	r1, [pc, #56]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ab6:	f000 f821 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	490a      	ldr	r1, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	5ccb      	ldrb	r3, [r1, r3]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f836 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08005fe4 	.word	0x08005fe4
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b00:	b090      	sub	sp, #64	; 0x40
 8001b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d00d      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x40>
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	f200 80a1 	bhi.w	8001c68 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2e:	e09b      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b34:	e09b      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3a:	e098      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d028      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	2200      	movs	r2, #0
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b64:	2100      	movs	r1, #0
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b68:	fb03 f201 	mul.w	r2, r3, r1
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	fb00 f303 	mul.w	r3, r0, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b76:	fba0 1202 	umull	r1, r2, r0, r2
 8001b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b82:	4413      	add	r3, r2
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	61fa      	str	r2, [r7, #28]
 8001b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b96:	f7fe fb73 	bl	8000280 <__aeabi_uldivmod>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba2:	e053      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	2200      	movs	r2, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	617a      	str	r2, [r7, #20]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bb6:	f04f 0b00 	mov.w	fp, #0
 8001bba:	4652      	mov	r2, sl
 8001bbc:	465b      	mov	r3, fp
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	0159      	lsls	r1, r3, #5
 8001bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bcc:	0150      	lsls	r0, r2, #5
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ebb2 080a 	subs.w	r8, r2, sl
 8001bd6:	eb63 090b 	sbc.w	r9, r3, fp
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001be6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bee:	ebb2 0408 	subs.w	r4, r2, r8
 8001bf2:	eb63 0509 	sbc.w	r5, r3, r9
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	00eb      	lsls	r3, r5, #3
 8001c00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c04:	00e2      	lsls	r2, r4, #3
 8001c06:	4614      	mov	r4, r2
 8001c08:	461d      	mov	r5, r3
 8001c0a:	eb14 030a 	adds.w	r3, r4, sl
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	eb45 030b 	adc.w	r3, r5, fp
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c22:	4629      	mov	r1, r5
 8001c24:	028b      	lsls	r3, r1, #10
 8001c26:	4621      	mov	r1, r4
 8001c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	028a      	lsls	r2, r1, #10
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	2200      	movs	r2, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	60fa      	str	r2, [r7, #12]
 8001c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c40:	f7fe fb1e 	bl	8000280 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c66:	e002      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3740      	adds	r7, #64	; 0x40
 8001c74:	46bd      	mov	sp, r7
 8001c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	017d7840 	.word	0x017d7840

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08005ff4 	.word	0x08005ff4

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ccc:	f7ff ffdc 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0b5b      	lsrs	r3, r3, #13
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	08005ff4 	.word	0x08005ff4

08001cf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_GetClockConfig+0x5c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_GetClockConfig+0x60>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0207 	and.w	r2, r3, #7
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e041      	b.n	8001dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f839 	bl	8001df2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4610      	mov	r0, r2
 8001d94:	f000 f9d8 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d001      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e04e      	b.n	8001ebe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d022      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d01d      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d018      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00e      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d004      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d111      	bne.n	8001eac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d010      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eaa:	e007      	b.n	8001ebc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40010400 	.word	0x40010400
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40001800 	.word	0x40001800

08001ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0202 	mvn.w	r2, #2
 8001f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8ee 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8e0 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8f1 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0204 	mvn.w	r2, #4
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8c4 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8b6 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8c7 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0208 	mvn.w	r2, #8
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f89a 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f88c 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f89d 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b10      	cmp	r3, #16
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b10      	cmp	r3, #16
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0210 	mvn.w	r2, #16
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2208      	movs	r2, #8
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f870 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f862 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f873 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10e      	bne.n	800206c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0201 	mvn.w	r2, #1
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fcda 	bl	8000a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b80      	cmp	r3, #128	; 0x80
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d107      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f902 	bl	800229c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f838 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0220 	mvn.w	r2, #32
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8cc 	bl	8002288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <TIM_Base_SetConfig+0x114>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3d      	ldr	r2, [pc, #244]	; (8002260 <TIM_Base_SetConfig+0x118>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <TIM_Base_SetConfig+0x11c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <TIM_Base_SetConfig+0x120>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3a      	ldr	r2, [pc, #232]	; (800226c <TIM_Base_SetConfig+0x124>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <TIM_Base_SetConfig+0x114>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d027      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <TIM_Base_SetConfig+0x118>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d023      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <TIM_Base_SetConfig+0x11c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <TIM_Base_SetConfig+0x120>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a29      	ldr	r2, [pc, #164]	; (800226c <TIM_Base_SetConfig+0x124>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a28      	ldr	r2, [pc, #160]	; (8002270 <TIM_Base_SetConfig+0x128>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <TIM_Base_SetConfig+0x12c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <TIM_Base_SetConfig+0x130>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0x134>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <TIM_Base_SetConfig+0x138>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <TIM_Base_SetConfig+0x13c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <TIM_Base_SetConfig+0x114>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0xf8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <TIM_Base_SetConfig+0x124>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d103      	bne.n	8002248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	615a      	str	r2, [r3, #20]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40010400 	.word	0x40010400
 8002270:	40014000 	.word	0x40014000
 8002274:	40014400 	.word	0x40014400
 8002278:	40014800 	.word	0x40014800
 800227c:	40001800 	.word	0x40001800
 8002280:	40001c00 	.word	0x40001c00
 8002284:	40002000 	.word	0x40002000

08002288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e03f      	b.n	8002342 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fbe6 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fddf 	bl	8002eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b08a      	sub	sp, #40	; 0x28
 800234e:	af02      	add	r7, sp, #8
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b20      	cmp	r3, #32
 8002368:	d17c      	bne.n	8002464 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_UART_Transmit+0x2c>
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e075      	b.n	8002466 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_UART_Transmit+0x3e>
 8002384:	2302      	movs	r3, #2
 8002386:	e06e      	b.n	8002466 <HAL_UART_Transmit+0x11c>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2221      	movs	r2, #33	; 0x21
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800239e:	f7fe fd19 	bl	8000dd4 <HAL_GetTick>
 80023a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	88fa      	ldrh	r2, [r7, #6]
 80023ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b8:	d108      	bne.n	80023cc <HAL_UART_Transmit+0x82>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d104      	bne.n	80023cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	e003      	b.n	80023d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023dc:	e02a      	b.n	8002434 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fb1f 	bl	8002a2c <UART_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e036      	b.n	8002466 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10b      	bne.n	8002416 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800240c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	3302      	adds	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e007      	b.n	8002426 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	3301      	adds	r3, #1
 8002424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1cf      	bne.n	80023de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 faef 	bl	8002a2c <UART_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e006      	b.n	8002466 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	d11d      	bne.n	80024c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_UART_Receive_IT+0x26>
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e016      	b.n	80024c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Receive_IT+0x38>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e00f      	b.n	80024c6 <HAL_UART_Receive_IT+0x58>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fb24 	bl	8002b08 <UART_Start_Receive_IT>
 80024c0:	4603      	mov	r3, r0
 80024c2:	e000      	b.n	80024c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0ba      	sub	sp, #232	; 0xe8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800250e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_UART_IRQHandler+0x66>
 8002522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fc07 	bl	8002d42 <UART_Receive_IT>
      return;
 8002534:	e256      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80de 	beq.w	80026fc <HAL_UART_IRQHandler+0x22c>
 8002540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800254c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002550:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80d1 	beq.w	80026fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800255a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_UART_IRQHandler+0xae>
 8002566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_UART_IRQHandler+0xd2>
 800258a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0202 	orr.w	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_UART_IRQHandler+0xf6>
 80025ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <HAL_UART_IRQHandler+0x126>
 80025d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f043 0208 	orr.w	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 81ed 	beq.w	80029da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_UART_IRQHandler+0x14e>
 800260c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fb92 	bl	8002d42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_UART_IRQHandler+0x17a>
 8002642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d04f      	beq.n	80026ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa9a 	bl	8002b84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d141      	bne.n	80026e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3314      	adds	r3, #20
 8002664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002674:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800268a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800268e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1d9      	bne.n	800265e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d013      	beq.n	80026da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	4a7d      	ldr	r2, [pc, #500]	; (80028ac <HAL_UART_IRQHandler+0x3dc>)
 80026b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fce6 	bl	8001090 <HAL_DMA_Abort_IT>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d4:	4610      	mov	r0, r2
 80026d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e00e      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f990 	bl	8002a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e00a      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f98c 	bl	8002a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e006      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f988 	bl	8002a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026f6:	e170      	b.n	80029da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	bf00      	nop
    return;
 80026fa:	e16e      	b.n	80029da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 814a 	bne.w	800299a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8143 	beq.w	800299a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 813c 	beq.w	800299a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	f040 80b4 	bne.w	80028b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8140 	beq.w	80029de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002766:	429a      	cmp	r2, r3
 8002768:	f080 8139 	bcs.w	80029de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002772:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277e:	f000 8088 	beq.w	8002892 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800279c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1d9      	bne.n	8002782 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3314      	adds	r3, #20
 80027d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e1      	bne.n	80027ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800281a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3314      	adds	r3, #20
 800282a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800282e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002832:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800283c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e3      	bne.n	800280a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002862:	f023 0310 	bic.w	r3, r3, #16
 8002866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002874:	65ba      	str	r2, [r7, #88]	; 0x58
 8002876:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800287a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e3      	bne.n	8002850 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fb8f 	bl	8000fb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800289a:	b29b      	uxth	r3, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8b6 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a8:	e099      	b.n	80029de <HAL_UART_IRQHandler+0x50e>
 80028aa:	bf00      	nop
 80028ac:	08002c4b 	.word	0x08002c4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808b 	beq.w	80029e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8086 	beq.w	80029e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028fa:	647a      	str	r2, [r7, #68]	; 0x44
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e3      	bne.n	80028d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3314      	adds	r3, #20
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	623b      	str	r3, [r7, #32]
   return(result);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3314      	adds	r3, #20
 800292e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002932:	633a      	str	r2, [r7, #48]	; 0x30
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e3      	bne.n	800290e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	60fb      	str	r3, [r7, #12]
   return(result);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0310 	bic.w	r3, r3, #16
 800296a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	617b      	str	r3, [r7, #20]
   return(result);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e3      	bne.n	8002954 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f83e 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002998:	e023      	b.n	80029e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_UART_IRQHandler+0x4ea>
 80029a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f95d 	bl	8002c72 <UART_Transmit_IT>
    return;
 80029b8:	e014      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00e      	beq.n	80029e4 <HAL_UART_IRQHandler+0x514>
 80029c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f99d 	bl	8002d12 <UART_EndTransmit_IT>
    return;
 80029d8:	e004      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
    return;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
      return;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
      return;
 80029e2:	bf00      	nop
  }
}
 80029e4:	37e8      	adds	r7, #232	; 0xe8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop

080029ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b090      	sub	sp, #64	; 0x40
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3c:	e050      	b.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d04c      	beq.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a4c:	f7fe f9c2 	bl	8000dd4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d241      	bcs.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	330c      	adds	r3, #12
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	e853 3f00 	ldrex	r3, [r3]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a7c:	637a      	str	r2, [r7, #52]	; 0x34
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a84:	e841 2300 	strex	r3, r2, [r1]
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e5      	bne.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3314      	adds	r3, #20
 8002aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab0:	623a      	str	r2, [r7, #32]
 8002ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	69f9      	ldr	r1, [r7, #28]
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	e841 2300 	strex	r3, r2, [r1]
 8002abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e5      	bne.n	8002a90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e00f      	b.n	8002b00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d09f      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3740      	adds	r7, #64	; 0x40
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2222      	movs	r2, #34	; 0x22
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b54:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0220 	orr.w	r2, r2, #32
 8002b74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b095      	sub	sp, #84	; 0x54
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bac:	643a      	str	r2, [r7, #64]	; 0x40
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002be0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d119      	bne.n	8002c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f023 0310 	bic.w	r3, r3, #16
 8002c12:	647b      	str	r3, [r7, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c1c:	61ba      	str	r2, [r7, #24]
 8002c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6979      	ldr	r1, [r7, #20]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c3e:	bf00      	nop
 8002c40:	3754      	adds	r7, #84	; 0x54
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff fecb 	bl	8002a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b21      	cmp	r3, #33	; 0x21
 8002c84:	d13e      	bne.n	8002d04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8e:	d114      	bne.n	8002cba <UART_Transmit_IT+0x48>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d110      	bne.n	8002cba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	1c9a      	adds	r2, r3, #2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	621a      	str	r2, [r3, #32]
 8002cb8:	e008      	b.n	8002ccc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6211      	str	r1, [r2, #32]
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10f      	bne.n	8002d00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fe5a 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08c      	sub	sp, #48	; 0x30
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b22      	cmp	r3, #34	; 0x22
 8002d54:	f040 80ab 	bne.w	8002eae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d117      	bne.n	8002d92 <UART_Receive_IT+0x50>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d113      	bne.n	8002d92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	1c9a      	adds	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d90:	e026      	b.n	8002de0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d007      	beq.n	8002db6 <UART_Receive_IT+0x74>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <UART_Receive_IT+0x82>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e008      	b.n	8002dd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4619      	mov	r1, r3
 8002dee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d15a      	bne.n	8002eaa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0220 	bic.w	r2, r2, #32
 8002e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d135      	bne.n	8002ea0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	613b      	str	r3, [r7, #16]
   return(result);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f023 0310 	bic.w	r3, r3, #16
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	623a      	str	r2, [r7, #32]
 8002e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	69f9      	ldr	r1, [r7, #28]
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e5      	bne.n	8002e3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d10a      	bne.n	8002e92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff fdbb 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
 8002e9e:	e002      	b.n	8002ea6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fd fd7f 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e002      	b.n	8002eb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3730      	adds	r7, #48	; 0x30
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b0c0      	sub	sp, #256	; 0x100
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	ea40 0301 	orr.w	r3, r0, r1
 8002ee0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f10:	f021 010c 	bic.w	r1, r1, #12
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	6999      	ldr	r1, [r3, #24]
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	ea40 0301 	orr.w	r3, r0, r1
 8002f3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b8f      	ldr	r3, [pc, #572]	; (8003184 <UART_SetConfig+0x2cc>)
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d005      	beq.n	8002f58 <UART_SetConfig+0xa0>
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b8d      	ldr	r3, [pc, #564]	; (8003188 <UART_SetConfig+0x2d0>)
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d104      	bne.n	8002f62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f58:	f7fe feb6 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 8002f5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f60:	e003      	b.n	8002f6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f62:	f7fe fe9d 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 8002f66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f74:	f040 810c 	bne.w	8003190 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	1891      	adds	r1, r2, r2
 8002f90:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f92:	415b      	adcs	r3, r3
 8002f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	eb12 0801 	adds.w	r8, r2, r1
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	eb43 0901 	adc.w	r9, r3, r1
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fba:	4690      	mov	r8, r2
 8002fbc:	4699      	mov	r9, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	eb18 0303 	adds.w	r3, r8, r3
 8002fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fc8:	462b      	mov	r3, r5
 8002fca:	eb49 0303 	adc.w	r3, r9, r3
 8002fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	18db      	adds	r3, r3, r3
 8002fea:	653b      	str	r3, [r7, #80]	; 0x50
 8002fec:	4613      	mov	r3, r2
 8002fee:	eb42 0303 	adc.w	r3, r2, r3
 8002ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ffc:	f7fd f940 	bl	8000280 <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <UART_SetConfig+0x2d4>)
 8003006:	fba3 2302 	umull	r2, r3, r3, r2
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	011c      	lsls	r4, r3, #4
 800300e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003018:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800301c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	1891      	adds	r1, r2, r2
 8003026:	64b9      	str	r1, [r7, #72]	; 0x48
 8003028:	415b      	adcs	r3, r3
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800302c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003030:	4641      	mov	r1, r8
 8003032:	eb12 0a01 	adds.w	sl, r2, r1
 8003036:	4649      	mov	r1, r9
 8003038:	eb43 0b01 	adc.w	fp, r3, r1
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003048:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800304c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003050:	4692      	mov	sl, r2
 8003052:	469b      	mov	fp, r3
 8003054:	4643      	mov	r3, r8
 8003056:	eb1a 0303 	adds.w	r3, sl, r3
 800305a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800305e:	464b      	mov	r3, r9
 8003060:	eb4b 0303 	adc.w	r3, fp, r3
 8003064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003074:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800307c:	460b      	mov	r3, r1
 800307e:	18db      	adds	r3, r3, r3
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
 8003082:	4613      	mov	r3, r2
 8003084:	eb42 0303 	adc.w	r3, r2, r3
 8003088:	647b      	str	r3, [r7, #68]	; 0x44
 800308a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800308e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003092:	f7fd f8f5 	bl	8000280 <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4611      	mov	r1, r2
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <UART_SetConfig+0x2d4>)
 800309e:	fba3 2301 	umull	r2, r3, r3, r1
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2264      	movs	r2, #100	; 0x64
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	1acb      	subs	r3, r1, r3
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <UART_SetConfig+0x2d4>)
 80030b4:	fba3 2302 	umull	r2, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c0:	441c      	add	r4, r3
 80030c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	1891      	adds	r1, r2, r2
 80030da:	63b9      	str	r1, [r7, #56]	; 0x38
 80030dc:	415b      	adcs	r3, r3
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030e4:	4641      	mov	r1, r8
 80030e6:	1851      	adds	r1, r2, r1
 80030e8:	6339      	str	r1, [r7, #48]	; 0x30
 80030ea:	4649      	mov	r1, r9
 80030ec:	414b      	adcs	r3, r1
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030fc:	4659      	mov	r1, fp
 80030fe:	00cb      	lsls	r3, r1, #3
 8003100:	4651      	mov	r1, sl
 8003102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003106:	4651      	mov	r1, sl
 8003108:	00ca      	lsls	r2, r1, #3
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	4603      	mov	r3, r0
 8003110:	4642      	mov	r2, r8
 8003112:	189b      	adds	r3, r3, r2
 8003114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003118:	464b      	mov	r3, r9
 800311a:	460a      	mov	r2, r1
 800311c:	eb42 0303 	adc.w	r3, r2, r3
 8003120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003130:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003138:	460b      	mov	r3, r1
 800313a:	18db      	adds	r3, r3, r3
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
 800313e:	4613      	mov	r3, r2
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800314a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800314e:	f7fd f897 	bl	8000280 <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <UART_SetConfig+0x2d4>)
 8003158:	fba3 1302 	umull	r1, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2164      	movs	r1, #100	; 0x64
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	; 0x32
 800316a:	4a08      	ldr	r2, [pc, #32]	; (800318c <UART_SetConfig+0x2d4>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4422      	add	r2, r4
 800317e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003180:	e106      	b.n	8003390 <UART_SetConfig+0x4d8>
 8003182:	bf00      	nop
 8003184:	40011000 	.word	0x40011000
 8003188:	40011400 	.word	0x40011400
 800318c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003194:	2200      	movs	r2, #0
 8003196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800319a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800319e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031a2:	4642      	mov	r2, r8
 80031a4:	464b      	mov	r3, r9
 80031a6:	1891      	adds	r1, r2, r2
 80031a8:	6239      	str	r1, [r7, #32]
 80031aa:	415b      	adcs	r3, r3
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031b2:	4641      	mov	r1, r8
 80031b4:	1854      	adds	r4, r2, r1
 80031b6:	4649      	mov	r1, r9
 80031b8:	eb43 0501 	adc.w	r5, r3, r1
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	00eb      	lsls	r3, r5, #3
 80031c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ca:	00e2      	lsls	r2, r4, #3
 80031cc:	4614      	mov	r4, r2
 80031ce:	461d      	mov	r5, r3
 80031d0:	4643      	mov	r3, r8
 80031d2:	18e3      	adds	r3, r4, r3
 80031d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d8:	464b      	mov	r3, r9
 80031da:	eb45 0303 	adc.w	r3, r5, r3
 80031de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031fe:	4629      	mov	r1, r5
 8003200:	008b      	lsls	r3, r1, #2
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003208:	4621      	mov	r1, r4
 800320a:	008a      	lsls	r2, r1, #2
 800320c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003210:	f7fd f836 	bl	8000280 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4b60      	ldr	r3, [pc, #384]	; (800339c <UART_SetConfig+0x4e4>)
 800321a:	fba3 2302 	umull	r2, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	011c      	lsls	r4, r3, #4
 8003222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800322c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003230:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	1891      	adds	r1, r2, r2
 800323a:	61b9      	str	r1, [r7, #24]
 800323c:	415b      	adcs	r3, r3
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003244:	4641      	mov	r1, r8
 8003246:	1851      	adds	r1, r2, r1
 8003248:	6139      	str	r1, [r7, #16]
 800324a:	4649      	mov	r1, r9
 800324c:	414b      	adcs	r3, r1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800325c:	4659      	mov	r1, fp
 800325e:	00cb      	lsls	r3, r1, #3
 8003260:	4651      	mov	r1, sl
 8003262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003266:	4651      	mov	r1, sl
 8003268:	00ca      	lsls	r2, r1, #3
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	4603      	mov	r3, r0
 8003270:	4642      	mov	r2, r8
 8003272:	189b      	adds	r3, r3, r2
 8003274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003278:	464b      	mov	r3, r9
 800327a:	460a      	mov	r2, r1
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	67bb      	str	r3, [r7, #120]	; 0x78
 800328e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800329c:	4649      	mov	r1, r9
 800329e:	008b      	lsls	r3, r1, #2
 80032a0:	4641      	mov	r1, r8
 80032a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a6:	4641      	mov	r1, r8
 80032a8:	008a      	lsls	r2, r1, #2
 80032aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032ae:	f7fc ffe7 	bl	8000280 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	4b38      	ldr	r3, [pc, #224]	; (800339c <UART_SetConfig+0x4e4>)
 80032ba:	fba3 2301 	umull	r2, r3, r3, r1
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2264      	movs	r2, #100	; 0x64
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	1acb      	subs	r3, r1, r3
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	3332      	adds	r3, #50	; 0x32
 80032cc:	4a33      	ldr	r2, [pc, #204]	; (800339c <UART_SetConfig+0x4e4>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d8:	441c      	add	r4, r3
 80032da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032de:	2200      	movs	r2, #0
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
 80032e2:	677a      	str	r2, [r7, #116]	; 0x74
 80032e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	1891      	adds	r1, r2, r2
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	415b      	adcs	r3, r3
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f8:	4641      	mov	r1, r8
 80032fa:	1851      	adds	r1, r2, r1
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	4649      	mov	r1, r9
 8003300:	414b      	adcs	r3, r1
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003310:	4659      	mov	r1, fp
 8003312:	00cb      	lsls	r3, r1, #3
 8003314:	4651      	mov	r1, sl
 8003316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331a:	4651      	mov	r1, sl
 800331c:	00ca      	lsls	r2, r1, #3
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	4603      	mov	r3, r0
 8003324:	4642      	mov	r2, r8
 8003326:	189b      	adds	r3, r3, r2
 8003328:	66bb      	str	r3, [r7, #104]	; 0x68
 800332a:	464b      	mov	r3, r9
 800332c:	460a      	mov	r2, r1
 800332e:	eb42 0303 	adc.w	r3, r2, r3
 8003332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	663b      	str	r3, [r7, #96]	; 0x60
 800333e:	667a      	str	r2, [r7, #100]	; 0x64
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800334c:	4649      	mov	r1, r9
 800334e:	008b      	lsls	r3, r1, #2
 8003350:	4641      	mov	r1, r8
 8003352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003356:	4641      	mov	r1, r8
 8003358:	008a      	lsls	r2, r1, #2
 800335a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800335e:	f7fc ff8f 	bl	8000280 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <UART_SetConfig+0x4e4>)
 8003368:	fba3 1302 	umull	r1, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	2164      	movs	r1, #100	; 0x64
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	3332      	adds	r3, #50	; 0x32
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <UART_SetConfig+0x4e4>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	f003 020f 	and.w	r2, r3, #15
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4422      	add	r2, r4
 800338e:	609a      	str	r2, [r3, #8]
}
 8003390:	bf00      	nop
 8003392:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003396:	46bd      	mov	sp, r7
 8003398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339c:	51eb851f 	.word	0x51eb851f

080033a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f103 0208 	add.w	r2, r3, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0208 	add.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e00c      	b.n	800347c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3308      	adds	r3, #8
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e002      	b.n	8003470 <vListInsert+0x2e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	d2f6      	bcs.n	800346a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6852      	ldr	r2, [r2, #4]
 80034d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d103      	bne.n	80034e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003532:	f001 fc5f 	bl	8004df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	441a      	add	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	3b01      	subs	r3, #1
 8003564:	68f9      	ldr	r1, [r7, #12]
 8003566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	441a      	add	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	22ff      	movs	r2, #255	; 0xff
 800357e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d114      	bne.n	80035b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01a      	beq.n	80035c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3310      	adds	r3, #16
 8003594:	4618      	mov	r0, r3
 8003596:	f001 f833 	bl	8004600 <xTaskRemoveFromEventList>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <xQueueGenericReset+0xcc>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	e009      	b.n	80035c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3310      	adds	r3, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fef2 	bl	80033a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3324      	adds	r3, #36	; 0x24
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff feed 	bl	80033a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035c6:	f001 fc45 	bl	8004e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035ca:	2301      	movs	r3, #1
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	e000ed04 	.word	0xe000ed04

080035d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericCreate+0x2a>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	613b      	str	r3, [r7, #16]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3348      	adds	r3, #72	; 0x48
 8003610:	4618      	mov	r0, r3
 8003612:	f001 fd11 	bl	8005038 <pvPortMalloc>
 8003616:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d011      	beq.n	8003642 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	3348      	adds	r3, #72	; 0x48
 8003626:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4613      	mov	r3, r2
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f805 	bl	800364c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003642:	69bb      	ldr	r3, [r7, #24]
	}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e002      	b.n	800366e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800367a:	2101      	movs	r1, #1
 800367c:	69b8      	ldr	r0, [r7, #24]
 800367e:	f7ff ff43 	bl	8003508 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08e      	sub	sp, #56	; 0x38
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <xQueueGenericSend+0x32>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <xQueueGenericSend+0x40>
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <xQueueGenericSend+0x44>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <xQueueGenericSend+0x46>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <xQueueGenericSend+0x60>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d103      	bne.n	80036fa <xQueueGenericSend+0x6e>
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <xQueueGenericSend+0x72>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xQueueGenericSend+0x74>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueGenericSend+0x8e>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	623b      	str	r3, [r7, #32]
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800371a:	f001 f931 	bl	8004980 <xTaskGetSchedulerState>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <xQueueGenericSend+0x9e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <xQueueGenericSend+0xa2>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <xQueueGenericSend+0xa4>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <xQueueGenericSend+0xbe>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61fb      	str	r3, [r7, #28]
}
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800374a:	f001 fb53 	bl	8004df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <xQueueGenericSend+0xd4>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d129      	bne.n	80037b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003766:	f000 fa0b 	bl	8003b80 <prvCopyDataToQueue>
 800376a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	3324      	adds	r3, #36	; 0x24
 8003778:	4618      	mov	r0, r3
 800377a:	f000 ff41 	bl	8004600 <xTaskRemoveFromEventList>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003784:	4b3f      	ldr	r3, [pc, #252]	; (8003884 <xQueueGenericSend+0x1f8>)
 8003786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	e00a      	b.n	80037ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800379c:	4b39      	ldr	r3, [pc, #228]	; (8003884 <xQueueGenericSend+0x1f8>)
 800379e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037ac:	f001 fb52 	bl	8004e54 <vPortExitCritical>
				return pdPASS;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e063      	b.n	800387c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037ba:	f001 fb4b 	bl	8004e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	e05c      	b.n	800387c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 ff79 	bl	80046c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037d6:	f001 fb3d 	bl	8004e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037da:	f000 fd29 	bl	8004230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037de:	f001 fb09 	bl	8004df4 <vPortEnterCritical>
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d103      	bne.n	80037f8 <xQueueGenericSend+0x16c>
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d103      	bne.n	800380e <xQueueGenericSend+0x182>
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800380e:	f001 fb21 	bl	8004e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003812:	1d3a      	adds	r2, r7, #4
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f000 ff68 	bl	80046f0 <xTaskCheckForTimeOut>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d124      	bne.n	8003870 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003828:	f000 faa2 	bl	8003d70 <prvIsQueueFull>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d018      	beq.n	8003864 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	3310      	adds	r3, #16
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f000 febc 	bl	80045b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003842:	f000 fa2d 	bl	8003ca0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003846:	f000 fd01 	bl	800424c <xTaskResumeAll>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f47f af7c 	bne.w	800374a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <xQueueGenericSend+0x1f8>)
 8003854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	e772      	b.n	800374a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003866:	f000 fa1b 	bl	8003ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800386a:	f000 fcef 	bl	800424c <xTaskResumeAll>
 800386e:	e76c      	b.n	800374a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003872:	f000 fa15 	bl	8003ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003876:	f000 fce9 	bl	800424c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800387a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800387c:	4618      	mov	r0, r3
 800387e:	3738      	adds	r7, #56	; 0x38
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b090      	sub	sp, #64	; 0x40
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <xQueueGenericSendFromISR+0x3c>
 80038bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <xQueueGenericSendFromISR+0x40>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <xQueueGenericSendFromISR+0x42>
 80038c8:	2300      	movs	r3, #0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d103      	bne.n	80038f2 <xQueueGenericSendFromISR+0x6a>
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <xQueueGenericSendFromISR+0x6e>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <xQueueGenericSendFromISR+0x70>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	623b      	str	r3, [r7, #32]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003912:	f001 fb51 	bl	8004fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003916:	f3ef 8211 	mrs	r2, BASEPRI
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	61fa      	str	r2, [r7, #28]
 800392c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800392e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <xQueueGenericSendFromISR+0xbc>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d12f      	bne.n	80039a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800394a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800395a:	f000 f911 	bl	8003b80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800395e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d112      	bne.n	800398e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003972:	3324      	adds	r3, #36	; 0x24
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fe43 	bl	8004600 <xTaskRemoveFromEventList>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00e      	beq.n	800399e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e007      	b.n	800399e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800398e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003992:	3301      	adds	r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	b25a      	sxtb	r2, r3
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800399e:	2301      	movs	r3, #1
 80039a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80039a2:	e001      	b.n	80039a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3740      	adds	r7, #64	; 0x40
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	; 0x30
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <xQueueReceive+0x30>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	623b      	str	r3, [r7, #32]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <xQueueReceive+0x3e>
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <xQueueReceive+0x42>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <xQueueReceive+0x44>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xQueueReceive+0x5e>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	61fb      	str	r3, [r7, #28]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a1e:	f000 ffaf 	bl	8004980 <xTaskGetSchedulerState>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <xQueueReceive+0x6e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <xQueueReceive+0x72>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <xQueueReceive+0x74>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <xQueueReceive+0x8e>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	61bb      	str	r3, [r7, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a4e:	f001 f9d1 	bl	8004df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01f      	beq.n	8003a9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a62:	f000 f8f7 	bl	8003c54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00f      	beq.n	8003a96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	3310      	adds	r3, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fdc0 	bl	8004600 <xTaskRemoveFromEventList>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <xQueueReceive+0x1bc>)
 8003a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a96:	f001 f9dd 	bl	8004e54 <vPortExitCritical>
				return pdPASS;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e069      	b.n	8003b72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aa4:	f001 f9d6 	bl	8004e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e062      	b.n	8003b72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab2:	f107 0310 	add.w	r3, r7, #16
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fe04 	bl	80046c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac0:	f001 f9c8 	bl	8004e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ac4:	f000 fbb4 	bl	8004230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ac8:	f001 f994 	bl	8004df4 <vPortEnterCritical>
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d103      	bne.n	8003ae2 <xQueueReceive+0x122>
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d103      	bne.n	8003af8 <xQueueReceive+0x138>
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af8:	f001 f9ac 	bl	8004e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003afc:	1d3a      	adds	r2, r7, #4
 8003afe:	f107 0310 	add.w	r3, r7, #16
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fdf3 	bl	80046f0 <xTaskCheckForTimeOut>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d123      	bne.n	8003b58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b12:	f000 f917 	bl	8003d44 <prvIsQueueEmpty>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	3324      	adds	r3, #36	; 0x24
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fd47 	bl	80045b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b2c:	f000 f8b8 	bl	8003ca0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b30:	f000 fb8c 	bl	800424c <xTaskResumeAll>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d189      	bne.n	8003a4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <xQueueReceive+0x1bc>)
 8003b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	e780      	b.n	8003a4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4e:	f000 f8a7 	bl	8003ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b52:	f000 fb7b 	bl	800424c <xTaskResumeAll>
 8003b56:	e77a      	b.n	8003a4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5a:	f000 f8a1 	bl	8003ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b5e:	f000 fb75 	bl	800424c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b64:	f000 f8ee 	bl	8003d44 <prvIsQueueEmpty>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f43f af6f 	beq.w	8003a4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3730      	adds	r7, #48	; 0x30
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	e000ed04 	.word	0xe000ed04

08003b80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d14d      	bne.n	8003c42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 ff06 	bl	80049bc <xTaskPriorityDisinherit>
 8003bb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e043      	b.n	8003c42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d119      	bne.n	8003bf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6858      	ldr	r0, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	f001 fcc8 	bl	8005560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d32b      	bcc.n	8003c42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	e026      	b.n	8003c42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68d8      	ldr	r0, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	f001 fcae 	bl	8005560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	425b      	negs	r3, r3
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	425b      	negs	r3, r3
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d105      	bne.n	8003c42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c4a:	697b      	ldr	r3, [r7, #20]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	441a      	add	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d303      	bcc.n	8003c88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68d9      	ldr	r1, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	461a      	mov	r2, r3
 8003c92:	6838      	ldr	r0, [r7, #0]
 8003c94:	f001 fc64 	bl	8005560 <memcpy>
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ca8:	f001 f8a4 	bl	8004df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cb4:	e011      	b.n	8003cda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d012      	beq.n	8003ce4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fc9c 	bl	8004600 <xTaskRemoveFromEventList>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cce:	f000 fd71 	bl	80047b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	dce9      	bgt.n	8003cb6 <prvUnlockQueue+0x16>
 8003ce2:	e000      	b.n	8003ce6 <prvUnlockQueue+0x46>
					break;
 8003ce4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	22ff      	movs	r2, #255	; 0xff
 8003cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cee:	f001 f8b1 	bl	8004e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cf2:	f001 f87f 	bl	8004df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cfe:	e011      	b.n	8003d24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3310      	adds	r3, #16
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fc77 	bl	8004600 <xTaskRemoveFromEventList>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d18:	f000 fd4c 	bl	80047b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	dce9      	bgt.n	8003d00 <prvUnlockQueue+0x60>
 8003d2c:	e000      	b.n	8003d30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d38:	f001 f88c 	bl	8004e54 <vPortExitCritical>
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d4c:	f001 f852 	bl	8004df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e001      	b.n	8003d62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d62:	f001 f877 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 8003d66:	68fb      	ldr	r3, [r7, #12]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d78:	f001 f83c 	bl	8004df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d102      	bne.n	8003d8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e001      	b.n	8003d92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d92:	f001 f85f 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08e      	sub	sp, #56	; 0x38
 8003da4:	af04      	add	r7, sp, #16
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xTaskCreateStatic+0x2a>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	623b      	str	r3, [r7, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	61fb      	str	r3, [r7, #28]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003de6:	23a0      	movs	r3, #160	; 0xa0
 8003de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2ba0      	cmp	r3, #160	; 0xa0
 8003dee:	d00a      	beq.n	8003e06 <xTaskCreateStatic+0x66>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	61bb      	str	r3, [r7, #24]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01e      	beq.n	8003e4c <xTaskCreateStatic+0xac>
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e26:	2300      	movs	r3, #0
 8003e28:	9303      	str	r3, [sp, #12]
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	9302      	str	r3, [sp, #8]
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f850 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e46:	f000 f8eb 	bl	8004020 <prvAddNewTaskToReadyList>
 8003e4a:	e001      	b.n	8003e50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e50:	697b      	ldr	r3, [r7, #20]
	}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08c      	sub	sp, #48	; 0x30
 8003e5e:	af04      	add	r7, sp, #16
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 f8e2 	bl	8005038 <pvPortMalloc>
 8003e74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e7c:	20a0      	movs	r0, #160	; 0xa0
 8003e7e:	f001 f8db 	bl	8005038 <pvPortMalloc>
 8003e82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e90:	e005      	b.n	8003e9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f001 f99c 	bl	80051d0 <vPortFree>
 8003e98:	e001      	b.n	8003e9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f80e 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec8:	69f8      	ldr	r0, [r7, #28]
 8003eca:	f000 f8a9 	bl	8004020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e002      	b.n	8003eda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003eda:	69bb      	ldr	r3, [r7, #24]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003efc:	3b01      	subs	r3, #1
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f023 0307 	bic.w	r3, r3, #7
 8003f0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	617b      	str	r3, [r7, #20]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01f      	beq.n	8003f72 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	e012      	b.n	8003f5e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	7819      	ldrb	r1, [r3, #0]
 8003f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	3334      	adds	r3, #52	; 0x34
 8003f48:	460a      	mov	r2, r1
 8003f4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	4413      	add	r3, r2
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d9e9      	bls.n	8003f38 <prvInitialiseNewTask+0x54>
 8003f64:	e000      	b.n	8003f68 <prvInitialiseNewTask+0x84>
			{
				break;
 8003f66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f70:	e003      	b.n	8003f7a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	d901      	bls.n	8003f84 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f80:	2306      	movs	r3, #6
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	2200      	movs	r2, #0
 8003f94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fa20 	bl	80033e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fa1b 	bl	80033e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	f1c3 0207 	rsb	r2, r3, #7
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	334c      	adds	r3, #76	; 0x4c
 8003fd4:	224c      	movs	r2, #76	; 0x4c
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 fa37 	bl	800544c <memset>
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <prvInitialiseNewTask+0x130>)
 8003fe2:	651a      	str	r2, [r3, #80]	; 0x50
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	4a0c      	ldr	r2, [pc, #48]	; (8004018 <prvInitialiseNewTask+0x134>)
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	4a0b      	ldr	r2, [pc, #44]	; (800401c <prvInitialiseNewTask+0x138>)
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	69b8      	ldr	r0, [r7, #24]
 8003ff6:	f000 fdcd 	bl	8004b94 <pxPortInitialiseStack>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800400c:	bf00      	nop
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20004114 	.word	0x20004114
 8004018:	2000417c 	.word	0x2000417c
 800401c:	200041e4 	.word	0x200041e4

08004020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004028:	f000 fee4 	bl	8004df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 8004034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004036:	4b29      	ldr	r3, [pc, #164]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <prvAddNewTaskToReadyList+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d110      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800404c:	f000 fbd6 	bl	80047fc <prvInitialiseTaskLists>
 8004050:	e00d      	b.n	800406e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <prvAddNewTaskToReadyList+0xc0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d802      	bhi.n	800406e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004076:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2201      	movs	r2, #1
 800407e:	409a      	lsls	r2, r3
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4313      	orrs	r3, r2
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <prvAddNewTaskToReadyList+0xcc>)
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7ff f9aa 	bl	80033fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040a6:	f000 fed5 	bl	8004e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <prvAddNewTaskToReadyList+0xc0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <prvAddNewTaskToReadyList+0xbc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d207      	bcs.n	80040d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <prvAddNewTaskToReadyList+0xd0>)
 80040c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200004c0 	.word	0x200004c0
 80040dc:	200003c0 	.word	0x200003c0
 80040e0:	200004cc 	.word	0x200004cc
 80040e4:	200004dc 	.word	0x200004dc
 80040e8:	200004c8 	.word	0x200004c8
 80040ec:	200003c4 	.word	0x200003c4
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <vTaskDelay+0x60>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <vTaskDelay+0x30>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60bb      	str	r3, [r7, #8]
}
 8004120:	bf00      	nop
 8004122:	e7fe      	b.n	8004122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004124:	f000 f884 	bl	8004230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004128:	2100      	movs	r1, #0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fccc 	bl	8004ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004130:	f000 f88c 	bl	800424c <xTaskResumeAll>
 8004134:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <vTaskDelay+0x64>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	200004e8 	.word	0x200004e8
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800416a:	463a      	mov	r2, r7
 800416c:	1d39      	adds	r1, r7, #4
 800416e:	f107 0308 	add.w	r3, r7, #8
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc fa02 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	9202      	str	r2, [sp, #8]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	460a      	mov	r2, r1
 800418a:	4921      	ldr	r1, [pc, #132]	; (8004210 <vTaskStartScheduler+0xb4>)
 800418c:	4821      	ldr	r0, [pc, #132]	; (8004214 <vTaskStartScheduler+0xb8>)
 800418e:	f7ff fe07 	bl	8003da0 <xTaskCreateStatic>
 8004192:	4603      	mov	r3, r0
 8004194:	4a20      	ldr	r2, [pc, #128]	; (8004218 <vTaskStartScheduler+0xbc>)
 8004196:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004198:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <vTaskStartScheduler+0xbc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041a0:	2301      	movs	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e001      	b.n	80041aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d11b      	bne.n	80041e8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	613b      	str	r3, [r7, #16]
}
 80041c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <vTaskStartScheduler+0xc0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	334c      	adds	r3, #76	; 0x4c
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <vTaskStartScheduler+0xc4>)
 80041cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <vTaskStartScheduler+0xc8>)
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <vTaskStartScheduler+0xcc>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041dc:	4b13      	ldr	r3, [pc, #76]	; (800422c <vTaskStartScheduler+0xd0>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041e2:	f000 fd65 	bl	8004cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041e6:	e00e      	b.n	8004206 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d10a      	bne.n	8004206 <vTaskStartScheduler+0xaa>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	60fb      	str	r3, [r7, #12]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <vTaskStartScheduler+0xa8>
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	08005fdc 	.word	0x08005fdc
 8004214:	080047cd 	.word	0x080047cd
 8004218:	200004e4 	.word	0x200004e4
 800421c:	200003c0 	.word	0x200003c0
 8004220:	2000005c 	.word	0x2000005c
 8004224:	200004e0 	.word	0x200004e0
 8004228:	200004cc 	.word	0x200004cc
 800422c:	200004c4 	.word	0x200004c4

08004230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <vTaskSuspendAll+0x18>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	4a03      	ldr	r2, [pc, #12]	; (8004248 <vTaskSuspendAll+0x18>)
 800423c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800423e:	bf00      	nop
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	200004e8 	.word	0x200004e8

0800424c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <xTaskResumeAll+0x114>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <xTaskResumeAll+0x2c>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	603b      	str	r3, [r7, #0]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004278:	f000 fdbc 	bl	8004df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800427c:	4b38      	ldr	r3, [pc, #224]	; (8004360 <xTaskResumeAll+0x114>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3b01      	subs	r3, #1
 8004282:	4a37      	ldr	r2, [pc, #220]	; (8004360 <xTaskResumeAll+0x114>)
 8004284:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <xTaskResumeAll+0x114>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d161      	bne.n	8004352 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800428e:	4b35      	ldr	r3, [pc, #212]	; (8004364 <xTaskResumeAll+0x118>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d05d      	beq.n	8004352 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004296:	e02e      	b.n	80042f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004298:	4b33      	ldr	r3, [pc, #204]	; (8004368 <xTaskResumeAll+0x11c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3318      	adds	r3, #24
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff f905 	bl	80034b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f900 	bl	80034b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	4b2b      	ldr	r3, [pc, #172]	; (800436c <xTaskResumeAll+0x120>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	4a2a      	ldr	r2, [pc, #168]	; (800436c <xTaskResumeAll+0x120>)
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4a27      	ldr	r2, [pc, #156]	; (8004370 <xTaskResumeAll+0x124>)
 80042d4:	441a      	add	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3304      	adds	r3, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f7ff f88c 	bl	80033fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e6:	4b23      	ldr	r3, [pc, #140]	; (8004374 <xTaskResumeAll+0x128>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <xTaskResumeAll+0x12c>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <xTaskResumeAll+0x11c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1cc      	bne.n	8004298 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004304:	f000 fb1c 	bl	8004940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <xTaskResumeAll+0x130>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d010      	beq.n	8004336 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004314:	f000 f836 	bl	8004384 <xTaskIncrementTick>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <xTaskResumeAll+0x12c>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f1      	bne.n	8004314 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <xTaskResumeAll+0x130>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <xTaskResumeAll+0x12c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800433e:	2301      	movs	r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <xTaskResumeAll+0x134>)
 8004344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004352:	f000 fd7f 	bl	8004e54 <vPortExitCritical>

	return xAlreadyYielded;
 8004356:	68bb      	ldr	r3, [r7, #8]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200004e8 	.word	0x200004e8
 8004364:	200004c0 	.word	0x200004c0
 8004368:	20000480 	.word	0x20000480
 800436c:	200004c8 	.word	0x200004c8
 8004370:	200003c4 	.word	0x200003c4
 8004374:	200003c0 	.word	0x200003c0
 8004378:	200004d4 	.word	0x200004d4
 800437c:	200004d0 	.word	0x200004d0
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438e:	4b4e      	ldr	r3, [pc, #312]	; (80044c8 <xTaskIncrementTick+0x144>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 808e 	bne.w	80044b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004398:	4b4c      	ldr	r3, [pc, #304]	; (80044cc <xTaskIncrementTick+0x148>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043a0:	4a4a      	ldr	r2, [pc, #296]	; (80044cc <xTaskIncrementTick+0x148>)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d120      	bne.n	80043ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043ac:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <xTaskIncrementTick+0x14c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <xTaskIncrementTick+0x48>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	603b      	str	r3, [r7, #0]
}
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <xTaskIncrementTick+0x46>
 80043cc:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <xTaskIncrementTick+0x14c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <xTaskIncrementTick+0x150>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3e      	ldr	r2, [pc, #248]	; (80044d0 <xTaskIncrementTick+0x14c>)
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4a3e      	ldr	r2, [pc, #248]	; (80044d4 <xTaskIncrementTick+0x150>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <xTaskIncrementTick+0x154>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <xTaskIncrementTick+0x154>)
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	f000 faa9 	bl	8004940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ee:	4b3b      	ldr	r3, [pc, #236]	; (80044dc <xTaskIncrementTick+0x158>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d348      	bcc.n	800448a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f8:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <xTaskIncrementTick+0x14c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <xTaskIncrementTick+0x158>)
 8004404:	f04f 32ff 	mov.w	r2, #4294967295
 8004408:	601a      	str	r2, [r3, #0]
					break;
 800440a:	e03e      	b.n	800448a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800440c:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <xTaskIncrementTick+0x14c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	d203      	bcs.n	800442c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004424:	4a2d      	ldr	r2, [pc, #180]	; (80044dc <xTaskIncrementTick+0x158>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800442a:	e02e      	b.n	800448a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	3304      	adds	r3, #4
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff f83f 	bl	80034b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3318      	adds	r3, #24
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff f836 	bl	80034b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <xTaskIncrementTick+0x15c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <xTaskIncrementTick+0x15c>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <xTaskIncrementTick+0x160>)
 8004468:	441a      	add	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fe ffc2 	bl	80033fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <xTaskIncrementTick+0x164>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	429a      	cmp	r2, r3
 8004482:	d3b9      	bcc.n	80043f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004488:	e7b6      	b.n	80043f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800448a:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <xTaskIncrementTick+0x164>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	4914      	ldr	r1, [pc, #80]	; (80044e4 <xTaskIncrementTick+0x160>)
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d901      	bls.n	80044a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <xTaskIncrementTick+0x168>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e004      	b.n	80044be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <xTaskIncrementTick+0x16c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <xTaskIncrementTick+0x16c>)
 80044bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044be:	697b      	ldr	r3, [r7, #20]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200004e8 	.word	0x200004e8
 80044cc:	200004c4 	.word	0x200004c4
 80044d0:	20000478 	.word	0x20000478
 80044d4:	2000047c 	.word	0x2000047c
 80044d8:	200004d8 	.word	0x200004d8
 80044dc:	200004e0 	.word	0x200004e0
 80044e0:	200004c8 	.word	0x200004c8
 80044e4:	200003c4 	.word	0x200003c4
 80044e8:	200003c0 	.word	0x200003c0
 80044ec:	200004d4 	.word	0x200004d4
 80044f0:	200004d0 	.word	0x200004d0

080044f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044fa:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <vTaskSwitchContext+0xac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004502:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <vTaskSwitchContext+0xb0>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004508:	e044      	b.n	8004594 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <vTaskSwitchContext+0xb0>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <vTaskSwitchContext+0xb4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	f1c3 031f 	rsb	r3, r3, #31
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	4921      	ldr	r1, [pc, #132]	; (80045ac <vTaskSwitchContext+0xb8>)
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <vTaskSwitchContext+0x5c>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	607b      	str	r3, [r7, #4]
}
 800454c:	bf00      	nop
 800454e:	e7fe      	b.n	800454e <vTaskSwitchContext+0x5a>
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4a14      	ldr	r2, [pc, #80]	; (80045ac <vTaskSwitchContext+0xb8>)
 800455c:	4413      	add	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	3308      	adds	r3, #8
 8004572:	429a      	cmp	r2, r3
 8004574:	d104      	bne.n	8004580 <vTaskSwitchContext+0x8c>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <vTaskSwitchContext+0xbc>)
 8004588:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <vTaskSwitchContext+0xbc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	334c      	adds	r3, #76	; 0x4c
 8004590:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <vTaskSwitchContext+0xc0>)
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	200004e8 	.word	0x200004e8
 80045a4:	200004d4 	.word	0x200004d4
 80045a8:	200004c8 	.word	0x200004c8
 80045ac:	200003c4 	.word	0x200003c4
 80045b0:	200003c0 	.word	0x200003c0
 80045b4:	2000005c 	.word	0x2000005c

080045b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	60fb      	str	r3, [r7, #12]
}
 80045da:	bf00      	nop
 80045dc:	e7fe      	b.n	80045dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045de:	4b07      	ldr	r3, [pc, #28]	; (80045fc <vTaskPlaceOnEventList+0x44>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3318      	adds	r3, #24
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fe ff2b 	bl	8003442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045ec:	2101      	movs	r1, #1
 80045ee:	6838      	ldr	r0, [r7, #0]
 80045f0:	f000 fa6a 	bl	8004ac8 <prvAddCurrentTaskToDelayedList>
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200003c0 	.word	0x200003c0

08004600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60fb      	str	r3, [r7, #12]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3318      	adds	r3, #24
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe ff3f 	bl	80034b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <xTaskRemoveFromEventList+0xac>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11c      	bne.n	8004678 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3304      	adds	r3, #4
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe ff36 	bl	80034b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	2201      	movs	r2, #1
 800464e:	409a      	lsls	r2, r3
 8004650:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <xTaskRemoveFromEventList+0xb0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4313      	orrs	r3, r2
 8004656:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <xTaskRemoveFromEventList+0xb0>)
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <xTaskRemoveFromEventList+0xb4>)
 8004668:	441a      	add	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	3304      	adds	r3, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f7fe fec2 	bl	80033fa <vListInsertEnd>
 8004676:	e005      	b.n	8004684 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3318      	adds	r3, #24
 800467c:	4619      	mov	r1, r3
 800467e:	480e      	ldr	r0, [pc, #56]	; (80046b8 <xTaskRemoveFromEventList+0xb8>)
 8004680:	f7fe febb 	bl	80033fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <xTaskRemoveFromEventList+0xbc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	429a      	cmp	r2, r3
 8004690:	d905      	bls.n	800469e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004692:	2301      	movs	r3, #1
 8004694:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <xTaskRemoveFromEventList+0xc0>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e001      	b.n	80046a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046a2:	697b      	ldr	r3, [r7, #20]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200004e8 	.word	0x200004e8
 80046b0:	200004c8 	.word	0x200004c8
 80046b4:	200003c4 	.word	0x200003c4
 80046b8:	20000480 	.word	0x20000480
 80046bc:	200003c0 	.word	0x200003c0
 80046c0:	200004d4 	.word	0x200004d4

080046c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <vTaskInternalSetTimeOutState+0x24>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <vTaskInternalSetTimeOutState+0x28>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	605a      	str	r2, [r3, #4]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	200004d8 	.word	0x200004d8
 80046ec:	200004c4 	.word	0x200004c4

080046f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	613b      	str	r3, [r7, #16]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60fb      	str	r3, [r7, #12]
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004732:	f000 fb5f 	bl	8004df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <xTaskCheckForTimeOut+0xbc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d102      	bne.n	8004756 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e023      	b.n	800479e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <xTaskCheckForTimeOut+0xc0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d007      	beq.n	8004772 <xTaskCheckForTimeOut+0x82>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	429a      	cmp	r2, r3
 800476a:	d302      	bcc.n	8004772 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800476c:	2301      	movs	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e015      	b.n	800479e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	d20b      	bcs.n	8004794 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff9b 	bl	80046c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e004      	b.n	800479e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800479e:	f000 fb59 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 80047a2:	69fb      	ldr	r3, [r7, #28]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	200004c4 	.word	0x200004c4
 80047b0:	200004d8 	.word	0x200004d8

080047b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047b8:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <vTaskMissedYield+0x14>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	200004d4 	.word	0x200004d4

080047cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047d4:	f000 f852 	bl	800487c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <prvIdleTask+0x28>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d9f9      	bls.n	80047d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <prvIdleTask+0x2c>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047f0:	e7f0      	b.n	80047d4 <prvIdleTask+0x8>
 80047f2:	bf00      	nop
 80047f4:	200003c4 	.word	0x200003c4
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	e00c      	b.n	8004822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4a12      	ldr	r2, [pc, #72]	; (800485c <prvInitialiseTaskLists+0x60>)
 8004814:	4413      	add	r3, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fdc2 	bl	80033a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3301      	adds	r3, #1
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b06      	cmp	r3, #6
 8004826:	d9ef      	bls.n	8004808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004828:	480d      	ldr	r0, [pc, #52]	; (8004860 <prvInitialiseTaskLists+0x64>)
 800482a:	f7fe fdb9 	bl	80033a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800482e:	480d      	ldr	r0, [pc, #52]	; (8004864 <prvInitialiseTaskLists+0x68>)
 8004830:	f7fe fdb6 	bl	80033a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004834:	480c      	ldr	r0, [pc, #48]	; (8004868 <prvInitialiseTaskLists+0x6c>)
 8004836:	f7fe fdb3 	bl	80033a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800483a:	480c      	ldr	r0, [pc, #48]	; (800486c <prvInitialiseTaskLists+0x70>)
 800483c:	f7fe fdb0 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004840:	480b      	ldr	r0, [pc, #44]	; (8004870 <prvInitialiseTaskLists+0x74>)
 8004842:	f7fe fdad 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <prvInitialiseTaskLists+0x78>)
 8004848:	4a05      	ldr	r2, [pc, #20]	; (8004860 <prvInitialiseTaskLists+0x64>)
 800484a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <prvInitialiseTaskLists+0x7c>)
 800484e:	4a05      	ldr	r2, [pc, #20]	; (8004864 <prvInitialiseTaskLists+0x68>)
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	200003c4 	.word	0x200003c4
 8004860:	20000450 	.word	0x20000450
 8004864:	20000464 	.word	0x20000464
 8004868:	20000480 	.word	0x20000480
 800486c:	20000494 	.word	0x20000494
 8004870:	200004ac 	.word	0x200004ac
 8004874:	20000478 	.word	0x20000478
 8004878:	2000047c 	.word	0x2000047c

0800487c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004882:	e019      	b.n	80048b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004884:	f000 fab6 	bl	8004df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <prvCheckTasksWaitingTermination+0x50>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fe0d 	bl	80034b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800489a:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <prvCheckTasksWaitingTermination+0x54>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <prvCheckTasksWaitingTermination+0x54>)
 80048a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <prvCheckTasksWaitingTermination+0x58>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <prvCheckTasksWaitingTermination+0x58>)
 80048ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048ae:	f000 fad1 	bl	8004e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f810 	bl	80048d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <prvCheckTasksWaitingTermination+0x58>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e1      	bne.n	8004884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000494 	.word	0x20000494
 80048d0:	200004c0 	.word	0x200004c0
 80048d4:	200004a8 	.word	0x200004a8

080048d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	334c      	adds	r3, #76	; 0x4c
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fdb9 	bl	800545c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d108      	bne.n	8004906 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fc69 	bl	80051d0 <vPortFree>
				vPortFree( pxTCB );
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fc66 	bl	80051d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004904:	e018      	b.n	8004938 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800490c:	2b01      	cmp	r3, #1
 800490e:	d103      	bne.n	8004918 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fc5d 	bl	80051d0 <vPortFree>
	}
 8004916:	e00f      	b.n	8004938 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800491e:	2b02      	cmp	r3, #2
 8004920:	d00a      	beq.n	8004938 <prvDeleteTCB+0x60>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60fb      	str	r3, [r7, #12]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <prvDeleteTCB+0x5e>
	}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <prvResetNextTaskUnblockTime+0x38>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <prvResetNextTaskUnblockTime+0x3c>)
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004958:	e008      	b.n	800496c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <prvResetNextTaskUnblockTime+0x38>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a04      	ldr	r2, [pc, #16]	; (800497c <prvResetNextTaskUnblockTime+0x3c>)
 800496a:	6013      	str	r3, [r2, #0]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000478 	.word	0x20000478
 800497c:	200004e0 	.word	0x200004e0

08004980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <xTaskGetSchedulerState+0x34>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800498e:	2301      	movs	r3, #1
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	e008      	b.n	80049a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004994:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <xTaskGetSchedulerState+0x38>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800499c:	2302      	movs	r3, #2
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	e001      	b.n	80049a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049a6:	687b      	ldr	r3, [r7, #4]
	}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	200004cc 	.word	0x200004cc
 80049b8:	200004e8 	.word	0x200004e8

080049bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d06e      	beq.n	8004ab0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049d2:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <xTaskPriorityDisinherit+0x100>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d00a      	beq.n	80049f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	60bb      	str	r3, [r7, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d044      	beq.n	8004ab0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d140      	bne.n	8004ab0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fd3e 	bl	80034b4 <uxListRemove>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d115      	bne.n	8004a6a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	491f      	ldr	r1, [pc, #124]	; (8004ac0 <xTaskPriorityDisinherit+0x104>)
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xTaskPriorityDisinherit+0xae>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	2201      	movs	r2, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <xTaskPriorityDisinherit+0x108>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4013      	ands	r3, r2
 8004a66:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <xTaskPriorityDisinherit+0x108>)
 8004a68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	f1c3 0207 	rsb	r2, r3, #7
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	2201      	movs	r2, #1
 8004a84:	409a      	lsls	r2, r3
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <xTaskPriorityDisinherit+0x108>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	4a0d      	ldr	r2, [pc, #52]	; (8004ac4 <xTaskPriorityDisinherit+0x108>)
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <xTaskPriorityDisinherit+0x104>)
 8004a9e:	441a      	add	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f7fe fca7 	bl	80033fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ab0:	697b      	ldr	r3, [r7, #20]
	}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200003c0 	.word	0x200003c0
 8004ac0:	200003c4 	.word	0x200003c4
 8004ac4:	200004c8 	.word	0x200004c8

08004ac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ad8:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fce8 	bl	80034b4 <uxListRemove>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	2201      	movs	r2, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43da      	mvns	r2, r3
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4013      	ands	r3, r2
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d10a      	bne.n	8004b20 <prvAddCurrentTaskToDelayedList+0x58>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	481a      	ldr	r0, [pc, #104]	; (8004b84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b1a:	f7fe fc6e 	bl	80033fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b1e:	e026      	b.n	8004b6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b28:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d209      	bcs.n	8004b4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b38:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f7fe fc7c 	bl	8003442 <vListInsert>
}
 8004b4a:	e010      	b.n	8004b6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7fe fc72 	bl	8003442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d202      	bcs.n	8004b6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b68:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6013      	str	r3, [r2, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200004c4 	.word	0x200004c4
 8004b7c:	200003c0 	.word	0x200003c0
 8004b80:	200004c8 	.word	0x200004c8
 8004b84:	200004ac 	.word	0x200004ac
 8004b88:	2000047c 	.word	0x2000047c
 8004b8c:	20000478 	.word	0x20000478
 8004b90:	200004e0 	.word	0x200004e0

08004b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bc4:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <pxPortInitialiseStack+0x64>)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b14      	subs	r3, #20
 8004bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b04      	subs	r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f06f 0202 	mvn.w	r2, #2
 8004be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3b20      	subs	r3, #32
 8004be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	08004bfd 	.word	0x08004bfd

08004bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <prvTaskExitError+0x54>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d00a      	beq.n	8004c26 <prvTaskExitError+0x2a>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <prvTaskExitError+0x28>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60bb      	str	r3, [r7, #8]
}
 8004c38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c3a:	bf00      	nop
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0fc      	beq.n	8004c3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	2000000c 	.word	0x2000000c
	...

08004c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <pxCurrentTCBConst2>)
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	6808      	ldr	r0, [r1, #0]
 8004c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	f380 8809 	msr	PSP, r0
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8811 	msr	BASEPRI, r0
 8004c7a:	4770      	bx	lr
 8004c7c:	f3af 8000 	nop.w

08004c80 <pxCurrentTCBConst2>:
 8004c80:	200003c0 	.word	0x200003c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c88:	4808      	ldr	r0, [pc, #32]	; (8004cac <prvPortStartFirstTask+0x24>)
 8004c8a:	6800      	ldr	r0, [r0, #0]
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f380 8808 	msr	MSP, r0
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f380 8814 	msr	CONTROL, r0
 8004c9a:	b662      	cpsie	i
 8004c9c:	b661      	cpsie	f
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	df00      	svc	0
 8004ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004caa:	bf00      	nop
 8004cac:	e000ed08 	.word	0xe000ed08

08004cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cb6:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <xPortStartScheduler+0x120>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a46      	ldr	r2, [pc, #280]	; (8004dd4 <xPortStartScheduler+0x124>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10a      	bne.n	8004cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	613b      	str	r3, [r7, #16]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cd6:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <xPortStartScheduler+0x120>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a3f      	ldr	r2, [pc, #252]	; (8004dd8 <xPortStartScheduler+0x128>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d10a      	bne.n	8004cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <xPortStartScheduler+0x12c>)
 8004cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	22ff      	movs	r2, #255	; 0xff
 8004d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <xPortStartScheduler+0x130>)
 8004d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d1e:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d24:	e009      	b.n	8004d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d26:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	4a2d      	ldr	r2, [pc, #180]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d0ef      	beq.n	8004d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d46:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1c3 0307 	rsb	r3, r3, #7
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d00a      	beq.n	8004d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60bb      	str	r3, [r7, #8]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <xPortStartScheduler+0x134>)
 8004d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <xPortStartScheduler+0x138>)
 8004d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d9e:	f000 f8dd 	bl	8004f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004da2:	4b12      	ldr	r3, [pc, #72]	; (8004dec <xPortStartScheduler+0x13c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004da8:	f000 f8fc 	bl	8004fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dac:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <xPortStartScheduler+0x140>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <xPortStartScheduler+0x140>)
 8004db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004db8:	f7ff ff66 	bl	8004c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dbc:	f7ff fb9a 	bl	80044f4 <vTaskSwitchContext>
	prvTaskExitError();
 8004dc0:	f7ff ff1c 	bl	8004bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00
 8004dd4:	410fc271 	.word	0x410fc271
 8004dd8:	410fc270 	.word	0x410fc270
 8004ddc:	e000e400 	.word	0xe000e400
 8004de0:	200004ec 	.word	0x200004ec
 8004de4:	200004f0 	.word	0x200004f0
 8004de8:	e000ed20 	.word	0xe000ed20
 8004dec:	2000000c 	.word	0x2000000c
 8004df0:	e000ef34 	.word	0xe000ef34

08004df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	607b      	str	r3, [r7, #4]
}
 8004e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <vPortEnterCritical+0x58>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <vPortEnterCritical+0x58>)
 8004e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <vPortEnterCritical+0x58>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10f      	bne.n	8004e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <vPortEnterCritical+0x5c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	603b      	str	r3, [r7, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	e7fe      	b.n	8004e3e <vPortEnterCritical+0x4a>
	}
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	2000000c 	.word	0x2000000c
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <vPortExitCritical+0x24>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	607b      	str	r3, [r7, #4]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <vPortExitCritical+0x50>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <vPortExitCritical+0x42>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	f383 8811 	msr	BASEPRI, r3
}
 8004e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c
	...

08004eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004eb0:	f3ef 8009 	mrs	r0, PSP
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <pxCurrentTCBConst>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f01e 0f10 	tst.w	lr, #16
 8004ec0:	bf08      	it	eq
 8004ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	6010      	str	r0, [r2, #0]
 8004ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ed4:	f380 8811 	msr	BASEPRI, r0
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f7ff fb08 	bl	80044f4 <vTaskSwitchContext>
 8004ee4:	f04f 0000 	mov.w	r0, #0
 8004ee8:	f380 8811 	msr	BASEPRI, r0
 8004eec:	bc09      	pop	{r0, r3}
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef6:	f01e 0f10 	tst.w	lr, #16
 8004efa:	bf08      	it	eq
 8004efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f00:	f380 8809 	msr	PSP, r0
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst>:
 8004f10:	200003c0 	.word	0x200003c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f32:	f7ff fa27 	bl	8004384 <xTaskIncrementTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <SysTick_Handler+0x40>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <vPortSetupTimerInterrupt+0x38>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <vPortSetupTimerInterrupt+0x3c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <vPortSetupTimerInterrupt+0x40>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <vPortSetupTimerInterrupt+0x44>)
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000e010 	.word	0xe000e010
 8004f94:	e000e018 	.word	0xe000e018
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	10624dd3 	.word	0x10624dd3
 8004fa0:	e000e014 	.word	0xe000e014

08004fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fb4 <vPortEnableVFP+0x10>
 8004fa8:	6801      	ldr	r1, [r0, #0]
 8004faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fae:	6001      	str	r1, [r0, #0]
 8004fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fb2:	bf00      	nop
 8004fb4:	e000ed88 	.word	0xe000ed88

08004fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fbe:	f3ef 8305 	mrs	r3, IPSR
 8004fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	d914      	bls.n	8004ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fca:	4a17      	ldr	r2, [pc, #92]	; (8005028 <vPortValidateInterruptPriority+0x70>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fd4:	4b15      	ldr	r3, [pc, #84]	; (800502c <vPortValidateInterruptPriority+0x74>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	7afa      	ldrb	r2, [r7, #11]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20a      	bcs.n	8004ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <vPortValidateInterruptPriority+0x78>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <vPortValidateInterruptPriority+0x7c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d90a      	bls.n	800501a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	603b      	str	r3, [r7, #0]
}
 8005016:	bf00      	nop
 8005018:	e7fe      	b.n	8005018 <vPortValidateInterruptPriority+0x60>
	}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	e000e3f0 	.word	0xe000e3f0
 800502c:	200004ec 	.word	0x200004ec
 8005030:	e000ed0c 	.word	0xe000ed0c
 8005034:	200004f0 	.word	0x200004f0

08005038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005044:	f7ff f8f4 	bl	8004230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005048:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <pvPortMalloc+0x180>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005050:	f000 f920 	bl	8005294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005054:	4b59      	ldr	r3, [pc, #356]	; (80051bc <pvPortMalloc+0x184>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	f040 8093 	bne.w	8005188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01d      	beq.n	80050a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005068:	2208      	movs	r2, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2b00      	cmp	r3, #0
 8005078:	d014      	beq.n	80050a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	3308      	adds	r3, #8
 8005082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <pvPortMalloc+0x6c>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	617b      	str	r3, [r7, #20]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d06e      	beq.n	8005188 <pvPortMalloc+0x150>
 80050aa:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <pvPortMalloc+0x188>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d869      	bhi.n	8005188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050b4:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <pvPortMalloc+0x18c>)
 80050b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050b8:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <pvPortMalloc+0x18c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050be:	e004      	b.n	80050ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d903      	bls.n	80050dc <pvPortMalloc+0xa4>
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f1      	bne.n	80050c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <pvPortMalloc+0x180>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d050      	beq.n	8005188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2208      	movs	r2, #8
 80050ec:	4413      	add	r3, r2
 80050ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	2308      	movs	r3, #8
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	429a      	cmp	r2, r3
 8005106:	d91f      	bls.n	8005148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <pvPortMalloc+0xf8>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	613b      	str	r3, [r7, #16]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005142:	69b8      	ldr	r0, [r7, #24]
 8005144:	f000 f908 	bl	8005358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <pvPortMalloc+0x188>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <pvPortMalloc+0x188>)
 8005154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <pvPortMalloc+0x188>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <pvPortMalloc+0x190>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d203      	bcs.n	800516a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005162:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <pvPortMalloc+0x188>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <pvPortMalloc+0x190>)
 8005168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <pvPortMalloc+0x184>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	431a      	orrs	r2, r3
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <pvPortMalloc+0x194>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <pvPortMalloc+0x194>)
 8005186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005188:	f7ff f860 	bl	800424c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <pvPortMalloc+0x174>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60fb      	str	r3, [r7, #12]
}
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <pvPortMalloc+0x172>
	return pvReturn;
 80051ac:	69fb      	ldr	r3, [r7, #28]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3728      	adds	r7, #40	; 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200040fc 	.word	0x200040fc
 80051bc:	20004110 	.word	0x20004110
 80051c0:	20004100 	.word	0x20004100
 80051c4:	200040f4 	.word	0x200040f4
 80051c8:	20004104 	.word	0x20004104
 80051cc:	20004108 	.word	0x20004108

080051d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04d      	beq.n	800527e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051e2:	2308      	movs	r3, #8
 80051e4:	425b      	negs	r3, r3
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	4b24      	ldr	r3, [pc, #144]	; (8005288 <vPortFree+0xb8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <vPortFree+0x44>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60fb      	str	r3, [r7, #12]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <vPortFree+0x62>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60bb      	str	r3, [r7, #8]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <vPortFree+0xb8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01e      	beq.n	800527e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11a      	bne.n	800527e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <vPortFree+0xb8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	43db      	mvns	r3, r3
 8005252:	401a      	ands	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005258:	f7fe ffea 	bl	8004230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <vPortFree+0xbc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4413      	add	r3, r2
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <vPortFree+0xbc>)
 8005268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800526a:	6938      	ldr	r0, [r7, #16]
 800526c:	f000 f874 	bl	8005358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <vPortFree+0xc0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	4a06      	ldr	r2, [pc, #24]	; (8005290 <vPortFree+0xc0>)
 8005278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800527a:	f7fe ffe7 	bl	800424c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800527e:	bf00      	nop
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20004110 	.word	0x20004110
 800528c:	20004100 	.word	0x20004100
 8005290:	2000410c 	.word	0x2000410c

08005294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800529a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800529e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <prvHeapInit+0xac>)
 80052a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3307      	adds	r3, #7
 80052b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0307 	bic.w	r3, r3, #7
 80052ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <prvHeapInit+0xac>)
 80052c4:	4413      	add	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052cc:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <prvHeapInit+0xb0>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <prvHeapInit+0xb0>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052e0:	2208      	movs	r2, #8
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a15      	ldr	r2, [pc, #84]	; (8005348 <prvHeapInit+0xb4>)
 80052f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <prvHeapInit+0xb4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052fe:	4b12      	ldr	r3, [pc, #72]	; (8005348 <prvHeapInit+0xb4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvHeapInit+0xb4>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <prvHeapInit+0xb8>)
 8005322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <prvHeapInit+0xbc>)
 800532a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <prvHeapInit+0xc0>)
 800532e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	200004f4 	.word	0x200004f4
 8005344:	200040f4 	.word	0x200040f4
 8005348:	200040fc 	.word	0x200040fc
 800534c:	20004104 	.word	0x20004104
 8005350:	20004100 	.word	0x20004100
 8005354:	20004110 	.word	0x20004110

08005358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005360:	4b28      	ldr	r3, [pc, #160]	; (8005404 <prvInsertBlockIntoFreeList+0xac>)
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e002      	b.n	800536c <prvInsertBlockIntoFreeList+0x14>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d8f7      	bhi.n	8005366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4413      	add	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	d108      	bne.n	800539a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	441a      	add	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	441a      	add	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d118      	bne.n	80053e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <prvInsertBlockIntoFreeList+0xb0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d00d      	beq.n	80053d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e008      	b.n	80053e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <prvInsertBlockIntoFreeList+0xb0>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e003      	b.n	80053e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d002      	beq.n	80053f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	200040f4 	.word	0x200040f4
 8005408:	200040fc 	.word	0x200040fc

0800540c <siprintf>:
 800540c:	b40e      	push	{r1, r2, r3}
 800540e:	b500      	push	{lr}
 8005410:	b09c      	sub	sp, #112	; 0x70
 8005412:	ab1d      	add	r3, sp, #116	; 0x74
 8005414:	9002      	str	r0, [sp, #8]
 8005416:	9006      	str	r0, [sp, #24]
 8005418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800541c:	4809      	ldr	r0, [pc, #36]	; (8005444 <siprintf+0x38>)
 800541e:	9107      	str	r1, [sp, #28]
 8005420:	9104      	str	r1, [sp, #16]
 8005422:	4909      	ldr	r1, [pc, #36]	; (8005448 <siprintf+0x3c>)
 8005424:	f853 2b04 	ldr.w	r2, [r3], #4
 8005428:	9105      	str	r1, [sp, #20]
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	a902      	add	r1, sp, #8
 8005430:	f000 f9f6 	bl	8005820 <_svfiprintf_r>
 8005434:	9b02      	ldr	r3, [sp, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	b01c      	add	sp, #112	; 0x70
 800543c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005440:	b003      	add	sp, #12
 8005442:	4770      	bx	lr
 8005444:	2000005c 	.word	0x2000005c
 8005448:	ffff0208 	.word	0xffff0208

0800544c <memset>:
 800544c:	4402      	add	r2, r0
 800544e:	4603      	mov	r3, r0
 8005450:	4293      	cmp	r3, r2
 8005452:	d100      	bne.n	8005456 <memset+0xa>
 8005454:	4770      	bx	lr
 8005456:	f803 1b01 	strb.w	r1, [r3], #1
 800545a:	e7f9      	b.n	8005450 <memset+0x4>

0800545c <_reclaim_reent>:
 800545c:	4b29      	ldr	r3, [pc, #164]	; (8005504 <_reclaim_reent+0xa8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4283      	cmp	r3, r0
 8005462:	b570      	push	{r4, r5, r6, lr}
 8005464:	4604      	mov	r4, r0
 8005466:	d04b      	beq.n	8005500 <_reclaim_reent+0xa4>
 8005468:	69c3      	ldr	r3, [r0, #28]
 800546a:	b143      	cbz	r3, 800547e <_reclaim_reent+0x22>
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d144      	bne.n	80054fc <_reclaim_reent+0xa0>
 8005472:	69e3      	ldr	r3, [r4, #28]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	b111      	cbz	r1, 800547e <_reclaim_reent+0x22>
 8005478:	4620      	mov	r0, r4
 800547a:	f000 f87f 	bl	800557c <_free_r>
 800547e:	6961      	ldr	r1, [r4, #20]
 8005480:	b111      	cbz	r1, 8005488 <_reclaim_reent+0x2c>
 8005482:	4620      	mov	r0, r4
 8005484:	f000 f87a 	bl	800557c <_free_r>
 8005488:	69e1      	ldr	r1, [r4, #28]
 800548a:	b111      	cbz	r1, 8005492 <_reclaim_reent+0x36>
 800548c:	4620      	mov	r0, r4
 800548e:	f000 f875 	bl	800557c <_free_r>
 8005492:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005494:	b111      	cbz	r1, 800549c <_reclaim_reent+0x40>
 8005496:	4620      	mov	r0, r4
 8005498:	f000 f870 	bl	800557c <_free_r>
 800549c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800549e:	b111      	cbz	r1, 80054a6 <_reclaim_reent+0x4a>
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 f86b 	bl	800557c <_free_r>
 80054a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054a8:	b111      	cbz	r1, 80054b0 <_reclaim_reent+0x54>
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 f866 	bl	800557c <_free_r>
 80054b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80054b2:	b111      	cbz	r1, 80054ba <_reclaim_reent+0x5e>
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 f861 	bl	800557c <_free_r>
 80054ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80054bc:	b111      	cbz	r1, 80054c4 <_reclaim_reent+0x68>
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 f85c 	bl	800557c <_free_r>
 80054c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054c6:	b111      	cbz	r1, 80054ce <_reclaim_reent+0x72>
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 f857 	bl	800557c <_free_r>
 80054ce:	6a23      	ldr	r3, [r4, #32]
 80054d0:	b1b3      	cbz	r3, 8005500 <_reclaim_reent+0xa4>
 80054d2:	4620      	mov	r0, r4
 80054d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054d8:	4718      	bx	r3
 80054da:	5949      	ldr	r1, [r1, r5]
 80054dc:	b941      	cbnz	r1, 80054f0 <_reclaim_reent+0x94>
 80054de:	3504      	adds	r5, #4
 80054e0:	69e3      	ldr	r3, [r4, #28]
 80054e2:	2d80      	cmp	r5, #128	; 0x80
 80054e4:	68d9      	ldr	r1, [r3, #12]
 80054e6:	d1f8      	bne.n	80054da <_reclaim_reent+0x7e>
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 f847 	bl	800557c <_free_r>
 80054ee:	e7c0      	b.n	8005472 <_reclaim_reent+0x16>
 80054f0:	680e      	ldr	r6, [r1, #0]
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 f842 	bl	800557c <_free_r>
 80054f8:	4631      	mov	r1, r6
 80054fa:	e7ef      	b.n	80054dc <_reclaim_reent+0x80>
 80054fc:	2500      	movs	r5, #0
 80054fe:	e7ef      	b.n	80054e0 <_reclaim_reent+0x84>
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	bf00      	nop
 8005504:	2000005c 	.word	0x2000005c

08005508 <__errno>:
 8005508:	4b01      	ldr	r3, [pc, #4]	; (8005510 <__errno+0x8>)
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	2000005c 	.word	0x2000005c

08005514 <__libc_init_array>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	4d0d      	ldr	r5, [pc, #52]	; (800554c <__libc_init_array+0x38>)
 8005518:	4c0d      	ldr	r4, [pc, #52]	; (8005550 <__libc_init_array+0x3c>)
 800551a:	1b64      	subs	r4, r4, r5
 800551c:	10a4      	asrs	r4, r4, #2
 800551e:	2600      	movs	r6, #0
 8005520:	42a6      	cmp	r6, r4
 8005522:	d109      	bne.n	8005538 <__libc_init_array+0x24>
 8005524:	4d0b      	ldr	r5, [pc, #44]	; (8005554 <__libc_init_array+0x40>)
 8005526:	4c0c      	ldr	r4, [pc, #48]	; (8005558 <__libc_init_array+0x44>)
 8005528:	f000 fc6a 	bl	8005e00 <_init>
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	2600      	movs	r6, #0
 8005532:	42a6      	cmp	r6, r4
 8005534:	d105      	bne.n	8005542 <__libc_init_array+0x2e>
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	f855 3b04 	ldr.w	r3, [r5], #4
 800553c:	4798      	blx	r3
 800553e:	3601      	adds	r6, #1
 8005540:	e7ee      	b.n	8005520 <__libc_init_array+0xc>
 8005542:	f855 3b04 	ldr.w	r3, [r5], #4
 8005546:	4798      	blx	r3
 8005548:	3601      	adds	r6, #1
 800554a:	e7f2      	b.n	8005532 <__libc_init_array+0x1e>
 800554c:	08006038 	.word	0x08006038
 8005550:	08006038 	.word	0x08006038
 8005554:	08006038 	.word	0x08006038
 8005558:	0800603c 	.word	0x0800603c

0800555c <__retarget_lock_acquire_recursive>:
 800555c:	4770      	bx	lr

0800555e <__retarget_lock_release_recursive>:
 800555e:	4770      	bx	lr

08005560 <memcpy>:
 8005560:	440a      	add	r2, r1
 8005562:	4291      	cmp	r1, r2
 8005564:	f100 33ff 	add.w	r3, r0, #4294967295
 8005568:	d100      	bne.n	800556c <memcpy+0xc>
 800556a:	4770      	bx	lr
 800556c:	b510      	push	{r4, lr}
 800556e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005576:	4291      	cmp	r1, r2
 8005578:	d1f9      	bne.n	800556e <memcpy+0xe>
 800557a:	bd10      	pop	{r4, pc}

0800557c <_free_r>:
 800557c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800557e:	2900      	cmp	r1, #0
 8005580:	d044      	beq.n	800560c <_free_r+0x90>
 8005582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005586:	9001      	str	r0, [sp, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f1a1 0404 	sub.w	r4, r1, #4
 800558e:	bfb8      	it	lt
 8005590:	18e4      	addlt	r4, r4, r3
 8005592:	f000 f8df 	bl	8005754 <__malloc_lock>
 8005596:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <_free_r+0x94>)
 8005598:	9801      	ldr	r0, [sp, #4]
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	b933      	cbnz	r3, 80055ac <_free_r+0x30>
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	6014      	str	r4, [r2, #0]
 80055a2:	b003      	add	sp, #12
 80055a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055a8:	f000 b8da 	b.w	8005760 <__malloc_unlock>
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d908      	bls.n	80055c2 <_free_r+0x46>
 80055b0:	6825      	ldr	r5, [r4, #0]
 80055b2:	1961      	adds	r1, r4, r5
 80055b4:	428b      	cmp	r3, r1
 80055b6:	bf01      	itttt	eq
 80055b8:	6819      	ldreq	r1, [r3, #0]
 80055ba:	685b      	ldreq	r3, [r3, #4]
 80055bc:	1949      	addeq	r1, r1, r5
 80055be:	6021      	streq	r1, [r4, #0]
 80055c0:	e7ed      	b.n	800559e <_free_r+0x22>
 80055c2:	461a      	mov	r2, r3
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	b10b      	cbz	r3, 80055cc <_free_r+0x50>
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	d9fa      	bls.n	80055c2 <_free_r+0x46>
 80055cc:	6811      	ldr	r1, [r2, #0]
 80055ce:	1855      	adds	r5, r2, r1
 80055d0:	42a5      	cmp	r5, r4
 80055d2:	d10b      	bne.n	80055ec <_free_r+0x70>
 80055d4:	6824      	ldr	r4, [r4, #0]
 80055d6:	4421      	add	r1, r4
 80055d8:	1854      	adds	r4, r2, r1
 80055da:	42a3      	cmp	r3, r4
 80055dc:	6011      	str	r1, [r2, #0]
 80055de:	d1e0      	bne.n	80055a2 <_free_r+0x26>
 80055e0:	681c      	ldr	r4, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	6053      	str	r3, [r2, #4]
 80055e6:	440c      	add	r4, r1
 80055e8:	6014      	str	r4, [r2, #0]
 80055ea:	e7da      	b.n	80055a2 <_free_r+0x26>
 80055ec:	d902      	bls.n	80055f4 <_free_r+0x78>
 80055ee:	230c      	movs	r3, #12
 80055f0:	6003      	str	r3, [r0, #0]
 80055f2:	e7d6      	b.n	80055a2 <_free_r+0x26>
 80055f4:	6825      	ldr	r5, [r4, #0]
 80055f6:	1961      	adds	r1, r4, r5
 80055f8:	428b      	cmp	r3, r1
 80055fa:	bf04      	itt	eq
 80055fc:	6819      	ldreq	r1, [r3, #0]
 80055fe:	685b      	ldreq	r3, [r3, #4]
 8005600:	6063      	str	r3, [r4, #4]
 8005602:	bf04      	itt	eq
 8005604:	1949      	addeq	r1, r1, r5
 8005606:	6021      	streq	r1, [r4, #0]
 8005608:	6054      	str	r4, [r2, #4]
 800560a:	e7ca      	b.n	80055a2 <_free_r+0x26>
 800560c:	b003      	add	sp, #12
 800560e:	bd30      	pop	{r4, r5, pc}
 8005610:	20004254 	.word	0x20004254

08005614 <sbrk_aligned>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4e0e      	ldr	r6, [pc, #56]	; (8005650 <sbrk_aligned+0x3c>)
 8005618:	460c      	mov	r4, r1
 800561a:	6831      	ldr	r1, [r6, #0]
 800561c:	4605      	mov	r5, r0
 800561e:	b911      	cbnz	r1, 8005626 <sbrk_aligned+0x12>
 8005620:	f000 fba6 	bl	8005d70 <_sbrk_r>
 8005624:	6030      	str	r0, [r6, #0]
 8005626:	4621      	mov	r1, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f000 fba1 	bl	8005d70 <_sbrk_r>
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	d00a      	beq.n	8005648 <sbrk_aligned+0x34>
 8005632:	1cc4      	adds	r4, r0, #3
 8005634:	f024 0403 	bic.w	r4, r4, #3
 8005638:	42a0      	cmp	r0, r4
 800563a:	d007      	beq.n	800564c <sbrk_aligned+0x38>
 800563c:	1a21      	subs	r1, r4, r0
 800563e:	4628      	mov	r0, r5
 8005640:	f000 fb96 	bl	8005d70 <_sbrk_r>
 8005644:	3001      	adds	r0, #1
 8005646:	d101      	bne.n	800564c <sbrk_aligned+0x38>
 8005648:	f04f 34ff 	mov.w	r4, #4294967295
 800564c:	4620      	mov	r0, r4
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	20004258 	.word	0x20004258

08005654 <_malloc_r>:
 8005654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005658:	1ccd      	adds	r5, r1, #3
 800565a:	f025 0503 	bic.w	r5, r5, #3
 800565e:	3508      	adds	r5, #8
 8005660:	2d0c      	cmp	r5, #12
 8005662:	bf38      	it	cc
 8005664:	250c      	movcc	r5, #12
 8005666:	2d00      	cmp	r5, #0
 8005668:	4607      	mov	r7, r0
 800566a:	db01      	blt.n	8005670 <_malloc_r+0x1c>
 800566c:	42a9      	cmp	r1, r5
 800566e:	d905      	bls.n	800567c <_malloc_r+0x28>
 8005670:	230c      	movs	r3, #12
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	2600      	movs	r6, #0
 8005676:	4630      	mov	r0, r6
 8005678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800567c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005750 <_malloc_r+0xfc>
 8005680:	f000 f868 	bl	8005754 <__malloc_lock>
 8005684:	f8d8 3000 	ldr.w	r3, [r8]
 8005688:	461c      	mov	r4, r3
 800568a:	bb5c      	cbnz	r4, 80056e4 <_malloc_r+0x90>
 800568c:	4629      	mov	r1, r5
 800568e:	4638      	mov	r0, r7
 8005690:	f7ff ffc0 	bl	8005614 <sbrk_aligned>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	4604      	mov	r4, r0
 8005698:	d155      	bne.n	8005746 <_malloc_r+0xf2>
 800569a:	f8d8 4000 	ldr.w	r4, [r8]
 800569e:	4626      	mov	r6, r4
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	d145      	bne.n	8005730 <_malloc_r+0xdc>
 80056a4:	2c00      	cmp	r4, #0
 80056a6:	d048      	beq.n	800573a <_malloc_r+0xe6>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	4631      	mov	r1, r6
 80056ac:	4638      	mov	r0, r7
 80056ae:	eb04 0903 	add.w	r9, r4, r3
 80056b2:	f000 fb5d 	bl	8005d70 <_sbrk_r>
 80056b6:	4581      	cmp	r9, r0
 80056b8:	d13f      	bne.n	800573a <_malloc_r+0xe6>
 80056ba:	6821      	ldr	r1, [r4, #0]
 80056bc:	1a6d      	subs	r5, r5, r1
 80056be:	4629      	mov	r1, r5
 80056c0:	4638      	mov	r0, r7
 80056c2:	f7ff ffa7 	bl	8005614 <sbrk_aligned>
 80056c6:	3001      	adds	r0, #1
 80056c8:	d037      	beq.n	800573a <_malloc_r+0xe6>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	442b      	add	r3, r5
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	f8d8 3000 	ldr.w	r3, [r8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d038      	beq.n	800574a <_malloc_r+0xf6>
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	42a2      	cmp	r2, r4
 80056dc:	d12b      	bne.n	8005736 <_malloc_r+0xe2>
 80056de:	2200      	movs	r2, #0
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	e00f      	b.n	8005704 <_malloc_r+0xb0>
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	1b52      	subs	r2, r2, r5
 80056e8:	d41f      	bmi.n	800572a <_malloc_r+0xd6>
 80056ea:	2a0b      	cmp	r2, #11
 80056ec:	d917      	bls.n	800571e <_malloc_r+0xca>
 80056ee:	1961      	adds	r1, r4, r5
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	6025      	str	r5, [r4, #0]
 80056f4:	bf18      	it	ne
 80056f6:	6059      	strne	r1, [r3, #4]
 80056f8:	6863      	ldr	r3, [r4, #4]
 80056fa:	bf08      	it	eq
 80056fc:	f8c8 1000 	streq.w	r1, [r8]
 8005700:	5162      	str	r2, [r4, r5]
 8005702:	604b      	str	r3, [r1, #4]
 8005704:	4638      	mov	r0, r7
 8005706:	f104 060b 	add.w	r6, r4, #11
 800570a:	f000 f829 	bl	8005760 <__malloc_unlock>
 800570e:	f026 0607 	bic.w	r6, r6, #7
 8005712:	1d23      	adds	r3, r4, #4
 8005714:	1af2      	subs	r2, r6, r3
 8005716:	d0ae      	beq.n	8005676 <_malloc_r+0x22>
 8005718:	1b9b      	subs	r3, r3, r6
 800571a:	50a3      	str	r3, [r4, r2]
 800571c:	e7ab      	b.n	8005676 <_malloc_r+0x22>
 800571e:	42a3      	cmp	r3, r4
 8005720:	6862      	ldr	r2, [r4, #4]
 8005722:	d1dd      	bne.n	80056e0 <_malloc_r+0x8c>
 8005724:	f8c8 2000 	str.w	r2, [r8]
 8005728:	e7ec      	b.n	8005704 <_malloc_r+0xb0>
 800572a:	4623      	mov	r3, r4
 800572c:	6864      	ldr	r4, [r4, #4]
 800572e:	e7ac      	b.n	800568a <_malloc_r+0x36>
 8005730:	4634      	mov	r4, r6
 8005732:	6876      	ldr	r6, [r6, #4]
 8005734:	e7b4      	b.n	80056a0 <_malloc_r+0x4c>
 8005736:	4613      	mov	r3, r2
 8005738:	e7cc      	b.n	80056d4 <_malloc_r+0x80>
 800573a:	230c      	movs	r3, #12
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4638      	mov	r0, r7
 8005740:	f000 f80e 	bl	8005760 <__malloc_unlock>
 8005744:	e797      	b.n	8005676 <_malloc_r+0x22>
 8005746:	6025      	str	r5, [r4, #0]
 8005748:	e7dc      	b.n	8005704 <_malloc_r+0xb0>
 800574a:	605b      	str	r3, [r3, #4]
 800574c:	deff      	udf	#255	; 0xff
 800574e:	bf00      	nop
 8005750:	20004254 	.word	0x20004254

08005754 <__malloc_lock>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__malloc_lock+0x8>)
 8005756:	f7ff bf01 	b.w	800555c <__retarget_lock_acquire_recursive>
 800575a:	bf00      	nop
 800575c:	20004250 	.word	0x20004250

08005760 <__malloc_unlock>:
 8005760:	4801      	ldr	r0, [pc, #4]	; (8005768 <__malloc_unlock+0x8>)
 8005762:	f7ff befc 	b.w	800555e <__retarget_lock_release_recursive>
 8005766:	bf00      	nop
 8005768:	20004250 	.word	0x20004250

0800576c <__ssputs_r>:
 800576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	688e      	ldr	r6, [r1, #8]
 8005772:	461f      	mov	r7, r3
 8005774:	42be      	cmp	r6, r7
 8005776:	680b      	ldr	r3, [r1, #0]
 8005778:	4682      	mov	sl, r0
 800577a:	460c      	mov	r4, r1
 800577c:	4690      	mov	r8, r2
 800577e:	d82c      	bhi.n	80057da <__ssputs_r+0x6e>
 8005780:	898a      	ldrh	r2, [r1, #12]
 8005782:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005786:	d026      	beq.n	80057d6 <__ssputs_r+0x6a>
 8005788:	6965      	ldr	r5, [r4, #20]
 800578a:	6909      	ldr	r1, [r1, #16]
 800578c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005790:	eba3 0901 	sub.w	r9, r3, r1
 8005794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005798:	1c7b      	adds	r3, r7, #1
 800579a:	444b      	add	r3, r9
 800579c:	106d      	asrs	r5, r5, #1
 800579e:	429d      	cmp	r5, r3
 80057a0:	bf38      	it	cc
 80057a2:	461d      	movcc	r5, r3
 80057a4:	0553      	lsls	r3, r2, #21
 80057a6:	d527      	bpl.n	80057f8 <__ssputs_r+0x8c>
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7ff ff53 	bl	8005654 <_malloc_r>
 80057ae:	4606      	mov	r6, r0
 80057b0:	b360      	cbz	r0, 800580c <__ssputs_r+0xa0>
 80057b2:	6921      	ldr	r1, [r4, #16]
 80057b4:	464a      	mov	r2, r9
 80057b6:	f7ff fed3 	bl	8005560 <memcpy>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c4:	81a3      	strh	r3, [r4, #12]
 80057c6:	6126      	str	r6, [r4, #16]
 80057c8:	6165      	str	r5, [r4, #20]
 80057ca:	444e      	add	r6, r9
 80057cc:	eba5 0509 	sub.w	r5, r5, r9
 80057d0:	6026      	str	r6, [r4, #0]
 80057d2:	60a5      	str	r5, [r4, #8]
 80057d4:	463e      	mov	r6, r7
 80057d6:	42be      	cmp	r6, r7
 80057d8:	d900      	bls.n	80057dc <__ssputs_r+0x70>
 80057da:	463e      	mov	r6, r7
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	4632      	mov	r2, r6
 80057e0:	4641      	mov	r1, r8
 80057e2:	f000 faab 	bl	8005d3c <memmove>
 80057e6:	68a3      	ldr	r3, [r4, #8]
 80057e8:	1b9b      	subs	r3, r3, r6
 80057ea:	60a3      	str	r3, [r4, #8]
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	4433      	add	r3, r6
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	2000      	movs	r0, #0
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	462a      	mov	r2, r5
 80057fa:	f000 fac9 	bl	8005d90 <_realloc_r>
 80057fe:	4606      	mov	r6, r0
 8005800:	2800      	cmp	r0, #0
 8005802:	d1e0      	bne.n	80057c6 <__ssputs_r+0x5a>
 8005804:	6921      	ldr	r1, [r4, #16]
 8005806:	4650      	mov	r0, sl
 8005808:	f7ff feb8 	bl	800557c <_free_r>
 800580c:	230c      	movs	r3, #12
 800580e:	f8ca 3000 	str.w	r3, [sl]
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	f04f 30ff 	mov.w	r0, #4294967295
 800581e:	e7e9      	b.n	80057f4 <__ssputs_r+0x88>

08005820 <_svfiprintf_r>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	4698      	mov	r8, r3
 8005826:	898b      	ldrh	r3, [r1, #12]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	b09d      	sub	sp, #116	; 0x74
 800582c:	4607      	mov	r7, r0
 800582e:	460d      	mov	r5, r1
 8005830:	4614      	mov	r4, r2
 8005832:	d50e      	bpl.n	8005852 <_svfiprintf_r+0x32>
 8005834:	690b      	ldr	r3, [r1, #16]
 8005836:	b963      	cbnz	r3, 8005852 <_svfiprintf_r+0x32>
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	f7ff ff0b 	bl	8005654 <_malloc_r>
 800583e:	6028      	str	r0, [r5, #0]
 8005840:	6128      	str	r0, [r5, #16]
 8005842:	b920      	cbnz	r0, 800584e <_svfiprintf_r+0x2e>
 8005844:	230c      	movs	r3, #12
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	e0d0      	b.n	80059f0 <_svfiprintf_r+0x1d0>
 800584e:	2340      	movs	r3, #64	; 0x40
 8005850:	616b      	str	r3, [r5, #20]
 8005852:	2300      	movs	r3, #0
 8005854:	9309      	str	r3, [sp, #36]	; 0x24
 8005856:	2320      	movs	r3, #32
 8005858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800585c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005860:	2330      	movs	r3, #48	; 0x30
 8005862:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a08 <_svfiprintf_r+0x1e8>
 8005866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800586a:	f04f 0901 	mov.w	r9, #1
 800586e:	4623      	mov	r3, r4
 8005870:	469a      	mov	sl, r3
 8005872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005876:	b10a      	cbz	r2, 800587c <_svfiprintf_r+0x5c>
 8005878:	2a25      	cmp	r2, #37	; 0x25
 800587a:	d1f9      	bne.n	8005870 <_svfiprintf_r+0x50>
 800587c:	ebba 0b04 	subs.w	fp, sl, r4
 8005880:	d00b      	beq.n	800589a <_svfiprintf_r+0x7a>
 8005882:	465b      	mov	r3, fp
 8005884:	4622      	mov	r2, r4
 8005886:	4629      	mov	r1, r5
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff ff6f 	bl	800576c <__ssputs_r>
 800588e:	3001      	adds	r0, #1
 8005890:	f000 80a9 	beq.w	80059e6 <_svfiprintf_r+0x1c6>
 8005894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005896:	445a      	add	r2, fp
 8005898:	9209      	str	r2, [sp, #36]	; 0x24
 800589a:	f89a 3000 	ldrb.w	r3, [sl]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80a1 	beq.w	80059e6 <_svfiprintf_r+0x1c6>
 80058a4:	2300      	movs	r3, #0
 80058a6:	f04f 32ff 	mov.w	r2, #4294967295
 80058aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ae:	f10a 0a01 	add.w	sl, sl, #1
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	9307      	str	r3, [sp, #28]
 80058b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ba:	931a      	str	r3, [sp, #104]	; 0x68
 80058bc:	4654      	mov	r4, sl
 80058be:	2205      	movs	r2, #5
 80058c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c4:	4850      	ldr	r0, [pc, #320]	; (8005a08 <_svfiprintf_r+0x1e8>)
 80058c6:	f7fa fc8b 	bl	80001e0 <memchr>
 80058ca:	9a04      	ldr	r2, [sp, #16]
 80058cc:	b9d8      	cbnz	r0, 8005906 <_svfiprintf_r+0xe6>
 80058ce:	06d0      	lsls	r0, r2, #27
 80058d0:	bf44      	itt	mi
 80058d2:	2320      	movmi	r3, #32
 80058d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058d8:	0711      	lsls	r1, r2, #28
 80058da:	bf44      	itt	mi
 80058dc:	232b      	movmi	r3, #43	; 0x2b
 80058de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e2:	f89a 3000 	ldrb.w	r3, [sl]
 80058e6:	2b2a      	cmp	r3, #42	; 0x2a
 80058e8:	d015      	beq.n	8005916 <_svfiprintf_r+0xf6>
 80058ea:	9a07      	ldr	r2, [sp, #28]
 80058ec:	4654      	mov	r4, sl
 80058ee:	2000      	movs	r0, #0
 80058f0:	f04f 0c0a 	mov.w	ip, #10
 80058f4:	4621      	mov	r1, r4
 80058f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058fa:	3b30      	subs	r3, #48	; 0x30
 80058fc:	2b09      	cmp	r3, #9
 80058fe:	d94d      	bls.n	800599c <_svfiprintf_r+0x17c>
 8005900:	b1b0      	cbz	r0, 8005930 <_svfiprintf_r+0x110>
 8005902:	9207      	str	r2, [sp, #28]
 8005904:	e014      	b.n	8005930 <_svfiprintf_r+0x110>
 8005906:	eba0 0308 	sub.w	r3, r0, r8
 800590a:	fa09 f303 	lsl.w	r3, r9, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	9304      	str	r3, [sp, #16]
 8005912:	46a2      	mov	sl, r4
 8005914:	e7d2      	b.n	80058bc <_svfiprintf_r+0x9c>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	1d19      	adds	r1, r3, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	9103      	str	r1, [sp, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfbb      	ittet	lt
 8005922:	425b      	neglt	r3, r3
 8005924:	f042 0202 	orrlt.w	r2, r2, #2
 8005928:	9307      	strge	r3, [sp, #28]
 800592a:	9307      	strlt	r3, [sp, #28]
 800592c:	bfb8      	it	lt
 800592e:	9204      	strlt	r2, [sp, #16]
 8005930:	7823      	ldrb	r3, [r4, #0]
 8005932:	2b2e      	cmp	r3, #46	; 0x2e
 8005934:	d10c      	bne.n	8005950 <_svfiprintf_r+0x130>
 8005936:	7863      	ldrb	r3, [r4, #1]
 8005938:	2b2a      	cmp	r3, #42	; 0x2a
 800593a:	d134      	bne.n	80059a6 <_svfiprintf_r+0x186>
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	9203      	str	r2, [sp, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfb8      	it	lt
 8005948:	f04f 33ff 	movlt.w	r3, #4294967295
 800594c:	3402      	adds	r4, #2
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a18 <_svfiprintf_r+0x1f8>
 8005954:	7821      	ldrb	r1, [r4, #0]
 8005956:	2203      	movs	r2, #3
 8005958:	4650      	mov	r0, sl
 800595a:	f7fa fc41 	bl	80001e0 <memchr>
 800595e:	b138      	cbz	r0, 8005970 <_svfiprintf_r+0x150>
 8005960:	9b04      	ldr	r3, [sp, #16]
 8005962:	eba0 000a 	sub.w	r0, r0, sl
 8005966:	2240      	movs	r2, #64	; 0x40
 8005968:	4082      	lsls	r2, r0
 800596a:	4313      	orrs	r3, r2
 800596c:	3401      	adds	r4, #1
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005974:	4825      	ldr	r0, [pc, #148]	; (8005a0c <_svfiprintf_r+0x1ec>)
 8005976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800597a:	2206      	movs	r2, #6
 800597c:	f7fa fc30 	bl	80001e0 <memchr>
 8005980:	2800      	cmp	r0, #0
 8005982:	d038      	beq.n	80059f6 <_svfiprintf_r+0x1d6>
 8005984:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <_svfiprintf_r+0x1f0>)
 8005986:	bb1b      	cbnz	r3, 80059d0 <_svfiprintf_r+0x1b0>
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	3307      	adds	r3, #7
 800598c:	f023 0307 	bic.w	r3, r3, #7
 8005990:	3308      	adds	r3, #8
 8005992:	9303      	str	r3, [sp, #12]
 8005994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005996:	4433      	add	r3, r6
 8005998:	9309      	str	r3, [sp, #36]	; 0x24
 800599a:	e768      	b.n	800586e <_svfiprintf_r+0x4e>
 800599c:	fb0c 3202 	mla	r2, ip, r2, r3
 80059a0:	460c      	mov	r4, r1
 80059a2:	2001      	movs	r0, #1
 80059a4:	e7a6      	b.n	80058f4 <_svfiprintf_r+0xd4>
 80059a6:	2300      	movs	r3, #0
 80059a8:	3401      	adds	r4, #1
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	4619      	mov	r1, r3
 80059ae:	f04f 0c0a 	mov.w	ip, #10
 80059b2:	4620      	mov	r0, r4
 80059b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059b8:	3a30      	subs	r2, #48	; 0x30
 80059ba:	2a09      	cmp	r2, #9
 80059bc:	d903      	bls.n	80059c6 <_svfiprintf_r+0x1a6>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0c6      	beq.n	8005950 <_svfiprintf_r+0x130>
 80059c2:	9105      	str	r1, [sp, #20]
 80059c4:	e7c4      	b.n	8005950 <_svfiprintf_r+0x130>
 80059c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ca:	4604      	mov	r4, r0
 80059cc:	2301      	movs	r3, #1
 80059ce:	e7f0      	b.n	80059b2 <_svfiprintf_r+0x192>
 80059d0:	ab03      	add	r3, sp, #12
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	462a      	mov	r2, r5
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <_svfiprintf_r+0x1f4>)
 80059d8:	a904      	add	r1, sp, #16
 80059da:	4638      	mov	r0, r7
 80059dc:	f3af 8000 	nop.w
 80059e0:	1c42      	adds	r2, r0, #1
 80059e2:	4606      	mov	r6, r0
 80059e4:	d1d6      	bne.n	8005994 <_svfiprintf_r+0x174>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	065b      	lsls	r3, r3, #25
 80059ea:	f53f af2d 	bmi.w	8005848 <_svfiprintf_r+0x28>
 80059ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059f0:	b01d      	add	sp, #116	; 0x74
 80059f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f6:	ab03      	add	r3, sp, #12
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	462a      	mov	r2, r5
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <_svfiprintf_r+0x1f4>)
 80059fe:	a904      	add	r1, sp, #16
 8005a00:	4638      	mov	r0, r7
 8005a02:	f000 f879 	bl	8005af8 <_printf_i>
 8005a06:	e7eb      	b.n	80059e0 <_svfiprintf_r+0x1c0>
 8005a08:	08005ffc 	.word	0x08005ffc
 8005a0c:	08006006 	.word	0x08006006
 8005a10:	00000000 	.word	0x00000000
 8005a14:	0800576d 	.word	0x0800576d
 8005a18:	08006002 	.word	0x08006002

08005a1c <_printf_common>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	4616      	mov	r6, r2
 8005a22:	4699      	mov	r9, r3
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfb8      	it	lt
 8005a30:	4613      	movlt	r3, r2
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a38:	4607      	mov	r7, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_printf_common+0x26>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	0699      	lsls	r1, r3, #26
 8005a46:	bf42      	ittt	mi
 8005a48:	6833      	ldrmi	r3, [r6, #0]
 8005a4a:	3302      	addmi	r3, #2
 8005a4c:	6033      	strmi	r3, [r6, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d106      	bne.n	8005a64 <_printf_common+0x48>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	6832      	ldr	r2, [r6, #0]
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	dc26      	bgt.n	8005ab2 <_printf_common+0x96>
 8005a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a68:	1e13      	subs	r3, r2, #0
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	bf18      	it	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	0692      	lsls	r2, r2, #26
 8005a72:	d42b      	bmi.n	8005acc <_printf_common+0xb0>
 8005a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c0      	blx	r8
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d01e      	beq.n	8005ac0 <_printf_common+0xa4>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	6922      	ldr	r2, [r4, #16]
 8005a86:	f003 0306 	and.w	r3, r3, #6
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	bf02      	ittt	eq
 8005a8e:	68e5      	ldreq	r5, [r4, #12]
 8005a90:	6833      	ldreq	r3, [r6, #0]
 8005a92:	1aed      	subeq	r5, r5, r3
 8005a94:	68a3      	ldr	r3, [r4, #8]
 8005a96:	bf0c      	ite	eq
 8005a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a9c:	2500      	movne	r5, #0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bfc4      	itt	gt
 8005aa2:	1a9b      	subgt	r3, r3, r2
 8005aa4:	18ed      	addgt	r5, r5, r3
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	341a      	adds	r4, #26
 8005aaa:	42b5      	cmp	r5, r6
 8005aac:	d11a      	bne.n	8005ae4 <_printf_common+0xc8>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e008      	b.n	8005ac4 <_printf_common+0xa8>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4638      	mov	r0, r7
 8005aba:	47c0      	blx	r8
 8005abc:	3001      	adds	r0, #1
 8005abe:	d103      	bne.n	8005ac8 <_printf_common+0xac>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7c6      	b.n	8005a5a <_printf_common+0x3e>
 8005acc:	18e1      	adds	r1, r4, r3
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	2030      	movs	r0, #48	; 0x30
 8005ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ad6:	4422      	add	r2, r4
 8005ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	e7c7      	b.n	8005a74 <_printf_common+0x58>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d0e6      	beq.n	8005ac0 <_printf_common+0xa4>
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7d9      	b.n	8005aaa <_printf_common+0x8e>
	...

08005af8 <_printf_i>:
 8005af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	7e0f      	ldrb	r7, [r1, #24]
 8005afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b00:	2f78      	cmp	r7, #120	; 0x78
 8005b02:	4691      	mov	r9, r2
 8005b04:	4680      	mov	r8, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b0e:	d807      	bhi.n	8005b20 <_printf_i+0x28>
 8005b10:	2f62      	cmp	r7, #98	; 0x62
 8005b12:	d80a      	bhi.n	8005b2a <_printf_i+0x32>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	f000 80d4 	beq.w	8005cc2 <_printf_i+0x1ca>
 8005b1a:	2f58      	cmp	r7, #88	; 0x58
 8005b1c:	f000 80c0 	beq.w	8005ca0 <_printf_i+0x1a8>
 8005b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b28:	e03a      	b.n	8005ba0 <_printf_i+0xa8>
 8005b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b2e:	2b15      	cmp	r3, #21
 8005b30:	d8f6      	bhi.n	8005b20 <_printf_i+0x28>
 8005b32:	a101      	add	r1, pc, #4	; (adr r1, 8005b38 <_printf_i+0x40>)
 8005b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005b21 	.word	0x08005b21
 8005b44:	08005b21 	.word	0x08005b21
 8005b48:	08005b21 	.word	0x08005b21
 8005b4c:	08005b21 	.word	0x08005b21
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005b21 	.word	0x08005b21
 8005b58:	08005b21 	.word	0x08005b21
 8005b5c:	08005b21 	.word	0x08005b21
 8005b60:	08005b21 	.word	0x08005b21
 8005b64:	08005ca9 	.word	0x08005ca9
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005c63 	.word	0x08005c63
 8005b70:	08005b21 	.word	0x08005b21
 8005b74:	08005b21 	.word	0x08005b21
 8005b78:	08005ccb 	.word	0x08005ccb
 8005b7c:	08005b21 	.word	0x08005b21
 8005b80:	08005bd1 	.word	0x08005bd1
 8005b84:	08005b21 	.word	0x08005b21
 8005b88:	08005b21 	.word	0x08005b21
 8005b8c:	08005c6b 	.word	0x08005c6b
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	602a      	str	r2, [r5, #0]
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e09f      	b.n	8005ce4 <_printf_i+0x1ec>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	0607      	lsls	r7, r0, #24
 8005baa:	f103 0104 	add.w	r1, r3, #4
 8005bae:	6029      	str	r1, [r5, #0]
 8005bb0:	d501      	bpl.n	8005bb6 <_printf_i+0xbe>
 8005bb2:	681e      	ldr	r6, [r3, #0]
 8005bb4:	e003      	b.n	8005bbe <_printf_i+0xc6>
 8005bb6:	0646      	lsls	r6, r0, #25
 8005bb8:	d5fb      	bpl.n	8005bb2 <_printf_i+0xba>
 8005bba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bbe:	2e00      	cmp	r6, #0
 8005bc0:	da03      	bge.n	8005bca <_printf_i+0xd2>
 8005bc2:	232d      	movs	r3, #45	; 0x2d
 8005bc4:	4276      	negs	r6, r6
 8005bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bca:	485a      	ldr	r0, [pc, #360]	; (8005d34 <_printf_i+0x23c>)
 8005bcc:	230a      	movs	r3, #10
 8005bce:	e012      	b.n	8005bf6 <_printf_i+0xfe>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	1d19      	adds	r1, r3, #4
 8005bd6:	6029      	str	r1, [r5, #0]
 8005bd8:	0605      	lsls	r5, r0, #24
 8005bda:	d501      	bpl.n	8005be0 <_printf_i+0xe8>
 8005bdc:	681e      	ldr	r6, [r3, #0]
 8005bde:	e002      	b.n	8005be6 <_printf_i+0xee>
 8005be0:	0641      	lsls	r1, r0, #25
 8005be2:	d5fb      	bpl.n	8005bdc <_printf_i+0xe4>
 8005be4:	881e      	ldrh	r6, [r3, #0]
 8005be6:	4853      	ldr	r0, [pc, #332]	; (8005d34 <_printf_i+0x23c>)
 8005be8:	2f6f      	cmp	r7, #111	; 0x6f
 8005bea:	bf0c      	ite	eq
 8005bec:	2308      	moveq	r3, #8
 8005bee:	230a      	movne	r3, #10
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bf6:	6865      	ldr	r5, [r4, #4]
 8005bf8:	60a5      	str	r5, [r4, #8]
 8005bfa:	2d00      	cmp	r5, #0
 8005bfc:	bfa2      	ittt	ge
 8005bfe:	6821      	ldrge	r1, [r4, #0]
 8005c00:	f021 0104 	bicge.w	r1, r1, #4
 8005c04:	6021      	strge	r1, [r4, #0]
 8005c06:	b90e      	cbnz	r6, 8005c0c <_printf_i+0x114>
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	d04b      	beq.n	8005ca4 <_printf_i+0x1ac>
 8005c0c:	4615      	mov	r5, r2
 8005c0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c12:	fb03 6711 	mls	r7, r3, r1, r6
 8005c16:	5dc7      	ldrb	r7, [r0, r7]
 8005c18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c1c:	4637      	mov	r7, r6
 8005c1e:	42bb      	cmp	r3, r7
 8005c20:	460e      	mov	r6, r1
 8005c22:	d9f4      	bls.n	8005c0e <_printf_i+0x116>
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d10b      	bne.n	8005c40 <_printf_i+0x148>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07de      	lsls	r6, r3, #31
 8005c2c:	d508      	bpl.n	8005c40 <_printf_i+0x148>
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	6861      	ldr	r1, [r4, #4]
 8005c32:	4299      	cmp	r1, r3
 8005c34:	bfde      	ittt	le
 8005c36:	2330      	movle	r3, #48	; 0x30
 8005c38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c40:	1b52      	subs	r2, r2, r5
 8005c42:	6122      	str	r2, [r4, #16]
 8005c44:	f8cd a000 	str.w	sl, [sp]
 8005c48:	464b      	mov	r3, r9
 8005c4a:	aa03      	add	r2, sp, #12
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4640      	mov	r0, r8
 8005c50:	f7ff fee4 	bl	8005a1c <_printf_common>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d14a      	bne.n	8005cee <_printf_i+0x1f6>
 8005c58:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5c:	b004      	add	sp, #16
 8005c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	f043 0320 	orr.w	r3, r3, #32
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	4833      	ldr	r0, [pc, #204]	; (8005d38 <_printf_i+0x240>)
 8005c6c:	2778      	movs	r7, #120	; 0x78
 8005c6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	6829      	ldr	r1, [r5, #0]
 8005c76:	061f      	lsls	r7, r3, #24
 8005c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c7c:	d402      	bmi.n	8005c84 <_printf_i+0x18c>
 8005c7e:	065f      	lsls	r7, r3, #25
 8005c80:	bf48      	it	mi
 8005c82:	b2b6      	uxthmi	r6, r6
 8005c84:	07df      	lsls	r7, r3, #31
 8005c86:	bf48      	it	mi
 8005c88:	f043 0320 	orrmi.w	r3, r3, #32
 8005c8c:	6029      	str	r1, [r5, #0]
 8005c8e:	bf48      	it	mi
 8005c90:	6023      	strmi	r3, [r4, #0]
 8005c92:	b91e      	cbnz	r6, 8005c9c <_printf_i+0x1a4>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	f023 0320 	bic.w	r3, r3, #32
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	e7a7      	b.n	8005bf0 <_printf_i+0xf8>
 8005ca0:	4824      	ldr	r0, [pc, #144]	; (8005d34 <_printf_i+0x23c>)
 8005ca2:	e7e4      	b.n	8005c6e <_printf_i+0x176>
 8005ca4:	4615      	mov	r5, r2
 8005ca6:	e7bd      	b.n	8005c24 <_printf_i+0x12c>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	6826      	ldr	r6, [r4, #0]
 8005cac:	6961      	ldr	r1, [r4, #20]
 8005cae:	1d18      	adds	r0, r3, #4
 8005cb0:	6028      	str	r0, [r5, #0]
 8005cb2:	0635      	lsls	r5, r6, #24
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	d501      	bpl.n	8005cbc <_printf_i+0x1c4>
 8005cb8:	6019      	str	r1, [r3, #0]
 8005cba:	e002      	b.n	8005cc2 <_printf_i+0x1ca>
 8005cbc:	0670      	lsls	r0, r6, #25
 8005cbe:	d5fb      	bpl.n	8005cb8 <_printf_i+0x1c0>
 8005cc0:	8019      	strh	r1, [r3, #0]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	4615      	mov	r5, r2
 8005cc8:	e7bc      	b.n	8005c44 <_printf_i+0x14c>
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	1d1a      	adds	r2, r3, #4
 8005cce:	602a      	str	r2, [r5, #0]
 8005cd0:	681d      	ldr	r5, [r3, #0]
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7fa fa82 	bl	80001e0 <memchr>
 8005cdc:	b108      	cbz	r0, 8005ce2 <_printf_i+0x1ea>
 8005cde:	1b40      	subs	r0, r0, r5
 8005ce0:	6060      	str	r0, [r4, #4]
 8005ce2:	6863      	ldr	r3, [r4, #4]
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cec:	e7aa      	b.n	8005c44 <_printf_i+0x14c>
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	47d0      	blx	sl
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d0ad      	beq.n	8005c58 <_printf_i+0x160>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	079b      	lsls	r3, r3, #30
 8005d00:	d413      	bmi.n	8005d2a <_printf_i+0x232>
 8005d02:	68e0      	ldr	r0, [r4, #12]
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	4298      	cmp	r0, r3
 8005d08:	bfb8      	it	lt
 8005d0a:	4618      	movlt	r0, r3
 8005d0c:	e7a6      	b.n	8005c5c <_printf_i+0x164>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4632      	mov	r2, r6
 8005d12:	4649      	mov	r1, r9
 8005d14:	4640      	mov	r0, r8
 8005d16:	47d0      	blx	sl
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d09d      	beq.n	8005c58 <_printf_i+0x160>
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	9903      	ldr	r1, [sp, #12]
 8005d22:	1a5b      	subs	r3, r3, r1
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dcf2      	bgt.n	8005d0e <_printf_i+0x216>
 8005d28:	e7eb      	b.n	8005d02 <_printf_i+0x20a>
 8005d2a:	2500      	movs	r5, #0
 8005d2c:	f104 0619 	add.w	r6, r4, #25
 8005d30:	e7f5      	b.n	8005d1e <_printf_i+0x226>
 8005d32:	bf00      	nop
 8005d34:	0800600d 	.word	0x0800600d
 8005d38:	0800601e 	.word	0x0800601e

08005d3c <memmove>:
 8005d3c:	4288      	cmp	r0, r1
 8005d3e:	b510      	push	{r4, lr}
 8005d40:	eb01 0402 	add.w	r4, r1, r2
 8005d44:	d902      	bls.n	8005d4c <memmove+0x10>
 8005d46:	4284      	cmp	r4, r0
 8005d48:	4623      	mov	r3, r4
 8005d4a:	d807      	bhi.n	8005d5c <memmove+0x20>
 8005d4c:	1e43      	subs	r3, r0, #1
 8005d4e:	42a1      	cmp	r1, r4
 8005d50:	d008      	beq.n	8005d64 <memmove+0x28>
 8005d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d5a:	e7f8      	b.n	8005d4e <memmove+0x12>
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4601      	mov	r1, r0
 8005d60:	428a      	cmp	r2, r1
 8005d62:	d100      	bne.n	8005d66 <memmove+0x2a>
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d6e:	e7f7      	b.n	8005d60 <memmove+0x24>

08005d70 <_sbrk_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d06      	ldr	r5, [pc, #24]	; (8005d8c <_sbrk_r+0x1c>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	f7fa ff82 	bl	8000c84 <_sbrk>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_sbrk_r+0x1a>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_sbrk_r+0x1a>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	2000424c 	.word	0x2000424c

08005d90 <_realloc_r>:
 8005d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	4680      	mov	r8, r0
 8005d96:	4614      	mov	r4, r2
 8005d98:	460e      	mov	r6, r1
 8005d9a:	b921      	cbnz	r1, 8005da6 <_realloc_r+0x16>
 8005d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da0:	4611      	mov	r1, r2
 8005da2:	f7ff bc57 	b.w	8005654 <_malloc_r>
 8005da6:	b92a      	cbnz	r2, 8005db4 <_realloc_r+0x24>
 8005da8:	f7ff fbe8 	bl	800557c <_free_r>
 8005dac:	4625      	mov	r5, r4
 8005dae:	4628      	mov	r0, r5
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	f000 f81b 	bl	8005dee <_malloc_usable_size_r>
 8005db8:	4284      	cmp	r4, r0
 8005dba:	4607      	mov	r7, r0
 8005dbc:	d802      	bhi.n	8005dc4 <_realloc_r+0x34>
 8005dbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dc2:	d812      	bhi.n	8005dea <_realloc_r+0x5a>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	f7ff fc44 	bl	8005654 <_malloc_r>
 8005dcc:	4605      	mov	r5, r0
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d0ed      	beq.n	8005dae <_realloc_r+0x1e>
 8005dd2:	42bc      	cmp	r4, r7
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	bf28      	it	cs
 8005dda:	463a      	movcs	r2, r7
 8005ddc:	f7ff fbc0 	bl	8005560 <memcpy>
 8005de0:	4631      	mov	r1, r6
 8005de2:	4640      	mov	r0, r8
 8005de4:	f7ff fbca 	bl	800557c <_free_r>
 8005de8:	e7e1      	b.n	8005dae <_realloc_r+0x1e>
 8005dea:	4635      	mov	r5, r6
 8005dec:	e7df      	b.n	8005dae <_realloc_r+0x1e>

08005dee <_malloc_usable_size_r>:
 8005dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df2:	1f18      	subs	r0, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bfbc      	itt	lt
 8005df8:	580b      	ldrlt	r3, [r1, r0]
 8005dfa:	18c0      	addlt	r0, r0, r3
 8005dfc:	4770      	bx	lr
	...

08005e00 <_init>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr

08005e0c <_fini>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr
